/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * DmsTask
 * 工单管理
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.dms.model;

import com.jdcloud.sdk.service.dms.model.TableFilter;
import com.jdcloud.sdk.annotation.Required;
import com.jdcloud.sdk.service.JdcloudRequest;

/**
 * 创建数据导出工单
 */
public class CreateExportFlowRequest extends JdcloudRequest implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 数据库id
     */
    private Integer dataSourceId;

    /**
     * 数据库名称
     */
    private String dbName;

    /**
     * 执行方式，AUTO(&quot;AUTO&quot;, 0), BY_CREATOR(&quot;BY_CREATOR&quot;, 1)
     */
    private String taskPlanTypeEnum;

    /**
     * DBA审批方式，AUTO(&quot;AUTO&quot;, 0), MANUAL(&quot;MANUAL&quot;, 1)
     */
    private String dbaApproveTypeEnum;

    /**
     * 申请原因
     */
    private String memo;

    /**
     * 导出类型， RESULT_SET(&quot;RESULT_SET&quot;, 0), DB(&quot;DB&quot;, 1)
     */
    private String exportTypeEnum;

    /**
     * 导出格式，CSV(&quot;CSV&quot;, 0), SQL(&quot;SQL&quot;, 1)
     */
    private String exportFileTypeEnum;

    /**
     * 影响行数，导出类型为结果集导出时，必填
     */
    private Integer rowsNum;

    /**
     * 是否跳过检验，导出类型为结果集导出时，必填
     */
    private Boolean ignoreError;

    /**
     * 跳过检验原因，ignoreError为true时，必填
     */
    private String ignoreReason;

    /**
     * 导出SQL文本，导出类型为结果集导出时，必填
     */
    private String exportSqlText;

    /**
     * 导出表及过滤条件，为空时导出全部表。导出类型为数据库导出时，必填
     */
    private TableFilter tableFilters;

    /**
     * 导出内容，DATA(&quot;DATA&quot;, 0), STRUCT(&quot;STRUCT&quot;, 1), STRUCT_DATA(&quot;STRUCT_DATA&quot;, 2)，导出类型为数据库导出时，必填
     */
    private String exportContentTypeEnum;

    /**
     * 地域代码，取值范围参见[《各地域及可用区对照表》](../Enum-Definitions/Regions-AZ.md)
     * Required:true
     */
    @Required
    private String regionId;


    /**
     * get 数据库id
     *
     * @return
     */
    public Integer getDataSourceId() {
        return dataSourceId;
    }

    /**
     * set 数据库id
     *
     * @param dataSourceId
     */
    public void setDataSourceId(Integer dataSourceId) {
        this.dataSourceId = dataSourceId;
    }

    /**
     * get 数据库名称
     *
     * @return
     */
    public String getDbName() {
        return dbName;
    }

    /**
     * set 数据库名称
     *
     * @param dbName
     */
    public void setDbName(String dbName) {
        this.dbName = dbName;
    }

    /**
     * get 执行方式，AUTO(&quot;AUTO&quot;, 0), BY_CREATOR(&quot;BY_CREATOR&quot;, 1)
     *
     * @return
     */
    public String getTaskPlanTypeEnum() {
        return taskPlanTypeEnum;
    }

    /**
     * set 执行方式，AUTO(&quot;AUTO&quot;, 0), BY_CREATOR(&quot;BY_CREATOR&quot;, 1)
     *
     * @param taskPlanTypeEnum
     */
    public void setTaskPlanTypeEnum(String taskPlanTypeEnum) {
        this.taskPlanTypeEnum = taskPlanTypeEnum;
    }

    /**
     * get DBA审批方式，AUTO(&quot;AUTO&quot;, 0), MANUAL(&quot;MANUAL&quot;, 1)
     *
     * @return
     */
    public String getDbaApproveTypeEnum() {
        return dbaApproveTypeEnum;
    }

    /**
     * set DBA审批方式，AUTO(&quot;AUTO&quot;, 0), MANUAL(&quot;MANUAL&quot;, 1)
     *
     * @param dbaApproveTypeEnum
     */
    public void setDbaApproveTypeEnum(String dbaApproveTypeEnum) {
        this.dbaApproveTypeEnum = dbaApproveTypeEnum;
    }

    /**
     * get 申请原因
     *
     * @return
     */
    public String getMemo() {
        return memo;
    }

    /**
     * set 申请原因
     *
     * @param memo
     */
    public void setMemo(String memo) {
        this.memo = memo;
    }

    /**
     * get 导出类型， RESULT_SET(&quot;RESULT_SET&quot;, 0), DB(&quot;DB&quot;, 1)
     *
     * @return
     */
    public String getExportTypeEnum() {
        return exportTypeEnum;
    }

    /**
     * set 导出类型， RESULT_SET(&quot;RESULT_SET&quot;, 0), DB(&quot;DB&quot;, 1)
     *
     * @param exportTypeEnum
     */
    public void setExportTypeEnum(String exportTypeEnum) {
        this.exportTypeEnum = exportTypeEnum;
    }

    /**
     * get 导出格式，CSV(&quot;CSV&quot;, 0), SQL(&quot;SQL&quot;, 1)
     *
     * @return
     */
    public String getExportFileTypeEnum() {
        return exportFileTypeEnum;
    }

    /**
     * set 导出格式，CSV(&quot;CSV&quot;, 0), SQL(&quot;SQL&quot;, 1)
     *
     * @param exportFileTypeEnum
     */
    public void setExportFileTypeEnum(String exportFileTypeEnum) {
        this.exportFileTypeEnum = exportFileTypeEnum;
    }

    /**
     * get 影响行数，导出类型为结果集导出时，必填
     *
     * @return
     */
    public Integer getRowsNum() {
        return rowsNum;
    }

    /**
     * set 影响行数，导出类型为结果集导出时，必填
     *
     * @param rowsNum
     */
    public void setRowsNum(Integer rowsNum) {
        this.rowsNum = rowsNum;
    }

    /**
     * get 是否跳过检验，导出类型为结果集导出时，必填
     *
     * @return
     */
    public Boolean getIgnoreError() {
        return ignoreError;
    }

    /**
     * set 是否跳过检验，导出类型为结果集导出时，必填
     *
     * @param ignoreError
     */
    public void setIgnoreError(Boolean ignoreError) {
        this.ignoreError = ignoreError;
    }

    /**
     * get 跳过检验原因，ignoreError为true时，必填
     *
     * @return
     */
    public String getIgnoreReason() {
        return ignoreReason;
    }

    /**
     * set 跳过检验原因，ignoreError为true时，必填
     *
     * @param ignoreReason
     */
    public void setIgnoreReason(String ignoreReason) {
        this.ignoreReason = ignoreReason;
    }

    /**
     * get 导出SQL文本，导出类型为结果集导出时，必填
     *
     * @return
     */
    public String getExportSqlText() {
        return exportSqlText;
    }

    /**
     * set 导出SQL文本，导出类型为结果集导出时，必填
     *
     * @param exportSqlText
     */
    public void setExportSqlText(String exportSqlText) {
        this.exportSqlText = exportSqlText;
    }

    /**
     * get 导出表及过滤条件，为空时导出全部表。导出类型为数据库导出时，必填
     *
     * @return
     */
    public TableFilter getTableFilters() {
        return tableFilters;
    }

    /**
     * set 导出表及过滤条件，为空时导出全部表。导出类型为数据库导出时，必填
     *
     * @param tableFilters
     */
    public void setTableFilters(TableFilter tableFilters) {
        this.tableFilters = tableFilters;
    }

    /**
     * get 导出内容，DATA(&quot;DATA&quot;, 0), STRUCT(&quot;STRUCT&quot;, 1), STRUCT_DATA(&quot;STRUCT_DATA&quot;, 2)，导出类型为数据库导出时，必填
     *
     * @return
     */
    public String getExportContentTypeEnum() {
        return exportContentTypeEnum;
    }

    /**
     * set 导出内容，DATA(&quot;DATA&quot;, 0), STRUCT(&quot;STRUCT&quot;, 1), STRUCT_DATA(&quot;STRUCT_DATA&quot;, 2)，导出类型为数据库导出时，必填
     *
     * @param exportContentTypeEnum
     */
    public void setExportContentTypeEnum(String exportContentTypeEnum) {
        this.exportContentTypeEnum = exportContentTypeEnum;
    }

    /**
     * get 地域代码，取值范围参见[《各地域及可用区对照表》](../Enum-Definitions/Regions-AZ.md)
     *
     * @return
     */
    public String getRegionId() {
        return regionId;
    }

    /**
     * set 地域代码，取值范围参见[《各地域及可用区对照表》](../Enum-Definitions/Regions-AZ.md)
     *
     * @param regionId
     */
    public void setRegionId(String regionId) {
        this.regionId = regionId;
    }


    /**
     * set 数据库id
     *
     * @param dataSourceId
     */
    public CreateExportFlowRequest dataSourceId(Integer dataSourceId) {
        this.dataSourceId = dataSourceId;
        return this;
    }

    /**
     * set 数据库名称
     *
     * @param dbName
     */
    public CreateExportFlowRequest dbName(String dbName) {
        this.dbName = dbName;
        return this;
    }

    /**
     * set 执行方式，AUTO(&quot;AUTO&quot;, 0), BY_CREATOR(&quot;BY_CREATOR&quot;, 1)
     *
     * @param taskPlanTypeEnum
     */
    public CreateExportFlowRequest taskPlanTypeEnum(String taskPlanTypeEnum) {
        this.taskPlanTypeEnum = taskPlanTypeEnum;
        return this;
    }

    /**
     * set DBA审批方式，AUTO(&quot;AUTO&quot;, 0), MANUAL(&quot;MANUAL&quot;, 1)
     *
     * @param dbaApproveTypeEnum
     */
    public CreateExportFlowRequest dbaApproveTypeEnum(String dbaApproveTypeEnum) {
        this.dbaApproveTypeEnum = dbaApproveTypeEnum;
        return this;
    }

    /**
     * set 申请原因
     *
     * @param memo
     */
    public CreateExportFlowRequest memo(String memo) {
        this.memo = memo;
        return this;
    }

    /**
     * set 导出类型， RESULT_SET(&quot;RESULT_SET&quot;, 0), DB(&quot;DB&quot;, 1)
     *
     * @param exportTypeEnum
     */
    public CreateExportFlowRequest exportTypeEnum(String exportTypeEnum) {
        this.exportTypeEnum = exportTypeEnum;
        return this;
    }

    /**
     * set 导出格式，CSV(&quot;CSV&quot;, 0), SQL(&quot;SQL&quot;, 1)
     *
     * @param exportFileTypeEnum
     */
    public CreateExportFlowRequest exportFileTypeEnum(String exportFileTypeEnum) {
        this.exportFileTypeEnum = exportFileTypeEnum;
        return this;
    }

    /**
     * set 影响行数，导出类型为结果集导出时，必填
     *
     * @param rowsNum
     */
    public CreateExportFlowRequest rowsNum(Integer rowsNum) {
        this.rowsNum = rowsNum;
        return this;
    }

    /**
     * set 是否跳过检验，导出类型为结果集导出时，必填
     *
     * @param ignoreError
     */
    public CreateExportFlowRequest ignoreError(Boolean ignoreError) {
        this.ignoreError = ignoreError;
        return this;
    }

    /**
     * set 跳过检验原因，ignoreError为true时，必填
     *
     * @param ignoreReason
     */
    public CreateExportFlowRequest ignoreReason(String ignoreReason) {
        this.ignoreReason = ignoreReason;
        return this;
    }

    /**
     * set 导出SQL文本，导出类型为结果集导出时，必填
     *
     * @param exportSqlText
     */
    public CreateExportFlowRequest exportSqlText(String exportSqlText) {
        this.exportSqlText = exportSqlText;
        return this;
    }

    /**
     * set 导出表及过滤条件，为空时导出全部表。导出类型为数据库导出时，必填
     *
     * @param tableFilters
     */
    public CreateExportFlowRequest tableFilters(TableFilter tableFilters) {
        this.tableFilters = tableFilters;
        return this;
    }

    /**
     * set 导出内容，DATA(&quot;DATA&quot;, 0), STRUCT(&quot;STRUCT&quot;, 1), STRUCT_DATA(&quot;STRUCT_DATA&quot;, 2)，导出类型为数据库导出时，必填
     *
     * @param exportContentTypeEnum
     */
    public CreateExportFlowRequest exportContentTypeEnum(String exportContentTypeEnum) {
        this.exportContentTypeEnum = exportContentTypeEnum;
        return this;
    }

    /**
     * set 地域代码，取值范围参见[《各地域及可用区对照表》](../Enum-Definitions/Regions-AZ.md)
     *
     * @param regionId
     */
    public CreateExportFlowRequest regionId(String regionId) {
        this.regionId = regionId;
        return this;
    }


}