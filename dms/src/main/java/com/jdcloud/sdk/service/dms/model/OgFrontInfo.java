/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * 
 *
 * 
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.dms.model;

import java.util.List;
import java.util.ArrayList;

/**
 * ogFrontInfo
 */
public class OgFrontInfo  implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 主键类型。
     */
    
    private List<PairValue> ogShardingPrimaryKeys;
    /**
     * 算法类型。
     */
    
    private List<PairValue> ogAutoAlgorithms;
    /**
     * 表类型。
     */
    
    private List<PairValue> tableTypes;
    /**
     * 主键数据类型。
     */
    
    private List<PairValue> primaryKeyDataType;
    /**
     * opengauss字段数据类型。
     */
    
    private List<String> columnTypes;


    /**
    * get 主键类型。
    *
    * @return
    */
    public List<PairValue> getOgShardingPrimaryKeys() {
        return ogShardingPrimaryKeys;
    }

    /**
    * set 主键类型。
    *
    * @param ogShardingPrimaryKeys
    */
    public void setOgShardingPrimaryKeys(List<PairValue> ogShardingPrimaryKeys) {
        this.ogShardingPrimaryKeys = ogShardingPrimaryKeys;
    }


    /**
    * get 算法类型。
    *
    * @return
    */
    public List<PairValue> getOgAutoAlgorithms() {
        return ogAutoAlgorithms;
    }

    /**
    * set 算法类型。
    *
    * @param ogAutoAlgorithms
    */
    public void setOgAutoAlgorithms(List<PairValue> ogAutoAlgorithms) {
        this.ogAutoAlgorithms = ogAutoAlgorithms;
    }


    /**
    * get 表类型。
    *
    * @return
    */
    public List<PairValue> getTableTypes() {
        return tableTypes;
    }

    /**
    * set 表类型。
    *
    * @param tableTypes
    */
    public void setTableTypes(List<PairValue> tableTypes) {
        this.tableTypes = tableTypes;
    }


    /**
    * get 主键数据类型。
    *
    * @return
    */
    public List<PairValue> getPrimaryKeyDataType() {
        return primaryKeyDataType;
    }

    /**
    * set 主键数据类型。
    *
    * @param primaryKeyDataType
    */
    public void setPrimaryKeyDataType(List<PairValue> primaryKeyDataType) {
        this.primaryKeyDataType = primaryKeyDataType;
    }


    /**
    * get opengauss字段数据类型。
    *
    * @return
    */
    public List<String> getColumnTypes() {
        return columnTypes;
    }

    /**
    * set opengauss字段数据类型。
    *
    * @param columnTypes
    */
    public void setColumnTypes(List<String> columnTypes) {
        this.columnTypes = columnTypes;
    }



    /**
    * set 主键类型。
    *
    * @param ogShardingPrimaryKeys
    */
    public OgFrontInfo ogShardingPrimaryKeys(List<PairValue> ogShardingPrimaryKeys) {
        this.ogShardingPrimaryKeys = ogShardingPrimaryKeys;
        return this;
    }


    /**
    * set 算法类型。
    *
    * @param ogAutoAlgorithms
    */
    public OgFrontInfo ogAutoAlgorithms(List<PairValue> ogAutoAlgorithms) {
        this.ogAutoAlgorithms = ogAutoAlgorithms;
        return this;
    }


    /**
    * set 表类型。
    *
    * @param tableTypes
    */
    public OgFrontInfo tableTypes(List<PairValue> tableTypes) {
        this.tableTypes = tableTypes;
        return this;
    }


    /**
    * set 主键数据类型。
    *
    * @param primaryKeyDataType
    */
    public OgFrontInfo primaryKeyDataType(List<PairValue> primaryKeyDataType) {
        this.primaryKeyDataType = primaryKeyDataType;
        return this;
    }


    /**
    * set opengauss字段数据类型。
    *
    * @param columnTypes
    */
    public OgFrontInfo columnTypes(List<String> columnTypes) {
        this.columnTypes = columnTypes;
        return this;
    }



    /**
     * add item to 主键类型。
     *
     * @param ogShardingPrimaryKey
     */
    public void addOgShardingPrimaryKey(PairValue ogShardingPrimaryKey) {
        if (this.ogShardingPrimaryKeys == null) {
            this.ogShardingPrimaryKeys = new ArrayList<>();
        }
        this.ogShardingPrimaryKeys.add(ogShardingPrimaryKey);
    }

    /**
     * add item to 算法类型。
     *
     * @param ogAutoAlgorithm
     */
    public void addOgAutoAlgorithm(PairValue ogAutoAlgorithm) {
        if (this.ogAutoAlgorithms == null) {
            this.ogAutoAlgorithms = new ArrayList<>();
        }
        this.ogAutoAlgorithms.add(ogAutoAlgorithm);
    }

    /**
     * add item to 表类型。
     *
     * @param tableType
     */
    public void addTableType(PairValue tableType) {
        if (this.tableTypes == null) {
            this.tableTypes = new ArrayList<>();
        }
        this.tableTypes.add(tableType);
    }

    /**
     * add item to 主键数据类型。
     *
     * @param primaryKeyDataType
     */
    public void addPrimaryKeyDataType(PairValue primaryKeyDataType) {
        if (this.primaryKeyDataType == null) {
            this.primaryKeyDataType = new ArrayList<>();
        }
        this.primaryKeyDataType.add(primaryKeyDataType);
    }

    /**
     * add item to opengauss字段数据类型。
     *
     * @param columnType
     */
    public void addColumnType(String columnType) {
        if (this.columnTypes == null) {
            this.columnTypes = new ArrayList<>();
        }
        this.columnTypes.add(columnType);
    }
}