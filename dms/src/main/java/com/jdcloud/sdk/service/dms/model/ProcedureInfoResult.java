/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * DmsProcedure
 * 存储过程相关接口
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.dms.model;

import java.util.List;
import java.util.ArrayList;
import com.jdcloud.sdk.service.dms.model.Parameter;
import com.jdcloud.sdk.service.JdcloudResult;

/**
 * 获取存储过程详情，支持Mysql
 */
public class ProcedureInfoResult extends JdcloudResult implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 数据库名称。
     */
    private String dbName;

    /**
     * 存储过程名称。
     */
    private String procedureName;

    /**
     * 定义者。
     */
    private String definer;

    /**
     * 安全性，DEFAULT(&quot;DEFAULT&quot;, 1),DEFINER(&quot;DEFINER&quot;, 2), INVOKER(&quot;INVOKER&quot;, 3);
     */
    private String procedureSecurity;

    /**
     * 数据访问，DEFAULT(&quot;DEFAULT&quot;, 1),NO_SQL(&quot;NO_SQL&quot;, 2), CONTAINS_SQL(&quot;CONTAINS_SQL&quot;, 3), READS_SQL_DATA(&quot;READS_SQL_DATA&quot;, 4), MODIFIES_SQL_DATA(&quot;MODIFIES_SQL_DATA&quot;, 5);
     */
    private String dataAccess;

    /**
     * 确定性。
     */
    private Boolean deterministic;

    /**
     * 存储过程定义SQL。
     */
    private String definitionSql;

    /**
     * 创建存储过程定义完整SQL。
     */
    private String completeSql;

    /**
     * parameters
     */
    
    private List<Parameter> parameters;
    /**
     * 注释
     */
    private String comment;



    /**
     * get 数据库名称。
     *
     * @return
     */
    public String getDbName() {
        return dbName;
    }

    /**
     * set 数据库名称。
     *
     * @param dbName
     */
    public void setDbName(String dbName) {
        this.dbName = dbName;
    }


    /**
     * get 存储过程名称。
     *
     * @return
     */
    public String getProcedureName() {
        return procedureName;
    }

    /**
     * set 存储过程名称。
     *
     * @param procedureName
     */
    public void setProcedureName(String procedureName) {
        this.procedureName = procedureName;
    }


    /**
     * get 定义者。
     *
     * @return
     */
    public String getDefiner() {
        return definer;
    }

    /**
     * set 定义者。
     *
     * @param definer
     */
    public void setDefiner(String definer) {
        this.definer = definer;
    }


    /**
     * get 安全性，DEFAULT(&quot;DEFAULT&quot;, 1),DEFINER(&quot;DEFINER&quot;, 2), INVOKER(&quot;INVOKER&quot;, 3);
     *
     * @return
     */
    public String getProcedureSecurity() {
        return procedureSecurity;
    }

    /**
     * set 安全性，DEFAULT(&quot;DEFAULT&quot;, 1),DEFINER(&quot;DEFINER&quot;, 2), INVOKER(&quot;INVOKER&quot;, 3);
     *
     * @param procedureSecurity
     */
    public void setProcedureSecurity(String procedureSecurity) {
        this.procedureSecurity = procedureSecurity;
    }


    /**
     * get 数据访问，DEFAULT(&quot;DEFAULT&quot;, 1),NO_SQL(&quot;NO_SQL&quot;, 2), CONTAINS_SQL(&quot;CONTAINS_SQL&quot;, 3), READS_SQL_DATA(&quot;READS_SQL_DATA&quot;, 4), MODIFIES_SQL_DATA(&quot;MODIFIES_SQL_DATA&quot;, 5);
     *
     * @return
     */
    public String getDataAccess() {
        return dataAccess;
    }

    /**
     * set 数据访问，DEFAULT(&quot;DEFAULT&quot;, 1),NO_SQL(&quot;NO_SQL&quot;, 2), CONTAINS_SQL(&quot;CONTAINS_SQL&quot;, 3), READS_SQL_DATA(&quot;READS_SQL_DATA&quot;, 4), MODIFIES_SQL_DATA(&quot;MODIFIES_SQL_DATA&quot;, 5);
     *
     * @param dataAccess
     */
    public void setDataAccess(String dataAccess) {
        this.dataAccess = dataAccess;
    }


    /**
     * get 确定性。
     *
     * @return
     */
    public Boolean getDeterministic() {
        return deterministic;
    }

    /**
     * set 确定性。
     *
     * @param deterministic
     */
    public void setDeterministic(Boolean deterministic) {
        this.deterministic = deterministic;
    }


    /**
     * get 存储过程定义SQL。
     *
     * @return
     */
    public String getDefinitionSql() {
        return definitionSql;
    }

    /**
     * set 存储过程定义SQL。
     *
     * @param definitionSql
     */
    public void setDefinitionSql(String definitionSql) {
        this.definitionSql = definitionSql;
    }


    /**
     * get 创建存储过程定义完整SQL。
     *
     * @return
     */
    public String getCompleteSql() {
        return completeSql;
    }

    /**
     * set 创建存储过程定义完整SQL。
     *
     * @param completeSql
     */
    public void setCompleteSql(String completeSql) {
        this.completeSql = completeSql;
    }


    /**
    * get parameters
    *
    * @return
    */
    public List<Parameter> getParameters() {
        return parameters;
    }

    /**
    * set parameters
    *
    * @param parameters
    */
    public void setParameters(List<Parameter> parameters) {
        this.parameters = parameters;
    }


    /**
     * get 注释
     *
     * @return
     */
    public String getComment() {
        return comment;
    }

    /**
     * set 注释
     *
     * @param comment
     */
    public void setComment(String comment) {
        this.comment = comment;
    }



    /**
     * set 数据库名称。
     *
     * @param dbName
     */
    public ProcedureInfoResult dbName(String dbName) {
        this.dbName = dbName;
        return this;
    }


    /**
     * set 存储过程名称。
     *
     * @param procedureName
     */
    public ProcedureInfoResult procedureName(String procedureName) {
        this.procedureName = procedureName;
        return this;
    }


    /**
     * set 定义者。
     *
     * @param definer
     */
    public ProcedureInfoResult definer(String definer) {
        this.definer = definer;
        return this;
    }


    /**
     * set 安全性，DEFAULT(&quot;DEFAULT&quot;, 1),DEFINER(&quot;DEFINER&quot;, 2), INVOKER(&quot;INVOKER&quot;, 3);
     *
     * @param procedureSecurity
     */
    public ProcedureInfoResult procedureSecurity(String procedureSecurity) {
        this.procedureSecurity = procedureSecurity;
        return this;
    }


    /**
     * set 数据访问，DEFAULT(&quot;DEFAULT&quot;, 1),NO_SQL(&quot;NO_SQL&quot;, 2), CONTAINS_SQL(&quot;CONTAINS_SQL&quot;, 3), READS_SQL_DATA(&quot;READS_SQL_DATA&quot;, 4), MODIFIES_SQL_DATA(&quot;MODIFIES_SQL_DATA&quot;, 5);
     *
     * @param dataAccess
     */
    public ProcedureInfoResult dataAccess(String dataAccess) {
        this.dataAccess = dataAccess;
        return this;
    }


    /**
     * set 确定性。
     *
     * @param deterministic
     */
    public ProcedureInfoResult deterministic(Boolean deterministic) {
        this.deterministic = deterministic;
        return this;
    }


    /**
     * set 存储过程定义SQL。
     *
     * @param definitionSql
     */
    public ProcedureInfoResult definitionSql(String definitionSql) {
        this.definitionSql = definitionSql;
        return this;
    }


    /**
     * set 创建存储过程定义完整SQL。
     *
     * @param completeSql
     */
    public ProcedureInfoResult completeSql(String completeSql) {
        this.completeSql = completeSql;
        return this;
    }


    /**
    * set parameters
    *
    * @param parameters
    */
    public ProcedureInfoResult parameters(List<Parameter> parameters) {
        this.parameters = parameters;
        return this;
    }


    /**
     * set 注释
     *
     * @param comment
     */
    public ProcedureInfoResult comment(String comment) {
        this.comment = comment;
        return this;
    }



    /**
     * add item to parameters
     *
     * @param parameter
     */
    public void addParameter(Parameter parameter) {
        if (this.parameters == null) {
            this.parameters = new ArrayList<>();
        }
        this.parameters.add(parameter);
    }
}