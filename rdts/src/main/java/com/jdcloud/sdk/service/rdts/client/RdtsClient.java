/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * JDCloud Redis Data Transfer Service API
 * 京东云Redis数据迁移服务接口
 *
 * OpenAPI spec version: v2
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.rdts.client;

import com.jdcloud.sdk.JdcloudSdkException;
import com.jdcloud.sdk.auth.CredentialsProvider;
import com.jdcloud.sdk.client.Environment;
import com.jdcloud.sdk.client.Jdcloud;
import com.jdcloud.sdk.client.JdcloudClient;
import com.jdcloud.sdk.client.JdcloudValidateException;
import com.jdcloud.sdk.http.HttpRequestConfig;
import com.jdcloud.sdk.service.rdts.model.DeleteMigrationRequest;
import com.jdcloud.sdk.service.rdts.model.DeleteMigrationResponse;
import com.jdcloud.sdk.service.rdts.client.DeleteMigrationExecutor;
import com.jdcloud.sdk.service.rdts.model.ModifyMigrationNameRequest;
import com.jdcloud.sdk.service.rdts.model.ModifyMigrationNameResponse;
import com.jdcloud.sdk.service.rdts.client.ModifyMigrationNameExecutor;
import com.jdcloud.sdk.service.rdts.model.RestartMigrationJobRequest;
import com.jdcloud.sdk.service.rdts.model.RestartMigrationJobResponse;
import com.jdcloud.sdk.service.rdts.client.RestartMigrationJobExecutor;
import com.jdcloud.sdk.service.rdts.model.CreateMigrationRequest;
import com.jdcloud.sdk.service.rdts.model.CreateMigrationResponse;
import com.jdcloud.sdk.service.rdts.client.CreateMigrationExecutor;
import com.jdcloud.sdk.service.rdts.model.DescribeMigrationRequest;
import com.jdcloud.sdk.service.rdts.model.DescribeMigrationResponse;
import com.jdcloud.sdk.service.rdts.client.DescribeMigrationExecutor;
import com.jdcloud.sdk.service.rdts.model.StartMigrationJobRequest;
import com.jdcloud.sdk.service.rdts.model.StartMigrationJobResponse;
import com.jdcloud.sdk.service.rdts.client.StartMigrationJobExecutor;
import com.jdcloud.sdk.service.rdts.model.DescribeMigrationsRequest;
import com.jdcloud.sdk.service.rdts.model.DescribeMigrationsResponse;
import com.jdcloud.sdk.service.rdts.client.DescribeMigrationsExecutor;
import com.jdcloud.sdk.service.rdts.model.ModifyMigrationRequest;
import com.jdcloud.sdk.service.rdts.model.ModifyMigrationResponse;
import com.jdcloud.sdk.service.rdts.client.ModifyMigrationExecutor;
import com.jdcloud.sdk.service.rdts.model.GetMigrationProgressRequest;
import com.jdcloud.sdk.service.rdts.model.GetMigrationProgressResponse;
import com.jdcloud.sdk.service.rdts.client.GetMigrationProgressExecutor;
import com.jdcloud.sdk.service.rdts.model.CreateMigrationJobRequest;
import com.jdcloud.sdk.service.rdts.model.CreateMigrationJobResponse;
import com.jdcloud.sdk.service.rdts.client.CreateMigrationJobExecutor;

/**
 * rdtsClient
 */
public class RdtsClient extends JdcloudClient {

    public final static String ApiVersion = "v2";
    private final static String UserAgentPrefix = "JdcloudSdkJava";
    public final static String ClientVersion = "1.2.8";
    public final static String DefaultEndpoint = "rdts.jdcloud-api.com";
    public final static String ServiceName = "rdts";
    public final static String UserAgent = UserAgentPrefix + "/" + ClientVersion + " " + ServiceName + "/" + ApiVersion;

    CredentialsProvider credentialsProvider;
    HttpRequestConfig httpRequestConfig;
    Environment environment = new Environment.Builder().endpoint(DefaultEndpoint).build();

    public CredentialsProvider getCredentialsProvider() {
        return credentialsProvider;
    }

    public HttpRequestConfig getHttpRequestConfig() {
        return httpRequestConfig;
    }

    public Environment getEnvironment() {
        return environment;
    }

    public String getUserAgent() {
        return UserAgent;
    }

    public String getServiceName() {
        return ServiceName;
    }

    public String getVersion() {
        return ApiVersion;
    }

    private RdtsClient() {

    }

    public static Builder builder() {
        return new DefaultBuilder();
    }


    /**
     * 删除迁移任务，迁移中的任务不能删除，迁移代理有流量不能删除
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteMigrationResponse deleteMigration(DeleteMigrationRequest request) throws JdcloudSdkException {
        return new DeleteMigrationExecutor().client(this).execute(request);
    }

    /**
     * 修改迁移任务名
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ModifyMigrationNameResponse modifyMigrationName(ModifyMigrationNameRequest request) throws JdcloudSdkException {
        return new ModifyMigrationNameExecutor().client(this).execute(request);
    }

    /**
     * 如果迁移超时、迁移失败，可重新迁移
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public RestartMigrationJobResponse restartMigrationJob(RestartMigrationJobRequest request) throws JdcloudSdkException {
        return new RestartMigrationJobExecutor().client(this).execute(request);
    }

    /**
     * 创建一个迁移任务，指定并校验迁移配置
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreateMigrationResponse createMigration(CreateMigrationRequest request) throws JdcloudSdkException {
        return new CreateMigrationExecutor().client(this).execute(request);
    }

    /**
     * 查询迁移任务详情
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeMigrationResponse describeMigration(DescribeMigrationRequest request) throws JdcloudSdkException {
        return new DescribeMigrationExecutor().client(this).execute(request);
    }

    /**
     * 启动迁移job，开始迁移数据
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public StartMigrationJobResponse startMigrationJob(StartMigrationJobRequest request) throws JdcloudSdkException {
        return new StartMigrationJobExecutor().client(this).execute(request);
    }

    /**
     * 迁移任务列表，可分页、可排序、可搜索、可过滤
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeMigrationsResponse describeMigrations(DescribeMigrationsRequest request) throws JdcloudSdkException {
        return new DescribeMigrationsExecutor().client(this).execute(request);
    }

    /**
     * 修改并验证迁移配置
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ModifyMigrationResponse modifyMigration(ModifyMigrationRequest request) throws JdcloudSdkException {
        return new ModifyMigrationExecutor().client(this).execute(request);
    }

    /**
     * 查询迁移进度及数据校验状态
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetMigrationProgressResponse getMigrationProgress(GetMigrationProgressRequest request) throws JdcloudSdkException {
        return new GetMigrationProgressExecutor().client(this).execute(request);
    }

    /**
     * 创建迁移job，创建job之后无法修改迁移配置
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreateMigrationJobResponse createMigrationJob(CreateMigrationJobRequest request) throws JdcloudSdkException {
        return new CreateMigrationJobExecutor().client(this).execute(request);
    }


    public interface Builder {
        public Builder credentialsProvider(CredentialsProvider provider);
        public Builder environment(Environment environment);
        public Builder httpRequestConfig(HttpRequestConfig config);
        public RdtsClient build() throws JdcloudSdkException;
    }

    private static class DefaultBuilder implements Builder {

        private RdtsClient rdtsClient;

        public DefaultBuilder() {
            rdtsClient = new RdtsClient();
        }

        public DefaultBuilder credentialsProvider(CredentialsProvider provider) {
            rdtsClient.credentialsProvider = provider;
            return this;
        }

        public DefaultBuilder httpRequestConfig(HttpRequestConfig config) {
            rdtsClient.httpRequestConfig = config;
            return this;
        }

        public RdtsClient build() throws JdcloudSdkException {

            if (rdtsClient.credentialsProvider == null) {
                //if credentialsProvider not set, try load jdcloud global default  credentials provider
                rdtsClient.credentialsProvider = Jdcloud.defaultInstance().getCredentialsProvider();
                if (rdtsClient.credentialsProvider == null) {
                    throw new JdcloudValidateException("RdtsClient build error: jdcloud credentials provider not set");
                }
            }
            if (rdtsClient.httpRequestConfig == null) {
                rdtsClient.httpRequestConfig = Jdcloud.defaultInstance().getHttpRequestConfig();
                if (rdtsClient.httpRequestConfig == null) {
                    throw new JdcloudValidateException("RdtsClient build error: http request config not set");
                }
            }
            return rdtsClient;
        }

        public Builder environment(Environment environment) {
            rdtsClient.environment = environment;
            return this;
        }
    }
}
