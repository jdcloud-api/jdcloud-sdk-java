/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * JDCLOUD流计算API
 * 提供流计算操作的相关接口。
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.streamcomputer.client;

import com.jdcloud.sdk.JdcloudSdkException;
import com.jdcloud.sdk.auth.CredentialsProvider;
import com.jdcloud.sdk.client.Environment;
import com.jdcloud.sdk.client.Jdcloud;
import com.jdcloud.sdk.client.JdcloudClient;
import com.jdcloud.sdk.client.JdcloudValidateException;
import com.jdcloud.sdk.http.HttpRequestConfig;
import com.jdcloud.sdk.service.streamcomputer.model.DeleteNamespaceRequest;
import com.jdcloud.sdk.service.streamcomputer.model.DeleteNamespaceResponse;
import com.jdcloud.sdk.service.streamcomputer.client.DeleteNamespaceExecutor;
import com.jdcloud.sdk.service.streamcomputer.model.DescribeJobRequest;
import com.jdcloud.sdk.service.streamcomputer.model.DescribeJobResponse;
import com.jdcloud.sdk.service.streamcomputer.client.DescribeJobExecutor;
import com.jdcloud.sdk.service.streamcomputer.model.StopJobRequest;
import com.jdcloud.sdk.service.streamcomputer.model.StopJobResponse;
import com.jdcloud.sdk.service.streamcomputer.client.StopJobExecutor;
import com.jdcloud.sdk.service.streamcomputer.model.QueryNamespacesRequest;
import com.jdcloud.sdk.service.streamcomputer.model.QueryNamespacesResponse;
import com.jdcloud.sdk.service.streamcomputer.client.QueryNamespacesExecutor;
import com.jdcloud.sdk.service.streamcomputer.model.GetJobListRequest;
import com.jdcloud.sdk.service.streamcomputer.model.GetJobListResponse;
import com.jdcloud.sdk.service.streamcomputer.client.GetJobListExecutor;
import com.jdcloud.sdk.service.streamcomputer.model.DeleteStorageRequest;
import com.jdcloud.sdk.service.streamcomputer.model.DeleteStorageResponse;
import com.jdcloud.sdk.service.streamcomputer.client.DeleteStorageExecutor;
import com.jdcloud.sdk.service.streamcomputer.model.StartJobRequest;
import com.jdcloud.sdk.service.streamcomputer.model.StartJobResponse;
import com.jdcloud.sdk.service.streamcomputer.client.StartJobExecutor;
import com.jdcloud.sdk.service.streamcomputer.model.GetStorageListRequest;
import com.jdcloud.sdk.service.streamcomputer.model.GetStorageListResponse;
import com.jdcloud.sdk.service.streamcomputer.client.GetStorageListExecutor;
import com.jdcloud.sdk.service.streamcomputer.model.CreateNamespaceRequest;
import com.jdcloud.sdk.service.streamcomputer.model.CreateNamespaceResponse;
import com.jdcloud.sdk.service.streamcomputer.client.CreateNamespaceExecutor;
import com.jdcloud.sdk.service.streamcomputer.model.AddOrUpdateStorageRequest;
import com.jdcloud.sdk.service.streamcomputer.model.AddOrUpdateStorageResponse;
import com.jdcloud.sdk.service.streamcomputer.client.AddOrUpdateStorageExecutor;
import com.jdcloud.sdk.service.streamcomputer.model.AddOrUpdateJobRequest;
import com.jdcloud.sdk.service.streamcomputer.model.AddOrUpdateJobResponse;
import com.jdcloud.sdk.service.streamcomputer.client.AddOrUpdateJobExecutor;
import com.jdcloud.sdk.service.streamcomputer.model.QueryNamespaceDetailRequest;
import com.jdcloud.sdk.service.streamcomputer.model.QueryNamespaceDetailResponse;
import com.jdcloud.sdk.service.streamcomputer.client.QueryNamespaceDetailExecutor;
import com.jdcloud.sdk.service.streamcomputer.model.UpdateNamespaceRequest;
import com.jdcloud.sdk.service.streamcomputer.model.UpdateNamespaceResponse;
import com.jdcloud.sdk.service.streamcomputer.client.UpdateNamespaceExecutor;
import com.jdcloud.sdk.service.streamcomputer.model.DeleteJobRequest;
import com.jdcloud.sdk.service.streamcomputer.model.DeleteJobResponse;
import com.jdcloud.sdk.service.streamcomputer.client.DeleteJobExecutor;
import com.jdcloud.sdk.service.streamcomputer.model.DescribeStorageRequest;
import com.jdcloud.sdk.service.streamcomputer.model.DescribeStorageResponse;
import com.jdcloud.sdk.service.streamcomputer.client.DescribeStorageExecutor;

/**
 * streamcomputerClient
 */
public class StreamcomputerClient extends JdcloudClient {

    public final static String ApiVersion = "v1";
    private final static String UserAgentPrefix = "JdcloudSdkJava";
    public final static String ClientVersion = "1.0.1";
    public final static String DefaultEndpoint = "streamcompute.jdcloud-api.com";
    public final static String ServiceName = "streamcomputer";
    public final static String UserAgent = UserAgentPrefix + "/" + ClientVersion + " " + ServiceName + "/" + ApiVersion;

    CredentialsProvider credentialsProvider;
    HttpRequestConfig httpRequestConfig;
    Environment environment = new Environment.Builder().endpoint(DefaultEndpoint).build();

    public CredentialsProvider getCredentialsProvider() {
        return credentialsProvider;
    }

    public HttpRequestConfig getHttpRequestConfig() {
        return httpRequestConfig;
    }

    public Environment getEnvironment() {
        return environment;
    }

    public String getUserAgent() {
        return UserAgent;
    }

    public String getServiceName() {
        return ServiceName;
    }

    public String getVersion() {
        return ApiVersion;
    }

    private StreamcomputerClient() {

    }

    public static Builder builder() {
        return new DefaultBuilder();
    }


    /**
     * 删除namespace,如果旗下关联有其他资源，不允许删除
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteNamespaceResponse deleteNamespace(DeleteNamespaceRequest request) throws JdcloudSdkException {
        return new DeleteNamespaceExecutor().client(this).execute(request);
    }

    /**
     * 查询指定作业详情
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeJobResponse describeJob(DescribeJobRequest request) throws JdcloudSdkException {
        return new DescribeJobExecutor().client(this).execute(request);
    }

    /**
     * 停止作业运行job
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public StopJobResponse stopJob(StopJobRequest request) throws JdcloudSdkException {
        return new StopJobExecutor().client(this).execute(request);
    }

    /**
     * 查询租户下的应用列表
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public QueryNamespacesResponse queryNamespaces(QueryNamespacesRequest request) throws JdcloudSdkException {
        return new QueryNamespacesExecutor().client(this).execute(request);
    }

    /**
     * 查询指定应用下的所有job
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetJobListResponse getJobList(GetJobListRequest request) throws JdcloudSdkException {
        return new GetJobListExecutor().client(this).execute(request);
    }

    /**
     * 删除指定输入
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteStorageResponse deleteStorage(DeleteStorageRequest request) throws JdcloudSdkException {
        return new DeleteStorageExecutor().client(this).execute(request);
    }

    /**
     * 运行job
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public StartJobResponse startJob(StartJobRequest request) throws JdcloudSdkException {
        return new StartJobExecutor().client(this).execute(request);
    }

    /**
     * 创建或者更新storage
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetStorageListResponse getStorageList(GetStorageListRequest request) throws JdcloudSdkException {
        return new GetStorageListExecutor().client(this).execute(request);
    }

    /**
     * 创建namespace
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreateNamespaceResponse createNamespace(CreateNamespaceRequest request) throws JdcloudSdkException {
        return new CreateNamespaceExecutor().client(this).execute(request);
    }

    /**
     * 创建或者更新storage
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public AddOrUpdateStorageResponse addOrUpdateStorage(AddOrUpdateStorageRequest request) throws JdcloudSdkException {
        return new AddOrUpdateStorageExecutor().client(this).execute(request);
    }

    /**
     * 添加或者更新job
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public AddOrUpdateJobResponse addOrUpdateJob(AddOrUpdateJobRequest request) throws JdcloudSdkException {
        return new AddOrUpdateJobExecutor().client(this).execute(request);
    }

    /**
     * 查询某个应用详情
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public QueryNamespaceDetailResponse queryNamespaceDetail(QueryNamespaceDetailRequest request) throws JdcloudSdkException {
        return new QueryNamespaceDetailExecutor().client(this).execute(request);
    }

    /**
     * 更新namespace
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public UpdateNamespaceResponse updateNamespace(UpdateNamespaceRequest request) throws JdcloudSdkException {
        return new UpdateNamespaceExecutor().client(this).execute(request);
    }

    /**
     * 删除作业
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteJobResponse deleteJob(DeleteJobRequest request) throws JdcloudSdkException {
        return new DeleteJobExecutor().client(this).execute(request);
    }

    /**
     * 查询指定输入
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeStorageResponse describeStorage(DescribeStorageRequest request) throws JdcloudSdkException {
        return new DescribeStorageExecutor().client(this).execute(request);
    }


    public interface Builder {
        public Builder credentialsProvider(CredentialsProvider provider);
        public Builder environment(Environment environment);
        public Builder httpRequestConfig(HttpRequestConfig config);
        public StreamcomputerClient build() throws JdcloudSdkException;
    }

    private static class DefaultBuilder implements Builder {

        private StreamcomputerClient streamcomputerClient;

        public DefaultBuilder() {
            streamcomputerClient = new StreamcomputerClient();
        }

        public DefaultBuilder credentialsProvider(CredentialsProvider provider) {
            streamcomputerClient.credentialsProvider = provider;
            return this;
        }

        public DefaultBuilder httpRequestConfig(HttpRequestConfig config) {
            streamcomputerClient.httpRequestConfig = config;
            return this;
        }

        public StreamcomputerClient build() throws JdcloudSdkException {

            if (streamcomputerClient.credentialsProvider == null) {
                //if credentialsProvider not set, try load jdcloud global default  credentials provider
                streamcomputerClient.credentialsProvider = Jdcloud.defaultInstance().getCredentialsProvider();
                if (streamcomputerClient.credentialsProvider == null) {
                    throw new JdcloudValidateException("StreamcomputerClient build error: jdcloud credentials provider not set");
                }
            }
            if (streamcomputerClient.httpRequestConfig == null) {
                streamcomputerClient.httpRequestConfig = Jdcloud.defaultInstance().getHttpRequestConfig();
                if (streamcomputerClient.httpRequestConfig == null) {
                    throw new JdcloudValidateException("StreamcomputerClient build error: http request config not set");
                }
            }
            return streamcomputerClient;
        }

        public Builder environment(Environment environment) {
            streamcomputerClient.environment = environment;
            return this;
        }
    }
}
