/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * JDCLOUD 流数据总线 API
 * 提供流数据总线topic操作的相关接口。
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.streambus.client;

import com.jdcloud.sdk.JdcloudSdkException;
import com.jdcloud.sdk.auth.CredentialsProvider;
import com.jdcloud.sdk.client.Environment;
import com.jdcloud.sdk.client.Jdcloud;
import com.jdcloud.sdk.client.JdcloudClient;
import com.jdcloud.sdk.client.JdcloudValidateException;
import com.jdcloud.sdk.http.HttpRequestConfig;
import com.jdcloud.sdk.service.streambus.model.GetConsumerGroupListRequest;
import com.jdcloud.sdk.service.streambus.model.GetConsumerGroupListResponse;
import com.jdcloud.sdk.service.streambus.client.GetConsumerGroupListExecutor;
import com.jdcloud.sdk.service.streambus.model.CreateConsumerGroupRequest;
import com.jdcloud.sdk.service.streambus.model.CreateConsumerGroupResponse;
import com.jdcloud.sdk.service.streambus.client.CreateConsumerGroupExecutor;
import com.jdcloud.sdk.service.streambus.model.DeleteConsumerGroupRequest;
import com.jdcloud.sdk.service.streambus.model.DeleteConsumerGroupResponse;
import com.jdcloud.sdk.service.streambus.client.DeleteConsumerGroupExecutor;
import com.jdcloud.sdk.service.streambus.model.AddTopicRequest;
import com.jdcloud.sdk.service.streambus.model.AddTopicResponse;
import com.jdcloud.sdk.service.streambus.client.AddTopicExecutor;
import com.jdcloud.sdk.service.streambus.model.DescribeTopicRequest;
import com.jdcloud.sdk.service.streambus.model.DescribeTopicResponse;
import com.jdcloud.sdk.service.streambus.client.DescribeTopicExecutor;
import com.jdcloud.sdk.service.streambus.model.DeleteTopicRequest;
import com.jdcloud.sdk.service.streambus.model.DeleteTopicResponse;
import com.jdcloud.sdk.service.streambus.client.DeleteTopicExecutor;
import com.jdcloud.sdk.service.streambus.model.UpdateTopicRequest;
import com.jdcloud.sdk.service.streambus.model.UpdateTopicResponse;
import com.jdcloud.sdk.service.streambus.client.UpdateTopicExecutor;
import com.jdcloud.sdk.service.streambus.model.GetTopicListRequest;
import com.jdcloud.sdk.service.streambus.model.GetTopicListResponse;
import com.jdcloud.sdk.service.streambus.client.GetTopicListExecutor;

/**
 * streambusClient
 */
public class StreambusClient extends JdcloudClient {

    public final static String ApiVersion = "v1";
    private final static String UserAgentPrefix = "JdcloudSdkJava";
    public final static String ClientVersion = "1.0.1";
    public final static String DefaultEndpoint = "streambus.jdcloud-api.com";
    public final static String ServiceName = "streambus";
    public final static String UserAgent = UserAgentPrefix + "/" + ClientVersion + " " + ServiceName + "/" + ApiVersion;

    CredentialsProvider credentialsProvider;
    HttpRequestConfig httpRequestConfig;
    Environment environment = new Environment.Builder().endpoint(DefaultEndpoint).build();

    public CredentialsProvider getCredentialsProvider() {
        return credentialsProvider;
    }

    public HttpRequestConfig getHttpRequestConfig() {
        return httpRequestConfig;
    }

    public Environment getEnvironment() {
        return environment;
    }

    public String getUserAgent() {
        return UserAgent;
    }

    public String getServiceName() {
        return ServiceName;
    }

    public String getVersion() {
        return ApiVersion;
    }

    private StreambusClient() {

    }

    public static Builder builder() {
        return new DefaultBuilder();
    }


    /**
     * 查看指定主题的所有消费组
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetConsumerGroupListResponse getConsumerGroupList(GetConsumerGroupListRequest request) throws JdcloudSdkException {
        return new GetConsumerGroupListExecutor().client(this).execute(request);
    }

    /**
     * 创建consumerGroupName
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreateConsumerGroupResponse createConsumerGroup(CreateConsumerGroupRequest request) throws JdcloudSdkException {
        return new CreateConsumerGroupExecutor().client(this).execute(request);
    }

    /**
     * 删除consumerGroupName
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteConsumerGroupResponse deleteConsumerGroup(DeleteConsumerGroupRequest request) throws JdcloudSdkException {
        return new DeleteConsumerGroupExecutor().client(this).execute(request);
    }

    /**
     * 创建topic时，topicModel中只需要传topic参数，另外两个参数可为空
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public AddTopicResponse addTopic(AddTopicRequest request) throws JdcloudSdkException {
        return new AddTopicExecutor().client(this).execute(request);
    }

    /**
     * 查询指定主题,如果已归档会返回归档信息
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeTopicResponse describeTopic(DescribeTopicRequest request) throws JdcloudSdkException {
        return new DescribeTopicExecutor().client(this).execute(request);
    }

    /**
     * 删除topic
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteTopicResponse deleteTopic(DeleteTopicRequest request) throws JdcloudSdkException {
        return new DeleteTopicExecutor().client(this).execute(request);
    }

    /**
     * 此接口可以用来更新主题，创建归档，修改归档，删除归档，传入不同的参数可以实现不同的功能。修改归档只需要修改相应归档的参数，删除归档只需要把归档参数置为空即可
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public UpdateTopicResponse updateTopic(UpdateTopicRequest request) throws JdcloudSdkException {
        return new UpdateTopicExecutor().client(this).execute(request);
    }

    /**
     * 查询topic列表，返回topic的集合
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetTopicListResponse getTopicList(GetTopicListRequest request) throws JdcloudSdkException {
        return new GetTopicListExecutor().client(this).execute(request);
    }


    public interface Builder {
        public Builder credentialsProvider(CredentialsProvider provider);
        public Builder environment(Environment environment);
        public Builder httpRequestConfig(HttpRequestConfig config);
        public StreambusClient build() throws JdcloudSdkException;
    }

    private static class DefaultBuilder implements Builder {

        private StreambusClient streambusClient;

        public DefaultBuilder() {
            streambusClient = new StreambusClient();
        }

        public DefaultBuilder credentialsProvider(CredentialsProvider provider) {
            streambusClient.credentialsProvider = provider;
            return this;
        }

        public DefaultBuilder httpRequestConfig(HttpRequestConfig config) {
            streambusClient.httpRequestConfig = config;
            return this;
        }

        public StreambusClient build() throws JdcloudSdkException {

            if (streambusClient.credentialsProvider == null) {
                //if credentialsProvider not set, try load jdcloud global default  credentials provider
                streambusClient.credentialsProvider = Jdcloud.defaultInstance().getCredentialsProvider();
                if (streambusClient.credentialsProvider == null) {
                    throw new JdcloudValidateException("StreambusClient build error: jdcloud credentials provider not set");
                }
            }
            if (streambusClient.httpRequestConfig == null) {
                streambusClient.httpRequestConfig = Jdcloud.defaultInstance().getHttpRequestConfig();
                if (streambusClient.httpRequestConfig == null) {
                    throw new JdcloudValidateException("StreambusClient build error: http request config not set");
                }
            }
            return streambusClient;
        }

        public Builder environment(Environment environment) {
            streambusClient.environment = environment;
            return this;
        }
    }
}
