/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 京东云jcq接口
 * jcq相关接口
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.jcq.client;

import com.jdcloud.sdk.JdcloudSdkException;
import com.jdcloud.sdk.auth.CredentialsProvider;
import com.jdcloud.sdk.client.Environment;
import com.jdcloud.sdk.client.Jdcloud;
import com.jdcloud.sdk.client.JdcloudClient;
import com.jdcloud.sdk.client.JdcloudValidateException;
import com.jdcloud.sdk.http.HttpRequestConfig;
import com.jdcloud.sdk.service.jcq.model.RemovePermissionRequest;
import com.jdcloud.sdk.service.jcq.model.RemovePermissionResponse;
import com.jdcloud.sdk.service.jcq.client.RemovePermissionExecutor;
import com.jdcloud.sdk.service.jcq.model.ResetConsumeOffsetRequest;
import com.jdcloud.sdk.service.jcq.model.ResetConsumeOffsetResponse;
import com.jdcloud.sdk.service.jcq.client.ResetConsumeOffsetExecutor;
import com.jdcloud.sdk.service.jcq.model.DeleteDeadLettersRequest;
import com.jdcloud.sdk.service.jcq.model.DeleteDeadLettersResponse;
import com.jdcloud.sdk.service.jcq.client.DeleteDeadLettersExecutor;
import com.jdcloud.sdk.service.jcq.model.CreateTopicRequest;
import com.jdcloud.sdk.service.jcq.model.CreateTopicResponse;
import com.jdcloud.sdk.service.jcq.client.CreateTopicExecutor;
import com.jdcloud.sdk.service.jcq.model.ListDeadLettersRequest;
import com.jdcloud.sdk.service.jcq.model.ListDeadLettersResponse;
import com.jdcloud.sdk.service.jcq.client.ListDeadLettersExecutor;
import com.jdcloud.sdk.service.jcq.model.DescribeDeadLetterNumbersRequest;
import com.jdcloud.sdk.service.jcq.model.DescribeDeadLetterNumbersResponse;
import com.jdcloud.sdk.service.jcq.client.DescribeDeadLetterNumbersExecutor;
import com.jdcloud.sdk.service.jcq.model.CreateSubscriptionRequest;
import com.jdcloud.sdk.service.jcq.model.CreateSubscriptionResponse;
import com.jdcloud.sdk.service.jcq.client.CreateSubscriptionExecutor;
import com.jdcloud.sdk.service.jcq.model.CleanMessagesRequest;
import com.jdcloud.sdk.service.jcq.model.CleanMessagesResponse;
import com.jdcloud.sdk.service.jcq.client.CleanMessagesExecutor;
import com.jdcloud.sdk.service.jcq.model.DeleteTopicRequest;
import com.jdcloud.sdk.service.jcq.model.DeleteTopicResponse;
import com.jdcloud.sdk.service.jcq.client.DeleteTopicExecutor;
import com.jdcloud.sdk.service.jcq.model.ResendDeadLettersRequest;
import com.jdcloud.sdk.service.jcq.model.ResendDeadLettersResponse;
import com.jdcloud.sdk.service.jcq.client.ResendDeadLettersExecutor;
import com.jdcloud.sdk.service.jcq.model.DescribeConsumerGroupIdsRequest;
import com.jdcloud.sdk.service.jcq.model.DescribeConsumerGroupIdsResponse;
import com.jdcloud.sdk.service.jcq.client.DescribeConsumerGroupIdsExecutor;
import com.jdcloud.sdk.service.jcq.model.DescribeAccessPointRequest;
import com.jdcloud.sdk.service.jcq.model.DescribeAccessPointResponse;
import com.jdcloud.sdk.service.jcq.client.DescribeAccessPointExecutor;
import com.jdcloud.sdk.service.jcq.model.AddPermissionRequest;
import com.jdcloud.sdk.service.jcq.model.AddPermissionResponse;
import com.jdcloud.sdk.service.jcq.client.AddPermissionExecutor;
import com.jdcloud.sdk.service.jcq.model.DescribeSubscriptionRequest;
import com.jdcloud.sdk.service.jcq.model.DescribeSubscriptionResponse;
import com.jdcloud.sdk.service.jcq.client.DescribeSubscriptionExecutor;
import com.jdcloud.sdk.service.jcq.model.DescribeTopicRequest;
import com.jdcloud.sdk.service.jcq.model.DescribeTopicResponse;
import com.jdcloud.sdk.service.jcq.client.DescribeTopicExecutor;
import com.jdcloud.sdk.service.jcq.model.DescribeMessagesRequest;
import com.jdcloud.sdk.service.jcq.model.DescribeMessagesResponse;
import com.jdcloud.sdk.service.jcq.client.DescribeMessagesExecutor;
import com.jdcloud.sdk.service.jcq.model.DescribeTopicsRequest;
import com.jdcloud.sdk.service.jcq.model.DescribeTopicsResponse;
import com.jdcloud.sdk.service.jcq.client.DescribeTopicsExecutor;
import com.jdcloud.sdk.service.jcq.model.DescribeSubscriptionsRequest;
import com.jdcloud.sdk.service.jcq.model.DescribeSubscriptionsResponse;
import com.jdcloud.sdk.service.jcq.client.DescribeSubscriptionsExecutor;
import com.jdcloud.sdk.service.jcq.model.DescribeMessageRequest;
import com.jdcloud.sdk.service.jcq.model.DescribeMessageResponse;
import com.jdcloud.sdk.service.jcq.client.DescribeMessageExecutor;
import com.jdcloud.sdk.service.jcq.model.DescribePermissionRequest;
import com.jdcloud.sdk.service.jcq.model.DescribePermissionResponse;
import com.jdcloud.sdk.service.jcq.client.DescribePermissionExecutor;
import com.jdcloud.sdk.service.jcq.model.DescribeDeadLetterNumbersWithTopicRequest;
import com.jdcloud.sdk.service.jcq.model.DescribeDeadLetterNumbersWithTopicResponse;
import com.jdcloud.sdk.service.jcq.client.DescribeDeadLetterNumbersWithTopicExecutor;
import com.jdcloud.sdk.service.jcq.model.DeleteSubscriptionRequest;
import com.jdcloud.sdk.service.jcq.model.DeleteSubscriptionResponse;
import com.jdcloud.sdk.service.jcq.client.DeleteSubscriptionExecutor;

/**
 * jcqClient
 */
public class JcqClient extends JdcloudClient {

    public final static String ApiVersion = "v1";
    private final static String UserAgentPrefix = "JdcloudSdkJava";
    public final static String ClientVersion = "1.0.9";
    public final static String DefaultEndpoint = "jcq.jdcloud-api.com";
    public final static String ServiceName = "jcq";
    public final static String UserAgent = UserAgentPrefix + "/" + ClientVersion + " " + ServiceName + "/" + ApiVersion;

    CredentialsProvider credentialsProvider;
    HttpRequestConfig httpRequestConfig;
    Environment environment = new Environment.Builder().endpoint(DefaultEndpoint).build();

    public CredentialsProvider getCredentialsProvider() {
        return credentialsProvider;
    }

    public HttpRequestConfig getHttpRequestConfig() {
        return httpRequestConfig;
    }

    public Environment getEnvironment() {
        return environment;
    }

    public String getUserAgent() {
        return UserAgent;
    }

    public String getServiceName() {
        return ServiceName;
    }

    public String getVersion() {
        return ApiVersion;
    }

    private JcqClient() {

    }

    public static Builder builder() {
        return new DefaultBuilder();
    }


    /**
     * 删除当前topic对目标用户授权的权限
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public RemovePermissionResponse removePermission(RemovePermissionRequest request) throws JdcloudSdkException {
        return new RemovePermissionExecutor().client(this).execute(request);
    }

    /**
     * 重置消费位
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ResetConsumeOffsetResponse resetConsumeOffset(ResetConsumeOffsetRequest request) throws JdcloudSdkException {
        return new ResetConsumeOffsetExecutor().client(this).execute(request);
    }

    /**
     * 删除死信消息
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteDeadLettersResponse deleteDeadLetters(DeleteDeadLettersRequest request) throws JdcloudSdkException {
        return new DeleteDeadLettersExecutor().client(this).execute(request);
    }

    /**
     * 创建一个指定名称的topic
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreateTopicResponse createTopic(CreateTopicRequest request) throws JdcloudSdkException {
        return new CreateTopicExecutor().client(this).execute(request);
    }

    /**
     * 死信队列列表
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ListDeadLettersResponse listDeadLetters(ListDeadLettersRequest request) throws JdcloudSdkException {
        return new ListDeadLettersExecutor().client(this).execute(request);
    }

    /**
     * 死信消息数(按照用户或者consumerGroupId)
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeDeadLetterNumbersResponse describeDeadLetterNumbers(DescribeDeadLetterNumbersRequest request) throws JdcloudSdkException {
        return new DescribeDeadLetterNumbersExecutor().client(this).execute(request);
    }

    /**
     * 创建订阅
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreateSubscriptionResponse createSubscription(CreateSubscriptionRequest request) throws JdcloudSdkException {
        return new CreateSubscriptionExecutor().client(this).execute(request);
    }

    /**
     * 清除消息
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CleanMessagesResponse cleanMessages(CleanMessagesRequest request) throws JdcloudSdkException {
        return new CleanMessagesExecutor().client(this).execute(request);
    }

    /**
     * 删除单个topic
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteTopicResponse deleteTopic(DeleteTopicRequest request) throws JdcloudSdkException {
        return new DeleteTopicExecutor().client(this).execute(request);
    }

    /**
     * 重发死信消息
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ResendDeadLettersResponse resendDeadLetters(ResendDeadLettersRequest request) throws JdcloudSdkException {
        return new ResendDeadLettersExecutor().client(this).execute(request);
    }

    /**
     * consumerGroupId列表
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeConsumerGroupIdsResponse describeConsumerGroupIds(DescribeConsumerGroupIdsRequest request) throws JdcloudSdkException {
        return new DescribeConsumerGroupIdsExecutor().client(this).execute(request);
    }

    /**
     * 查看接入点接口
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeAccessPointResponse describeAccessPoint(DescribeAccessPointRequest request) throws JdcloudSdkException {
        return new DescribeAccessPointExecutor().client(this).execute(request);
    }

    /**
     * 对当前topic授予目标用户特定权限
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public AddPermissionResponse addPermission(AddPermissionRequest request) throws JdcloudSdkException {
        return new AddPermissionExecutor().client(this).execute(request);
    }

    /**
     * 查询订阅详情
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeSubscriptionResponse describeSubscription(DescribeSubscriptionRequest request) throws JdcloudSdkException {
        return new DescribeSubscriptionExecutor().client(this).execute(request);
    }

    /**
     * 查询topic详情
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeTopicResponse describeTopic(DescribeTopicRequest request) throws JdcloudSdkException {
        return new DescribeTopicExecutor().client(this).execute(request);
    }

    /**
     * 消息列表
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeMessagesResponse describeMessages(DescribeMessagesRequest request) throws JdcloudSdkException {
        return new DescribeMessagesExecutor().client(this).execute(request);
    }

    /**
     * 查询topic列表
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeTopicsResponse describeTopics(DescribeTopicsRequest request) throws JdcloudSdkException {
        return new DescribeTopicsExecutor().client(this).execute(request);
    }

    /**
     * 订阅列表
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeSubscriptionsResponse describeSubscriptions(DescribeSubscriptionsRequest request) throws JdcloudSdkException {
        return new DescribeSubscriptionsExecutor().client(this).execute(request);
    }

    /**
     * 查询message详情
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeMessageResponse describeMessage(DescribeMessageRequest request) throws JdcloudSdkException {
        return new DescribeMessageExecutor().client(this).execute(request);
    }

    /**
     * 查看当前topic授予了哪些用户哪些权限
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribePermissionResponse describePermission(DescribePermissionRequest request) throws JdcloudSdkException {
        return new DescribePermissionExecutor().client(this).execute(request);
    }

    /**
     * 死信消息数
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeDeadLetterNumbersWithTopicResponse describeDeadLetterNumbersWithTopic(DescribeDeadLetterNumbersWithTopicRequest request) throws JdcloudSdkException {
        return new DescribeDeadLetterNumbersWithTopicExecutor().client(this).execute(request);
    }

    /**
     * 删除订阅
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteSubscriptionResponse deleteSubscription(DeleteSubscriptionRequest request) throws JdcloudSdkException {
        return new DeleteSubscriptionExecutor().client(this).execute(request);
    }


    public interface Builder {
        public Builder credentialsProvider(CredentialsProvider provider);
        public Builder environment(Environment environment);
        public Builder httpRequestConfig(HttpRequestConfig config);
        public JcqClient build() throws JdcloudSdkException;
    }

    private static class DefaultBuilder implements Builder {

        private JcqClient jcqClient;

        public DefaultBuilder() {
            jcqClient = new JcqClient();
        }

        public DefaultBuilder credentialsProvider(CredentialsProvider provider) {
            jcqClient.credentialsProvider = provider;
            return this;
        }

        public DefaultBuilder httpRequestConfig(HttpRequestConfig config) {
            jcqClient.httpRequestConfig = config;
            return this;
        }

        public JcqClient build() throws JdcloudSdkException {

            if (jcqClient.credentialsProvider == null) {
                //if credentialsProvider not set, try load jdcloud global default  credentials provider
                jcqClient.credentialsProvider = Jdcloud.defaultInstance().getCredentialsProvider();
                if (jcqClient.credentialsProvider == null) {
                    throw new JdcloudValidateException("JcqClient build error: jdcloud credentials provider not set");
                }
            }
            if (jcqClient.httpRequestConfig == null) {
                jcqClient.httpRequestConfig = Jdcloud.defaultInstance().getHttpRequestConfig();
                if (jcqClient.httpRequestConfig == null) {
                    throw new JdcloudValidateException("JcqClient build error: http request config not set");
                }
            }
            return jcqClient;
        }

        public Builder environment(Environment environment) {
            jcqClient.environment = environment;
            return this;
        }
    }
}
