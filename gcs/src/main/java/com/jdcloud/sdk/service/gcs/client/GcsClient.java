/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * GPU算力服务
 * GPU算力服务相关接口
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.gcs.client;

import com.jdcloud.sdk.JdcloudSdkException;
import com.jdcloud.sdk.auth.CredentialsProvider;
import com.jdcloud.sdk.client.Environment;
import com.jdcloud.sdk.client.Jdcloud;
import com.jdcloud.sdk.client.JdcloudClient;
import com.jdcloud.sdk.client.JdcloudValidateException;
import com.jdcloud.sdk.http.HttpRequestConfig;
import com.jdcloud.sdk.service.gcs.model.ModifyInstanceSpecRequest;
import com.jdcloud.sdk.service.gcs.model.ModifyInstanceSpecResponse;
import com.jdcloud.sdk.service.gcs.client.ModifyInstanceSpecExecutor;
import com.jdcloud.sdk.service.gcs.model.ModifyInstanceImageRequest;
import com.jdcloud.sdk.service.gcs.model.ModifyInstanceImageResponse;
import com.jdcloud.sdk.service.gcs.client.ModifyInstanceImageExecutor;
import com.jdcloud.sdk.service.gcs.model.DescribeInstanceRequest;
import com.jdcloud.sdk.service.gcs.model.DescribeInstanceResponse;
import com.jdcloud.sdk.service.gcs.client.DescribeInstanceExecutor;
import com.jdcloud.sdk.service.gcs.model.StopInstanceTimerCancleRequest;
import com.jdcloud.sdk.service.gcs.model.StopInstanceTimerCancleResponse;
import com.jdcloud.sdk.service.gcs.client.StopInstanceTimerCancleExecutor;
import com.jdcloud.sdk.service.gcs.model.DescribeOrderInfosRequest;
import com.jdcloud.sdk.service.gcs.model.DescribeOrderInfosResponse;
import com.jdcloud.sdk.service.gcs.client.DescribeOrderInfosExecutor;
import com.jdcloud.sdk.service.gcs.model.DescribeRegionsRequest;
import com.jdcloud.sdk.service.gcs.model.DescribeRegionsResponse;
import com.jdcloud.sdk.service.gcs.client.DescribeRegionsExecutor;
import com.jdcloud.sdk.service.gcs.model.CreateInstancesRequest;
import com.jdcloud.sdk.service.gcs.model.CreateInstancesResponse;
import com.jdcloud.sdk.service.gcs.client.CreateInstancesExecutor;
import com.jdcloud.sdk.service.gcs.model.ModifyNetDiskRequest;
import com.jdcloud.sdk.service.gcs.model.ModifyNetDiskResponse;
import com.jdcloud.sdk.service.gcs.client.ModifyNetDiskExecutor;
import com.jdcloud.sdk.service.gcs.model.StopInstanceRequest;
import com.jdcloud.sdk.service.gcs.model.StopInstanceResponse;
import com.jdcloud.sdk.service.gcs.client.StopInstanceExecutor;
import com.jdcloud.sdk.service.gcs.model.DescribeInstancesRequest;
import com.jdcloud.sdk.service.gcs.model.DescribeInstancesResponse;
import com.jdcloud.sdk.service.gcs.client.DescribeInstancesExecutor;
import com.jdcloud.sdk.service.gcs.model.ModifyInstanceRequest;
import com.jdcloud.sdk.service.gcs.model.ModifyInstanceResponse;
import com.jdcloud.sdk.service.gcs.client.ModifyInstanceExecutor;
import com.jdcloud.sdk.service.gcs.model.StartInstanceRequest;
import com.jdcloud.sdk.service.gcs.model.StartInstanceResponse;
import com.jdcloud.sdk.service.gcs.client.StartInstanceExecutor;
import com.jdcloud.sdk.service.gcs.model.ModifyInstanceSecretRequest;
import com.jdcloud.sdk.service.gcs.model.ModifyInstanceSecretResponse;
import com.jdcloud.sdk.service.gcs.client.ModifyInstanceSecretExecutor;
import com.jdcloud.sdk.service.gcs.model.DeleteInstanceRequest;
import com.jdcloud.sdk.service.gcs.model.DeleteInstanceResponse;
import com.jdcloud.sdk.service.gcs.client.DeleteInstanceExecutor;
import com.jdcloud.sdk.service.gcs.model.DescribeStockRequest;
import com.jdcloud.sdk.service.gcs.model.DescribeStockResponse;
import com.jdcloud.sdk.service.gcs.client.DescribeStockExecutor;
import com.jdcloud.sdk.service.gcs.model.DescribeArtsRequest;
import com.jdcloud.sdk.service.gcs.model.DescribeArtsResponse;
import com.jdcloud.sdk.service.gcs.client.DescribeArtsExecutor;
import com.jdcloud.sdk.service.gcs.model.StopInstanceTimerRequest;
import com.jdcloud.sdk.service.gcs.model.StopInstanceTimerResponse;
import com.jdcloud.sdk.service.gcs.client.StopInstanceTimerExecutor;
import com.jdcloud.sdk.service.gcs.model.DescribeArtRequest;
import com.jdcloud.sdk.service.gcs.model.DescribeArtResponse;
import com.jdcloud.sdk.service.gcs.client.DescribeArtExecutor;
import com.jdcloud.sdk.service.gcs.model.DescribeNetDiskRequest;
import com.jdcloud.sdk.service.gcs.model.DescribeNetDiskResponse;
import com.jdcloud.sdk.service.gcs.client.DescribeNetDiskExecutor;

/**
 * gcsClient
 */
public class GcsClient extends JdcloudClient {

    public final static String ApiVersion = "v1";
    private final static String UserAgentPrefix = "JdcloudSdkJava";
    public final static String ClientVersion = "1.2.11";
    public final static String DefaultEndpoint = "gcs.jdcloud-api.com";
    public final static String ServiceName = "gcs";
    public final static String UserAgent = UserAgentPrefix + "/" + ClientVersion + " " + ServiceName + "/" + ApiVersion;

    CredentialsProvider credentialsProvider;
    HttpRequestConfig httpRequestConfig;
    Environment environment = new Environment.Builder().endpoint(DefaultEndpoint).build();

    public CredentialsProvider getCredentialsProvider() {
        return credentialsProvider;
    }

    public HttpRequestConfig getHttpRequestConfig() {
        return httpRequestConfig;
    }

    public Environment getEnvironment() {
        return environment;
    }

    public String getUserAgent() {
        return UserAgent;
    }

    public String getServiceName() {
        return ServiceName;
    }

    public String getVersion() {
        return ApiVersion;
    }

    private GcsClient() {

    }

    public static Builder builder() {
        return new DefaultBuilder();
    }


    /**
     * 实例规格升降配，即：无卡开机/有卡开机
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ModifyInstanceSpecResponse modifyInstanceSpec(ModifyInstanceSpecRequest request) throws JdcloudSdkException {
        return new ModifyInstanceSpecExecutor().client(this).execute(request);
    }

    /**
     * 实例重置镜像
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ModifyInstanceImageResponse modifyInstanceImage(ModifyInstanceImageRequest request) throws JdcloudSdkException {
        return new ModifyInstanceImageExecutor().client(this).execute(request);
    }

    /**
     * 查询GPU容器实例详情
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeInstanceResponse describeInstance(DescribeInstanceRequest request) throws JdcloudSdkException {
        return new DescribeInstanceExecutor().client(this).execute(request);
    }

    /**
     * 取消定时关机
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public StopInstanceTimerCancleResponse stopInstanceTimerCancle(StopInstanceTimerCancleRequest request) throws JdcloudSdkException {
        return new StopInstanceTimerCancleExecutor().client(this).execute(request);
    }

    /**
     * 返回订单列表不分页
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeOrderInfosResponse describeOrderInfos(DescribeOrderInfosRequest request) throws JdcloudSdkException {
        return new DescribeOrderInfosExecutor().client(this).execute(request);
    }

    /**
     * 查询GPU算力服务地域列表
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeRegionsResponse describeRegions(DescribeRegionsRequest request) throws JdcloudSdkException {
        return new DescribeRegionsExecutor().client(this).execute(request);
    }

    /**
     * 创建多个GPU容器实例
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreateInstancesResponse createInstances(CreateInstancesRequest request) throws JdcloudSdkException {
        return new CreateInstancesExecutor().client(this).execute(request);
    }

    /**
     * 修改网盘，当前仅支持开通网盘
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ModifyNetDiskResponse modifyNetDisk(ModifyNetDiskRequest request) throws JdcloudSdkException {
        return new ModifyNetDiskExecutor().client(this).execute(request);
    }

    /**
     * 资源到期或续费后，处理停机、重启
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public StopInstanceResponse stopInstance(StopInstanceRequest request) throws JdcloudSdkException {
        return new StopInstanceExecutor().client(this).execute(request);
    }

    /**
     * 查询GPU容器实例列表
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeInstancesResponse describeInstances(DescribeInstancesRequest request) throws JdcloudSdkException {
        return new DescribeInstancesExecutor().client(this).execute(request);
    }

    /**
     * 修改实例名称
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ModifyInstanceResponse modifyInstance(ModifyInstanceRequest request) throws JdcloudSdkException {
        return new ModifyInstanceExecutor().client(this).execute(request);
    }

    /**
     * 资源到期或续费后，处理停机、重启
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public StartInstanceResponse startInstance(StartInstanceRequest request) throws JdcloudSdkException {
        return new StartInstanceExecutor().client(this).execute(request);
    }

    /**
     * 修改密码
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ModifyInstanceSecretResponse modifyInstanceSecret(ModifyInstanceSecretRequest request) throws JdcloudSdkException {
        return new ModifyInstanceSecretExecutor().client(this).execute(request);
    }

    /**
     * 彻底删除一个GPU容器实例，包含其相关的一切资源配置信息
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteInstanceResponse deleteInstance(DeleteInstanceRequest request) throws JdcloudSdkException {
        return new DeleteInstanceExecutor().client(this).execute(request);
    }

    /**
     * 查询SKU可用库存数量
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeStockResponse describeStock(DescribeStockRequest request) throws JdcloudSdkException {
        return new DescribeStockExecutor().client(this).execute(request);
    }

    /**
     * 查询作品列表
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeArtsResponse describeArts(DescribeArtsRequest request) throws JdcloudSdkException {
        return new DescribeArtsExecutor().client(this).execute(request);
    }

    /**
     * 定时关机
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public StopInstanceTimerResponse stopInstanceTimer(StopInstanceTimerRequest request) throws JdcloudSdkException {
        return new StopInstanceTimerExecutor().client(this).execute(request);
    }

    /**
     * 查询作品详细信息
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeArtResponse describeArt(DescribeArtRequest request) throws JdcloudSdkException {
        return new DescribeArtExecutor().client(this).execute(request);
    }

    /**
     * 查询网盘信息
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeNetDiskResponse describeNetDisk(DescribeNetDiskRequest request) throws JdcloudSdkException {
        return new DescribeNetDiskExecutor().client(this).execute(request);
    }


    public interface Builder {
        public Builder credentialsProvider(CredentialsProvider provider);
        public Builder environment(Environment environment);
        public Builder httpRequestConfig(HttpRequestConfig config);
        public GcsClient build() throws JdcloudSdkException;
    }

    private static class DefaultBuilder implements Builder {

        private GcsClient gcsClient;

        public DefaultBuilder() {
            gcsClient = new GcsClient();
        }

        public DefaultBuilder credentialsProvider(CredentialsProvider provider) {
            gcsClient.credentialsProvider = provider;
            return this;
        }

        public DefaultBuilder httpRequestConfig(HttpRequestConfig config) {
            gcsClient.httpRequestConfig = config;
            return this;
        }

        public GcsClient build() throws JdcloudSdkException {

            if (gcsClient.credentialsProvider == null) {
                //if credentialsProvider not set, try load jdcloud global default  credentials provider
                gcsClient.credentialsProvider = Jdcloud.defaultInstance().getCredentialsProvider();
                if (gcsClient.credentialsProvider == null) {
                    throw new JdcloudValidateException("GcsClient build error: jdcloud credentials provider not set");
                }
            }
            if (gcsClient.httpRequestConfig == null) {
                gcsClient.httpRequestConfig = Jdcloud.defaultInstance().getHttpRequestConfig();
                if (gcsClient.httpRequestConfig == null) {
                    throw new JdcloudValidateException("GcsClient build error: http request config not set");
                }
            }
            return gcsClient;
        }

        public Builder environment(Environment environment) {
            gcsClient.environment = environment;
            return this;
        }
    }
}
