/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Instance-Management
 * 实例管理相关接口
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.tidb.model;

import java.util.List;
import java.util.ArrayList;
import com.jdcloud.sdk.service.tidb.model.ArchitectureVersion;
import com.jdcloud.sdk.service.JdcloudResult;

/**
 * 查询 TiDB支持的基本信息。
 */
public class DescribeAvailableDBInfoInternelResult extends JdcloudResult implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * engineVersion
     */
    
    private List<String> engineVersion;
    /**
     * architectureType
     */
    
    private List<String> architectureType;
    /**
     * architectureVersion
     */
    
    private List<ArchitectureVersion> architectureVersion;


    /**
    * get engineVersion
    *
    * @return
    */
    public List<String> getEngineVersion() {
        return engineVersion;
    }

    /**
    * set engineVersion
    *
    * @param engineVersion
    */
    public void setEngineVersion(List<String> engineVersion) {
        this.engineVersion = engineVersion;
    }


    /**
    * get architectureType
    *
    * @return
    */
    public List<String> getArchitectureType() {
        return architectureType;
    }

    /**
    * set architectureType
    *
    * @param architectureType
    */
    public void setArchitectureType(List<String> architectureType) {
        this.architectureType = architectureType;
    }


    /**
    * get architectureVersion
    *
    * @return
    */
    public List<ArchitectureVersion> getArchitectureVersion() {
        return architectureVersion;
    }

    /**
    * set architectureVersion
    *
    * @param architectureVersion
    */
    public void setArchitectureVersion(List<ArchitectureVersion> architectureVersion) {
        this.architectureVersion = architectureVersion;
    }



    /**
    * set engineVersion
    *
    * @param engineVersion
    */
    public DescribeAvailableDBInfoInternelResult engineVersion(List<String> engineVersion) {
        this.engineVersion = engineVersion;
        return this;
    }


    /**
    * set architectureType
    *
    * @param architectureType
    */
    public DescribeAvailableDBInfoInternelResult architectureType(List<String> architectureType) {
        this.architectureType = architectureType;
        return this;
    }


    /**
    * set architectureVersion
    *
    * @param architectureVersion
    */
    public DescribeAvailableDBInfoInternelResult architectureVersion(List<ArchitectureVersion> architectureVersion) {
        this.architectureVersion = architectureVersion;
        return this;
    }



    /**
     * add item to engineVersion
     *
     * @param engineVersion
     */
    public void addEngineVersion(String engineVersion) {
        if (this.engineVersion == null) {
            this.engineVersion = new ArrayList<>();
        }
        this.engineVersion.add(engineVersion);
    }

    /**
     * add item to architectureType
     *
     * @param architectureType
     */
    public void addArchitectureType(String architectureType) {
        if (this.architectureType == null) {
            this.architectureType = new ArrayList<>();
        }
        this.architectureType.add(architectureType);
    }

    /**
     * add item to architectureVersion
     *
     * @param architectureVersion
     */
    public void addArchitectureVersion(ArchitectureVersion architectureVersion) {
        if (this.architectureVersion == null) {
            this.architectureVersion = new ArrayList<>();
        }
        this.architectureVersion.add(architectureVersion);
    }
}