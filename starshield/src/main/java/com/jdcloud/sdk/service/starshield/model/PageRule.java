/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * 
 *
 * 
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.starshield.model;

import java.util.List;
import java.util.ArrayList;

/**
 * pageRule
 */
public class PageRule  implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * API item identifier tag
     */
    private String id;

    /**
     * Targets to evaluate on a request
     */
    private List<Target> targets;

    /**
     * The set of actions to perform if the targets of this rule match the request. Actions can redirect the url to another url or override settings (but not both)

     */
    private List<Action> actions;

    /**
     * A number that indicates the preference for a page rule over another.
In the case where you may have a catch-all page rule (e.g., #1.. &#39;/images/&#39;)
but want a rule that is more specific to take precedence (e.g., #2.. &#39;/images/special/&#39;),
you&#39;ll want to specify a higher priority on the latter (#2) so it will override the first.

     */
    private Integer priority;

    /**
     * Status of the page rule
     */
    private String status;

    /**
     * When the page rule was last modified
     */
    private String modified_on;

    /**
     * When the page rule was created
     */
    private String created_on;


    /**
     * get API item identifier tag
     *
     * @return
     */
    public String getId() {
        return id;
    }

    /**
     * set API item identifier tag
     *
     * @param id
     */
    public void setId(String id) {
        this.id = id;
    }

    /**
     * get Targets to evaluate on a request
     *
     * @return
     */
    public List<Target> getTargets() {
        return targets;
    }

    /**
     * set Targets to evaluate on a request
     *
     * @param targets
     */
    public void setTargets(List<Target> targets) {
        this.targets = targets;
    }

    /**
     * get The set of actions to perform if the targets of this rule match the request. Actions can redirect the url to another url or override settings (but not both)

     *
     * @return
     */
    public List<Action> getActions() {
        return actions;
    }

    /**
     * set The set of actions to perform if the targets of this rule match the request. Actions can redirect the url to another url or override settings (but not both)

     *
     * @param actions
     */
    public void setActions(List<Action> actions) {
        this.actions = actions;
    }

    /**
     * get A number that indicates the preference for a page rule over another.
In the case where you may have a catch-all page rule (e.g., #1.. &#39;/images/&#39;)
but want a rule that is more specific to take precedence (e.g., #2.. &#39;/images/special/&#39;),
you&#39;ll want to specify a higher priority on the latter (#2) so it will override the first.

     *
     * @return
     */
    public Integer getPriority() {
        return priority;
    }

    /**
     * set A number that indicates the preference for a page rule over another.
In the case where you may have a catch-all page rule (e.g., #1.. &#39;/images/&#39;)
but want a rule that is more specific to take precedence (e.g., #2.. &#39;/images/special/&#39;),
you&#39;ll want to specify a higher priority on the latter (#2) so it will override the first.

     *
     * @param priority
     */
    public void setPriority(Integer priority) {
        this.priority = priority;
    }

    /**
     * get Status of the page rule
     *
     * @return
     */
    public String getStatus() {
        return status;
    }

    /**
     * set Status of the page rule
     *
     * @param status
     */
    public void setStatus(String status) {
        this.status = status;
    }

    /**
     * get When the page rule was last modified
     *
     * @return
     */
    public String getModified_on() {
        return modified_on;
    }

    /**
     * set When the page rule was last modified
     *
     * @param modified_on
     */
    public void setModified_on(String modified_on) {
        this.modified_on = modified_on;
    }

    /**
     * get When the page rule was created
     *
     * @return
     */
    public String getCreated_on() {
        return created_on;
    }

    /**
     * set When the page rule was created
     *
     * @param created_on
     */
    public void setCreated_on(String created_on) {
        this.created_on = created_on;
    }


    /**
     * set API item identifier tag
     *
     * @param id
     */
    public PageRule id(String id) {
        this.id = id;
        return this;
    }

    /**
     * set Targets to evaluate on a request
     *
     * @param targets
     */
    public PageRule targets(List<Target> targets) {
        this.targets = targets;
        return this;
    }

    /**
     * set The set of actions to perform if the targets of this rule match the request. Actions can redirect the url to another url or override settings (but not both)

     *
     * @param actions
     */
    public PageRule actions(List<Action> actions) {
        this.actions = actions;
        return this;
    }

    /**
     * set A number that indicates the preference for a page rule over another.
In the case where you may have a catch-all page rule (e.g., #1.. &#39;/images/&#39;)
but want a rule that is more specific to take precedence (e.g., #2.. &#39;/images/special/&#39;),
you&#39;ll want to specify a higher priority on the latter (#2) so it will override the first.

     *
     * @param priority
     */
    public PageRule priority(Integer priority) {
        this.priority = priority;
        return this;
    }

    /**
     * set Status of the page rule
     *
     * @param status
     */
    public PageRule status(String status) {
        this.status = status;
        return this;
    }

    /**
     * set When the page rule was last modified
     *
     * @param modified_on
     */
    public PageRule modified_on(String modified_on) {
        this.modified_on = modified_on;
        return this;
    }

    /**
     * set When the page rule was created
     *
     * @param created_on
     */
    public PageRule created_on(String created_on) {
        this.created_on = created_on;
        return this;
    }


    /**
     * add item to Targets to evaluate on a request
     *
     * @param target
     */
    public void addTarget(Target target) {
        if (this.targets == null) {
            this.targets = new ArrayList<>();
        }
        this.targets.add(target);
    }

    /**
     * add item to The set of actions to perform if the targets of this rule match the request. Actions can redirect the url to another url or override settings (but not both)

     *
     * @param action
     */
    public void addAction(Action action) {
        if (this.actions == null) {
            this.actions = new ArrayList<>();
        }
        this.actions.add(action);
    }

}