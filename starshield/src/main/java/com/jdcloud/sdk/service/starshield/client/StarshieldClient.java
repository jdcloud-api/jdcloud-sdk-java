/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 星盾安全加速API接口
 * 星盾安全加速API接口
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.starshield.client;

import com.jdcloud.sdk.JdcloudSdkException;
import com.jdcloud.sdk.auth.CredentialsProvider;
import com.jdcloud.sdk.client.Environment;
import com.jdcloud.sdk.client.Jdcloud;
import com.jdcloud.sdk.client.JdcloudClient;
import com.jdcloud.sdk.client.JdcloudValidateException;
import com.jdcloud.sdk.http.HttpRequestConfig;
import com.jdcloud.sdk.service.starshield.model.GetPolishSettingRequest;
import com.jdcloud.sdk.service.starshield.model.GetPolishSettingResponse;
import com.jdcloud.sdk.service.starshield.client.GetPolishSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.GetDevelopmentModeSettingRequest;
import com.jdcloud.sdk.service.starshield.model.GetDevelopmentModeSettingResponse;
import com.jdcloud.sdk.service.starshield.client.GetDevelopmentModeSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.GetWebSocketsSettingRequest;
import com.jdcloud.sdk.service.starshield.model.GetWebSocketsSettingResponse;
import com.jdcloud.sdk.service.starshield.client.GetWebSocketsSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.ChangeEnableErrorPagesOnSettingRequest;
import com.jdcloud.sdk.service.starshield.model.ChangeEnableErrorPagesOnSettingResponse;
import com.jdcloud.sdk.service.starshield.client.ChangeEnableErrorPagesOnSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.EditZoneSettingsInfoRequest;
import com.jdcloud.sdk.service.starshield.model.EditZoneSettingsInfoResponse;
import com.jdcloud.sdk.service.starshield.client.EditZoneSettingsInfoExecutor;
import com.jdcloud.sdk.service.starshield.model.ChangeHotlinkProtectionSettingRequest;
import com.jdcloud.sdk.service.starshield.model.ChangeHotlinkProtectionSettingResponse;
import com.jdcloud.sdk.service.starshield.client.ChangeHotlinkProtectionSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.CreateInstanceRequest;
import com.jdcloud.sdk.service.starshield.model.CreateInstanceResponse;
import com.jdcloud.sdk.service.starshield.client.CreateInstanceExecutor;
import com.jdcloud.sdk.service.starshield.model.GetMinifySettingRequest;
import com.jdcloud.sdk.service.starshield.model.GetMinifySettingResponse;
import com.jdcloud.sdk.service.starshield.client.GetMinifySettingExecutor;
import com.jdcloud.sdk.service.starshield.model.ChangeEnableQueryStringSortSettingRequest;
import com.jdcloud.sdk.service.starshield.model.ChangeEnableQueryStringSortSettingResponse;
import com.jdcloud.sdk.service.starshield.client.ChangeEnableQueryStringSortSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.GetBrowserCheckSettingRequest;
import com.jdcloud.sdk.service.starshield.model.GetBrowserCheckSettingResponse;
import com.jdcloud.sdk.service.starshield.client.GetBrowserCheckSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.ListCertificatePacksRequest;
import com.jdcloud.sdk.service.starshield.model.ListCertificatePacksResponse;
import com.jdcloud.sdk.service.starshield.client.ListCertificatePacksExecutor;
import com.jdcloud.sdk.service.starshield.model.GetBrowserCacheTTLSettingRequest;
import com.jdcloud.sdk.service.starshield.model.GetBrowserCacheTTLSettingResponse;
import com.jdcloud.sdk.service.starshield.client.GetBrowserCacheTTLSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.DeleteZoneRequest;
import com.jdcloud.sdk.service.starshield.model.DeleteZoneResponse;
import com.jdcloud.sdk.service.starshield.client.DeleteZoneExecutor;
import com.jdcloud.sdk.service.starshield.model.GetPrefetchPreloadSettingRequest;
import com.jdcloud.sdk.service.starshield.model.GetPrefetchPreloadSettingResponse;
import com.jdcloud.sdk.service.starshield.client.GetPrefetchPreloadSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.CreateFiltersRequest;
import com.jdcloud.sdk.service.starshield.model.CreateFiltersResponse;
import com.jdcloud.sdk.service.starshield.client.CreateFiltersExecutor;
import com.jdcloud.sdk.service.starshield.model.GetImageResizingSettingRequest;
import com.jdcloud.sdk.service.starshield.model.GetImageResizingSettingResponse;
import com.jdcloud.sdk.service.starshield.client.GetImageResizingSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.ChangeDevelopmentModeSettingRequest;
import com.jdcloud.sdk.service.starshield.model.ChangeDevelopmentModeSettingResponse;
import com.jdcloud.sdk.service.starshield.client.ChangeDevelopmentModeSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.ChangeCacheLevelSettingRequest;
import com.jdcloud.sdk.service.starshield.model.ChangeCacheLevelSettingResponse;
import com.jdcloud.sdk.service.starshield.client.ChangeCacheLevelSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.GetAlwaysOnlineSettingRequest;
import com.jdcloud.sdk.service.starshield.model.GetAlwaysOnlineSettingResponse;
import com.jdcloud.sdk.service.starshield.client.GetAlwaysOnlineSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.UpdateIndividualFilterRequest;
import com.jdcloud.sdk.service.starshield.model.UpdateIndividualFilterResponse;
import com.jdcloud.sdk.service.starshield.client.UpdateIndividualFilterExecutor;
import com.jdcloud.sdk.service.starshield.model.ChangeOpportunisticEncryptionSettingRequest;
import com.jdcloud.sdk.service.starshield.model.ChangeOpportunisticEncryptionSettingResponse;
import com.jdcloud.sdk.service.starshield.client.ChangeOpportunisticEncryptionSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.GetWebApplicationFirewallWAFSettingRequest;
import com.jdcloud.sdk.service.starshield.model.GetWebApplicationFirewallWAFSettingResponse;
import com.jdcloud.sdk.service.starshield.client.GetWebApplicationFirewallWAFSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.PurgeFilesByURLRequest;
import com.jdcloud.sdk.service.starshield.model.PurgeFilesByURLResponse;
import com.jdcloud.sdk.service.starshield.client.PurgeFilesByURLExecutor;
import com.jdcloud.sdk.service.starshield.model.GetHTTP2EdgePrioritizationSettingRequest;
import com.jdcloud.sdk.service.starshield.model.GetHTTP2EdgePrioritizationSettingResponse;
import com.jdcloud.sdk.service.starshield.client.GetHTTP2EdgePrioritizationSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.ModifyInstanceRequest;
import com.jdcloud.sdk.service.starshield.model.ModifyInstanceResponse;
import com.jdcloud.sdk.service.starshield.client.ModifyInstanceExecutor;
import com.jdcloud.sdk.service.starshield.model.ListSSLConfigurationsRequest;
import com.jdcloud.sdk.service.starshield.model.ListSSLConfigurationsResponse;
import com.jdcloud.sdk.service.starshield.client.ListSSLConfigurationsExecutor;
import com.jdcloud.sdk.service.starshield.model.ListZonesRequest;
import com.jdcloud.sdk.service.starshield.model.ListZonesResponse;
import com.jdcloud.sdk.service.starshield.client.ListZonesExecutor;
import com.jdcloud.sdk.service.starshield.model.ChangeMinifySettingRequest;
import com.jdcloud.sdk.service.starshield.model.ChangeMinifySettingResponse;
import com.jdcloud.sdk.service.starshield.client.ChangeMinifySettingExecutor;
import com.jdcloud.sdk.service.starshield.model.CheckInstancesNameRequest;
import com.jdcloud.sdk.service.starshield.model.CheckInstancesNameResponse;
import com.jdcloud.sdk.service.starshield.client.CheckInstancesNameExecutor;
import com.jdcloud.sdk.service.starshield.model.ChangeChallengeTTLSettingRequest;
import com.jdcloud.sdk.service.starshield.model.ChangeChallengeTTLSettingResponse;
import com.jdcloud.sdk.service.starshield.client.ChangeChallengeTTLSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.ChangeBrowserCacheTTLSettingRequest;
import com.jdcloud.sdk.service.starshield.model.ChangeBrowserCacheTTLSettingResponse;
import com.jdcloud.sdk.service.starshield.client.ChangeBrowserCacheTTLSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.ChangePrefetchPreloadSettingRequest;
import com.jdcloud.sdk.service.starshield.model.ChangePrefetchPreloadSettingResponse;
import com.jdcloud.sdk.service.starshield.client.ChangePrefetchPreloadSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.ListFirewallPackagesRequest;
import com.jdcloud.sdk.service.starshield.model.ListFirewallPackagesResponse;
import com.jdcloud.sdk.service.starshield.client.ListFirewallPackagesExecutor;
import com.jdcloud.sdk.service.starshield.model.ChangeAlwaysUseHTTPSSettingRequest;
import com.jdcloud.sdk.service.starshield.model.ChangeAlwaysUseHTTPSSettingResponse;
import com.jdcloud.sdk.service.starshield.client.ChangeAlwaysUseHTTPSSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.GetAutomaticHTTPSRewritesSettingRequest;
import com.jdcloud.sdk.service.starshield.model.GetAutomaticHTTPSRewritesSettingResponse;
import com.jdcloud.sdk.service.starshield.client.GetAutomaticHTTPSRewritesSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.GetAdvancedDDOSSettingRequest;
import com.jdcloud.sdk.service.starshield.model.GetAdvancedDDOSSettingResponse;
import com.jdcloud.sdk.service.starshield.client.GetAdvancedDDOSSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.CreateFlowPackRequest;
import com.jdcloud.sdk.service.starshield.model.CreateFlowPackResponse;
import com.jdcloud.sdk.service.starshield.client.CreateFlowPackExecutor;
import com.jdcloud.sdk.service.starshield.model.GetZoneEnableTLS1_3SettingRequest;
import com.jdcloud.sdk.service.starshield.model.GetZoneEnableTLS1_3SettingResponse;
import com.jdcloud.sdk.service.starshield.client.GetZoneEnableTLS1_3SettingExecutor;
import com.jdcloud.sdk.service.starshield.model.DescribeBotStatusRequest;
import com.jdcloud.sdk.service.starshield.model.DescribeBotStatusResponse;
import com.jdcloud.sdk.service.starshield.client.DescribeBotStatusExecutor;
import com.jdcloud.sdk.service.starshield.model.ChangeMaxUploadSettingRequest;
import com.jdcloud.sdk.service.starshield.model.ChangeMaxUploadSettingResponse;
import com.jdcloud.sdk.service.starshield.client.ChangeMaxUploadSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.GetMinimumTLSVersionSettingRequest;
import com.jdcloud.sdk.service.starshield.model.GetMinimumTLSVersionSettingResponse;
import com.jdcloud.sdk.service.starshield.client.GetMinimumTLSVersionSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.GetAllZoneSettingsRequest;
import com.jdcloud.sdk.service.starshield.model.GetAllZoneSettingsResponse;
import com.jdcloud.sdk.service.starshield.client.GetAllZoneSettingsExecutor;
import com.jdcloud.sdk.service.starshield.model.GetTLSClientAuthSettingRequest;
import com.jdcloud.sdk.service.starshield.model.GetTLSClientAuthSettingResponse;
import com.jdcloud.sdk.service.starshield.client.GetTLSClientAuthSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.ChangeHTTP2EdgePrioritizationSettingRequest;
import com.jdcloud.sdk.service.starshield.model.ChangeHTTP2EdgePrioritizationSettingResponse;
import com.jdcloud.sdk.service.starshield.client.ChangeHTTP2EdgePrioritizationSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.ListOfFirewallRulesRequest;
import com.jdcloud.sdk.service.starshield.model.ListOfFirewallRulesResponse;
import com.jdcloud.sdk.service.starshield.client.ListOfFirewallRulesExecutor;
import com.jdcloud.sdk.service.starshield.model.GetOpportunisticEncryptionSettingRequest;
import com.jdcloud.sdk.service.starshield.model.GetOpportunisticEncryptionSettingResponse;
import com.jdcloud.sdk.service.starshield.client.GetOpportunisticEncryptionSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.ChangeMinimumTLSVersionSettingRequest;
import com.jdcloud.sdk.service.starshield.model.ChangeMinimumTLSVersionSettingResponse;
import com.jdcloud.sdk.service.starshield.client.ChangeMinimumTLSVersionSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.UpdateCustomPageURLRequest;
import com.jdcloud.sdk.service.starshield.model.UpdateCustomPageURLResponse;
import com.jdcloud.sdk.service.starshield.client.UpdateCustomPageURLExecutor;
import com.jdcloud.sdk.service.starshield.model.ListPageRulesRequest;
import com.jdcloud.sdk.service.starshield.model.ListPageRulesResponse;
import com.jdcloud.sdk.service.starshield.client.ListPageRulesExecutor;
import com.jdcloud.sdk.service.starshield.model.ChangeHTTP2SettingRequest;
import com.jdcloud.sdk.service.starshield.model.ChangeHTTP2SettingResponse;
import com.jdcloud.sdk.service.starshield.client.ChangeHTTP2SettingExecutor;
import com.jdcloud.sdk.service.starshield.model.ChangeAlwaysOnlineSettingRequest;
import com.jdcloud.sdk.service.starshield.model.ChangeAlwaysOnlineSettingResponse;
import com.jdcloud.sdk.service.starshield.client.ChangeAlwaysOnlineSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.ChangeIPv6SettingRequest;
import com.jdcloud.sdk.service.starshield.model.ChangeIPv6SettingResponse;
import com.jdcloud.sdk.service.starshield.client.ChangeIPv6SettingExecutor;
import com.jdcloud.sdk.service.starshield.model.CreateZoneRequest;
import com.jdcloud.sdk.service.starshield.model.CreateZoneResponse;
import com.jdcloud.sdk.service.starshield.client.CreateZoneExecutor;
import com.jdcloud.sdk.service.starshield.model.GetSecurityLevelSettingRequest;
import com.jdcloud.sdk.service.starshield.model.GetSecurityLevelSettingResponse;
import com.jdcloud.sdk.service.starshield.client.GetSecurityLevelSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.ListAvailablePageRuleSettingRequest;
import com.jdcloud.sdk.service.starshield.model.ListAvailablePageRuleSettingResponse;
import com.jdcloud.sdk.service.starshield.client.ListAvailablePageRuleSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.ChangeRocketLoaderSettingRequest;
import com.jdcloud.sdk.service.starshield.model.ChangeRocketLoaderSettingResponse;
import com.jdcloud.sdk.service.starshield.client.ChangeRocketLoaderSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.GetPseudoIPv4SettingRequest;
import com.jdcloud.sdk.service.starshield.model.GetPseudoIPv4SettingResponse;
import com.jdcloud.sdk.service.starshield.client.GetPseudoIPv4SettingExecutor;
import com.jdcloud.sdk.service.starshield.model.ListAvailableCustomPagesRequest;
import com.jdcloud.sdk.service.starshield.model.ListAvailableCustomPagesResponse;
import com.jdcloud.sdk.service.starshield.client.ListAvailableCustomPagesExecutor;
import com.jdcloud.sdk.service.starshield.model.ChangeWebSocketsSettingRequest;
import com.jdcloud.sdk.service.starshield.model.ChangeWebSocketsSettingResponse;
import com.jdcloud.sdk.service.starshield.client.ChangeWebSocketsSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.ChangeTLSClientAuthSettingRequest;
import com.jdcloud.sdk.service.starshield.model.ChangeTLSClientAuthSettingResponse;
import com.jdcloud.sdk.service.starshield.client.ChangeTLSClientAuthSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.GetEnableErrorPagesOnSettingRequest;
import com.jdcloud.sdk.service.starshield.model.GetEnableErrorPagesOnSettingResponse;
import com.jdcloud.sdk.service.starshield.client.GetEnableErrorPagesOnSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.ChangeSecurityLevelSettingRequest;
import com.jdcloud.sdk.service.starshield.model.ChangeSecurityLevelSettingResponse;
import com.jdcloud.sdk.service.starshield.client.ChangeSecurityLevelSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.CreateSSLConfigurationRequest;
import com.jdcloud.sdk.service.starshield.model.CreateSSLConfigurationResponse;
import com.jdcloud.sdk.service.starshield.client.CreateSSLConfigurationExecutor;
import com.jdcloud.sdk.service.starshield.model.GetSecurityHeaderHSTSSettingRequest;
import com.jdcloud.sdk.service.starshield.model.GetSecurityHeaderHSTSSettingResponse;
import com.jdcloud.sdk.service.starshield.client.GetSecurityHeaderHSTSSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.UniversalSSLSettingsDetailsRequest;
import com.jdcloud.sdk.service.starshield.model.UniversalSSLSettingsDetailsResponse;
import com.jdcloud.sdk.service.starshield.client.UniversalSSLSettingsDetailsExecutor;
import com.jdcloud.sdk.service.starshield.model.GetEmailObfuscationSettingRequest;
import com.jdcloud.sdk.service.starshield.model.GetEmailObfuscationSettingResponse;
import com.jdcloud.sdk.service.starshield.client.GetEmailObfuscationSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.ChangeTrueClientIPSettingRequest;
import com.jdcloud.sdk.service.starshield.model.ChangeTrueClientIPSettingResponse;
import com.jdcloud.sdk.service.starshield.client.ChangeTrueClientIPSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.ChangeMobileRedirectSettingRequest;
import com.jdcloud.sdk.service.starshield.model.ChangeMobileRedirectSettingResponse;
import com.jdcloud.sdk.service.starshield.client.ChangeMobileRedirectSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.GetEnableQueryStringSortSettingRequest;
import com.jdcloud.sdk.service.starshield.model.GetEnableQueryStringSortSettingResponse;
import com.jdcloud.sdk.service.starshield.client.GetEnableQueryStringSortSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.GetIPv6SettingRequest;
import com.jdcloud.sdk.service.starshield.model.GetIPv6SettingResponse;
import com.jdcloud.sdk.service.starshield.client.GetIPv6SettingExecutor;
import com.jdcloud.sdk.service.starshield.model.OrderAdvancedCertificateManagerCertificatePackRequest;
import com.jdcloud.sdk.service.starshield.model.OrderAdvancedCertificateManagerCertificatePackResponse;
import com.jdcloud.sdk.service.starshield.client.OrderAdvancedCertificateManagerCertificatePackExecutor;
import com.jdcloud.sdk.service.starshield.model.ChangeMirageSettingRequest;
import com.jdcloud.sdk.service.starshield.model.ChangeMirageSettingResponse;
import com.jdcloud.sdk.service.starshield.client.ChangeMirageSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.DeleteAdvancedCertificateManagerCertificatePackRequest;
import com.jdcloud.sdk.service.starshield.model.DeleteAdvancedCertificateManagerCertificatePackResponse;
import com.jdcloud.sdk.service.starshield.client.DeleteAdvancedCertificateManagerCertificatePackExecutor;
import com.jdcloud.sdk.service.starshield.model.EditUniversalSSLSettingsRequest;
import com.jdcloud.sdk.service.starshield.model.EditUniversalSSLSettingsResponse;
import com.jdcloud.sdk.service.starshield.client.EditUniversalSSLSettingsExecutor;
import com.jdcloud.sdk.service.starshield.model.GetSSLSettingRequest;
import com.jdcloud.sdk.service.starshield.model.GetSSLSettingResponse;
import com.jdcloud.sdk.service.starshield.client.GetSSLSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.GetRocketLoaderSettingRequest;
import com.jdcloud.sdk.service.starshield.model.GetRocketLoaderSettingResponse;
import com.jdcloud.sdk.service.starshield.client.GetRocketLoaderSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.DeletePageRuleRequest;
import com.jdcloud.sdk.service.starshield.model.DeletePageRuleResponse;
import com.jdcloud.sdk.service.starshield.client.DeletePageRuleExecutor;
import com.jdcloud.sdk.service.starshield.model.ChangeBrotliSettingRequest;
import com.jdcloud.sdk.service.starshield.model.ChangeBrotliSettingResponse;
import com.jdcloud.sdk.service.starshield.client.ChangeBrotliSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.ChangeIPGeolocationSettingRequest;
import com.jdcloud.sdk.service.starshield.model.ChangeIPGeolocationSettingResponse;
import com.jdcloud.sdk.service.starshield.client.ChangeIPGeolocationSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.ChangePrivacyPassSettingRequest;
import com.jdcloud.sdk.service.starshield.model.ChangePrivacyPassSettingResponse;
import com.jdcloud.sdk.service.starshield.client.ChangePrivacyPassSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.GetPrivacyPassSettingRequest;
import com.jdcloud.sdk.service.starshield.model.GetPrivacyPassSettingResponse;
import com.jdcloud.sdk.service.starshield.client.GetPrivacyPassSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.CreateFirewallRulesRequest;
import com.jdcloud.sdk.service.starshield.model.CreateFirewallRulesResponse;
import com.jdcloud.sdk.service.starshield.client.CreateFirewallRulesExecutor;
import com.jdcloud.sdk.service.starshield.model.ChangeTLS1_3SettingRequest;
import com.jdcloud.sdk.service.starshield.model.ChangeTLS1_3SettingResponse;
import com.jdcloud.sdk.service.starshield.client.ChangeTLS1_3SettingExecutor;
import com.jdcloud.sdk.service.starshield.model.ChangeAutomaticHTTPSRewritesSettingRequest;
import com.jdcloud.sdk.service.starshield.model.ChangeAutomaticHTTPSRewritesSettingResponse;
import com.jdcloud.sdk.service.starshield.client.ChangeAutomaticHTTPSRewritesSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.DeleteIndividualFirewallRulesRequest;
import com.jdcloud.sdk.service.starshield.model.DeleteIndividualFirewallRulesResponse;
import com.jdcloud.sdk.service.starshield.client.DeleteIndividualFirewallRulesExecutor;
import com.jdcloud.sdk.service.starshield.model.GetServerSideExcludeSettingRequest;
import com.jdcloud.sdk.service.starshield.model.GetServerSideExcludeSettingResponse;
import com.jdcloud.sdk.service.starshield.client.GetServerSideExcludeSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.Change0_RTTSessionResumptionSettingRequest;
import com.jdcloud.sdk.service.starshield.model.Change0_RTTSessionResumptionSettingResponse;
import com.jdcloud.sdk.service.starshield.client.Change0_RTTSessionResumptionSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.GetAlwaysUseHTTPSSettingRequest;
import com.jdcloud.sdk.service.starshield.model.GetAlwaysUseHTTPSSettingResponse;
import com.jdcloud.sdk.service.starshield.client.GetAlwaysUseHTTPSSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.DescribePackageRequest;
import com.jdcloud.sdk.service.starshield.model.DescribePackageResponse;
import com.jdcloud.sdk.service.starshield.client.DescribePackageExecutor;
import com.jdcloud.sdk.service.starshield.model.CreatePageRuleRequest;
import com.jdcloud.sdk.service.starshield.model.CreatePageRuleResponse;
import com.jdcloud.sdk.service.starshield.client.CreatePageRuleExecutor;
import com.jdcloud.sdk.service.starshield.model.ChangeSSLSettingRequest;
import com.jdcloud.sdk.service.starshield.model.ChangeSSLSettingResponse;
import com.jdcloud.sdk.service.starshield.client.ChangeSSLSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.ListDNSRecordsRequest;
import com.jdcloud.sdk.service.starshield.model.ListDNSRecordsResponse;
import com.jdcloud.sdk.service.starshield.client.ListDNSRecordsExecutor;
import com.jdcloud.sdk.service.starshield.model.DescribeInstancesRequest;
import com.jdcloud.sdk.service.starshield.model.DescribeInstancesResponse;
import com.jdcloud.sdk.service.starshield.client.DescribeInstancesExecutor;
import com.jdcloud.sdk.service.starshield.model.GetHTTP2SettingRequest;
import com.jdcloud.sdk.service.starshield.model.GetHTTP2SettingResponse;
import com.jdcloud.sdk.service.starshield.client.GetHTTP2SettingExecutor;
import com.jdcloud.sdk.service.starshield.model.GetChallengeTTLSettingRequest;
import com.jdcloud.sdk.service.starshield.model.GetChallengeTTLSettingResponse;
import com.jdcloud.sdk.service.starshield.client.GetChallengeTTLSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.OpenFirewallBotRequest;
import com.jdcloud.sdk.service.starshield.model.OpenFirewallBotResponse;
import com.jdcloud.sdk.service.starshield.client.OpenFirewallBotExecutor;
import com.jdcloud.sdk.service.starshield.model.GetIPGeolocationSettingRequest;
import com.jdcloud.sdk.service.starshield.model.GetIPGeolocationSettingResponse;
import com.jdcloud.sdk.service.starshield.client.GetIPGeolocationSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.UpdateDNSRecordRequest;
import com.jdcloud.sdk.service.starshield.model.UpdateDNSRecordResponse;
import com.jdcloud.sdk.service.starshield.client.UpdateDNSRecordExecutor;
import com.jdcloud.sdk.service.starshield.model.Get0_RTTSessionResumptionSettingRequest;
import com.jdcloud.sdk.service.starshield.model.Get0_RTTSessionResumptionSettingResponse;
import com.jdcloud.sdk.service.starshield.client.Get0_RTTSessionResumptionSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.ChangeServerSideExcludeSettingRequest;
import com.jdcloud.sdk.service.starshield.model.ChangeServerSideExcludeSettingResponse;
import com.jdcloud.sdk.service.starshield.client.ChangeServerSideExcludeSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.EditFirewallPackageRequest;
import com.jdcloud.sdk.service.starshield.model.EditFirewallPackageResponse;
import com.jdcloud.sdk.service.starshield.client.EditFirewallPackageExecutor;
import com.jdcloud.sdk.service.starshield.model.PurgeFilesByCache_TagsAndHostOrPrefixRequest;
import com.jdcloud.sdk.service.starshield.model.PurgeFilesByCache_TagsAndHostOrPrefixResponse;
import com.jdcloud.sdk.service.starshield.client.PurgeFilesByCache_TagsAndHostOrPrefixExecutor;
import com.jdcloud.sdk.service.starshield.model.SelectDetailListRequest;
import com.jdcloud.sdk.service.starshield.model.SelectDetailListResponse;
import com.jdcloud.sdk.service.starshield.client.SelectDetailListExecutor;
import com.jdcloud.sdk.service.starshield.model.PurgeAllFilesRequest;
import com.jdcloud.sdk.service.starshield.model.PurgeAllFilesResponse;
import com.jdcloud.sdk.service.starshield.client.PurgeAllFilesExecutor;
import com.jdcloud.sdk.service.starshield.model.ChangeHTTP3SettingRequest;
import com.jdcloud.sdk.service.starshield.model.ChangeHTTP3SettingResponse;
import com.jdcloud.sdk.service.starshield.client.ChangeHTTP3SettingExecutor;
import com.jdcloud.sdk.service.starshield.model.ChangeBrowserCheckSettingRequest;
import com.jdcloud.sdk.service.starshield.model.ChangeBrowserCheckSettingResponse;
import com.jdcloud.sdk.service.starshield.client.ChangeBrowserCheckSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.DeleteDNSRecordRequest;
import com.jdcloud.sdk.service.starshield.model.DeleteDNSRecordResponse;
import com.jdcloud.sdk.service.starshield.client.DeleteDNSRecordExecutor;
import com.jdcloud.sdk.service.starshield.model.DescribePackagesRequest;
import com.jdcloud.sdk.service.starshield.model.DescribePackagesResponse;
import com.jdcloud.sdk.service.starshield.client.DescribePackagesExecutor;
import com.jdcloud.sdk.service.starshield.model.ChangePseudoIPv4SettingRequest;
import com.jdcloud.sdk.service.starshield.model.ChangePseudoIPv4SettingResponse;
import com.jdcloud.sdk.service.starshield.client.ChangePseudoIPv4SettingExecutor;
import com.jdcloud.sdk.service.starshield.model.GetTrueClientIPSettingRequest;
import com.jdcloud.sdk.service.starshield.model.GetTrueClientIPSettingResponse;
import com.jdcloud.sdk.service.starshield.client.GetTrueClientIPSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.GetMobileRedirectSettingRequest;
import com.jdcloud.sdk.service.starshield.model.GetMobileRedirectSettingResponse;
import com.jdcloud.sdk.service.starshield.client.GetMobileRedirectSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.ChangePolishSettingRequest;
import com.jdcloud.sdk.service.starshield.model.ChangePolishSettingResponse;
import com.jdcloud.sdk.service.starshield.client.ChangePolishSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.ChangeEmailObfuscationSettingRequest;
import com.jdcloud.sdk.service.starshield.model.ChangeEmailObfuscationSettingResponse;
import com.jdcloud.sdk.service.starshield.client.ChangeEmailObfuscationSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.UpdateIndividualFirewallRuleRequest;
import com.jdcloud.sdk.service.starshield.model.UpdateIndividualFirewallRuleResponse;
import com.jdcloud.sdk.service.starshield.client.UpdateIndividualFirewallRuleExecutor;
import com.jdcloud.sdk.service.starshield.model.FirewallPackageDetailsRequest;
import com.jdcloud.sdk.service.starshield.model.FirewallPackageDetailsResponse;
import com.jdcloud.sdk.service.starshield.client.FirewallPackageDetailsExecutor;
import com.jdcloud.sdk.service.starshield.model.GetMirageSettingRequest;
import com.jdcloud.sdk.service.starshield.model.GetMirageSettingResponse;
import com.jdcloud.sdk.service.starshield.client.GetMirageSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.UpdatePageRuleRequest;
import com.jdcloud.sdk.service.starshield.model.UpdatePageRuleResponse;
import com.jdcloud.sdk.service.starshield.client.UpdatePageRuleExecutor;
import com.jdcloud.sdk.service.starshield.model.EditRuleGroupRequest;
import com.jdcloud.sdk.service.starshield.model.EditRuleGroupResponse;
import com.jdcloud.sdk.service.starshield.client.EditRuleGroupExecutor;
import com.jdcloud.sdk.service.starshield.model.GetCiphersSettingRequest;
import com.jdcloud.sdk.service.starshield.model.GetCiphersSettingResponse;
import com.jdcloud.sdk.service.starshield.client.GetCiphersSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.ChangeCiphersSettingRequest;
import com.jdcloud.sdk.service.starshield.model.ChangeCiphersSettingResponse;
import com.jdcloud.sdk.service.starshield.client.ChangeCiphersSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.GetWebPSettingRequest;
import com.jdcloud.sdk.service.starshield.model.GetWebPSettingResponse;
import com.jdcloud.sdk.service.starshield.client.GetWebPSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.ChangeWebPSettingRequest;
import com.jdcloud.sdk.service.starshield.model.ChangeWebPSettingResponse;
import com.jdcloud.sdk.service.starshield.client.ChangeWebPSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.GetHotlinkProtectionSettingRequest;
import com.jdcloud.sdk.service.starshield.model.GetHotlinkProtectionSettingResponse;
import com.jdcloud.sdk.service.starshield.client.GetHotlinkProtectionSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.ChangeWebApplicationFirewallWAFSettingRequest;
import com.jdcloud.sdk.service.starshield.model.ChangeWebApplicationFirewallWAFSettingResponse;
import com.jdcloud.sdk.service.starshield.client.ChangeWebApplicationFirewallWAFSettingExecutor;
import com.jdcloud.sdk.service.starshield.model.DeleteSSLConfigurationRequest;
import com.jdcloud.sdk.service.starshield.model.DeleteSSLConfigurationResponse;
import com.jdcloud.sdk.service.starshield.client.DeleteSSLConfigurationExecutor;
import com.jdcloud.sdk.service.starshield.model.RuleGroupDetailsRequest;
import com.jdcloud.sdk.service.starshield.model.RuleGroupDetailsResponse;
import com.jdcloud.sdk.service.starshield.client.RuleGroupDetailsExecutor;
import com.jdcloud.sdk.service.starshield.model.ListRulesRequest;
import com.jdcloud.sdk.service.starshield.model.ListRulesResponse;
import com.jdcloud.sdk.service.starshield.client.ListRulesExecutor;
import com.jdcloud.sdk.service.starshield.model.ListRuleGroupsRequest;
import com.jdcloud.sdk.service.starshield.model.ListRuleGroupsResponse;
import com.jdcloud.sdk.service.starshield.client.ListRuleGroupsExecutor;
import com.jdcloud.sdk.service.starshield.model.CreateDNSRecordRequest;
import com.jdcloud.sdk.service.starshield.model.CreateDNSRecordResponse;
import com.jdcloud.sdk.service.starshield.client.CreateDNSRecordExecutor;
import com.jdcloud.sdk.service.starshield.model.GetHTTP3SettingRequest;
import com.jdcloud.sdk.service.starshield.model.GetHTTP3SettingResponse;
import com.jdcloud.sdk.service.starshield.client.GetHTTP3SettingExecutor;

/**
 * starshieldClient
 */
public class StarshieldClient extends JdcloudClient {

    public final static String ApiVersion = "v1";
    private final static String UserAgentPrefix = "JdcloudSdkJava";
    public final static String ClientVersion = "1.2.4";
    public final static String DefaultEndpoint = "starshield.jdcloud-api.com";
    public final static String ServiceName = "starshield";
    public final static String UserAgent = UserAgentPrefix + "/" + ClientVersion + " " + ServiceName + "/" + ApiVersion;

    CredentialsProvider credentialsProvider;
    HttpRequestConfig httpRequestConfig;
    Environment environment = new Environment.Builder().endpoint(DefaultEndpoint).build();

    public CredentialsProvider getCredentialsProvider() {
        return credentialsProvider;
    }

    public HttpRequestConfig getHttpRequestConfig() {
        return httpRequestConfig;
    }

    public Environment getEnvironment() {
        return environment;
    }

    public String getUserAgent() {
        return UserAgent;
    }

    public String getServiceName() {
        return ServiceName;
    }

    public String getVersion() {
        return ApiVersion;
    }

    private StarshieldClient() {

    }

    public static Builder builder() {
        return new DefaultBuilder();
    }


    /**
     * 剥离元数据并压缩你的图像，以加快页面加载时间。
Basic（无损），减少PNG、JPEG和GIF文件的大小 - 对视觉质量没有影响。
Basic+JPEG（有损），进一步减少JPEG文件的大小，以加快图像加载。
较大的JPEG文件被转换为渐进式图像，首先加载较低分辨率的图像，最后是较高的分辨率版本。
不建议用于高像素的摄影网站。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetPolishSettingResponse getPolishSetting(GetPolishSettingRequest request) throws JdcloudSdkException {
        return new GetPolishSettingExecutor().client(this).execute(request);
    }

    /**
     * 如果你需要对你的网站进行修改，开发模式可以让你暂时进入网站的开发模式。这将绕过星盾的加速缓存，并降低您的网站速度。
但如果您正在对可缓存的内容（如图片、css 或 JavaScript）进行更改，并希望立即看到这些更改，这时就很有用。一旦进入，开发模式将持续3小时，然后自动切换关闭。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetDevelopmentModeSettingResponse getDevelopmentModeSetting(GetDevelopmentModeSettingRequest request) throws JdcloudSdkException {
        return new GetDevelopmentModeSettingExecutor().client(this).execute(request);
    }

    /**
     * WebSockets是客户端和源服务器之间持续的开放连接。在WebSockets连接中，客户端和源服务器可以来回传递数据，而不需要重新建立会话。
这使得在WebSockets连接中的数据交换非常快。WebSockets经常被用于实时应用，如即时聊天和游戏。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetWebSocketsSettingResponse getWebSocketsSetting(GetWebSocketsSettingRequest request) throws JdcloudSdkException {
        return new GetWebSocketsSettingExecutor().client(this).execute(request);
    }

    /**
     * 星盾将代理源服务器上任何 502、504 错误的客户错误页面，而不是显示默认的星盾错误页面。这不适用于 522 错误，并且仅限于企业级域。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ChangeEnableErrorPagesOnSettingResponse changeEnableErrorPagesOnSetting(ChangeEnableErrorPagesOnSettingRequest request) throws JdcloudSdkException {
        return new ChangeEnableErrorPagesOnSettingExecutor().client(this).execute(request);
    }

    /**
     * 批量更新域的设置
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public EditZoneSettingsInfoResponse editZoneSettingsInfo(EditZoneSettingsInfoRequest request) throws JdcloudSdkException {
        return new EditZoneSettingsInfoExecutor().client(this).execute(request);
    }

    /**
     * 启用后，热链路保护选项可确保其他网站无法通过建立使用您网站上托管的图像的页面来占用您的带宽。只要您的网站上的图像请求被星盾选中，我们就会检查以确保这不是其他网站在请求它们。
人们仍然能够从你的网页上下载和查看图像，但其他网站将无法窃取它们用于自己的网页。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ChangeHotlinkProtectionSettingResponse changeHotlinkProtectionSetting(ChangeHotlinkProtectionSettingRequest request) throws JdcloudSdkException {
        return new ChangeHotlinkProtectionSettingExecutor().client(this).execute(request);
    }

    /**
     * 创建套餐实例
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreateInstanceResponse createInstance(CreateInstanceRequest request) throws JdcloudSdkException {
        return new CreateInstanceExecutor().client(this).execute(request);
    }

    /**
     * 获取你的网站自动最小化资产的配置
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetMinifySettingResponse getMinifySetting(GetMinifySettingRequest request) throws JdcloudSdkException {
        return new GetMinifySettingExecutor().client(this).execute(request);
    }

    /**
     * 星盾将把具有相同查询字符串的文件视为缓存中的同一个文件，而不管查询字符串的顺序如何。这只限于企业级域。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ChangeEnableQueryStringSortSettingResponse changeEnableQueryStringSortSetting(ChangeEnableQueryStringSortSettingRequest request) throws JdcloudSdkException {
        return new ChangeEnableQueryStringSortSettingExecutor().client(this).execute(request);
    }

    /**
     * 浏览器完整性检查与不良行为检查类似，寻找最常被垃圾邮件发送者滥用的常见HTTP头，并拒绝他们访问您的页面。它还会对没有用户代理或非标准用户代理（也是滥用机器人、爬虫或访客常用的）的访客提出挑战质询。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetBrowserCheckSettingResponse getBrowserCheckSetting(GetBrowserCheckSettingRequest request) throws JdcloudSdkException {
        return new GetBrowserCheckSettingExecutor().client(this).execute(request);
    }

    /**
     * 对于给定域，列出所有激活的证书包
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ListCertificatePacksResponse listCertificatePacks(ListCertificatePacksRequest request) throws JdcloudSdkException {
        return new ListCertificatePacksExecutor().client(this).execute(request);
    }

    /**
     * 浏览器缓存TTL（以秒为单位）指定星盾缓存资源将在访问者的计算机上保留多长时间。星盾将遵守服务器指定的任何更长时间。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetBrowserCacheTTLSettingResponse getBrowserCacheTTLSetting(GetBrowserCacheTTLSettingRequest request) throws JdcloudSdkException {
        return new GetBrowserCacheTTLSettingExecutor().client(this).execute(request);
    }

    /**
     * 删除存在的域名
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteZoneResponse deleteZone(DeleteZoneRequest request) throws JdcloudSdkException {
        return new DeleteZoneExecutor().client(this).execute(request);
    }

    /**
     * 星盾将预取包含在响应标头中的任何 URL。这只限于企业级域。
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetPrefetchPreloadSettingResponse getPrefetchPreloadSetting(GetPrefetchPreloadSettingRequest request) throws JdcloudSdkException {
        return new GetPrefetchPreloadSettingExecutor().client(this).execute(request);
    }

    /**
     * 创建新过滤器
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreateFiltersResponse createFilters(CreateFiltersRequest request) throws JdcloudSdkException {
        return new CreateFiltersExecutor().client(this).execute(request);
    }

    /**
     * 图像调整为通过星盾的网络提供的图像提供按需调整、转换和优化。
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetImageResizingSettingResponse getImageResizingSetting(GetImageResizingSettingRequest request) throws JdcloudSdkException {
        return new GetImageResizingSettingExecutor().client(this).execute(request);
    }

    /**
     * 如果你需要对你的网站进行修改，开发模式可以让你暂时进入网站的开发模式。这将绕过星盾的加速缓存，并降低您的网站速度。
但如果您正在对可缓存的内容（如图片、css 或 JavaScript）进行更改，并希望立即看到这些更改，这时就很有用。一旦进入，开发模式将持续3小时，然后自动切换关闭。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ChangeDevelopmentModeSettingResponse changeDevelopmentModeSetting(ChangeDevelopmentModeSettingRequest request) throws JdcloudSdkException {
        return new ChangeDevelopmentModeSettingExecutor().client(this).execute(request);
    }

    /**
     * 缓存级别的功能是基于设置的级别。
basic设置将缓存大多数静态资源（即css、图片和JavaScript）。
simplified设置将在提供缓存的资源时忽略查询字符串。
aggressive设置将缓存所有的静态资源，包括有查询字符串的资源。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ChangeCacheLevelSettingResponse changeCacheLevelSetting(ChangeCacheLevelSettingRequest request) throws JdcloudSdkException {
        return new ChangeCacheLevelSettingExecutor().client(this).execute(request);
    }

    /**
     * 获取当前Always Online的配置。当Always Online开启时，在你的源站离线期间，星盾会提供已缓存过的页面。
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetAlwaysOnlineSettingResponse getAlwaysOnlineSetting(GetAlwaysOnlineSettingRequest request) throws JdcloudSdkException {
        return new GetAlwaysOnlineSettingExecutor().client(this).execute(request);
    }

    /**
     * 更新一个现有的筛选器。
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public UpdateIndividualFilterResponse updateIndividualFilter(UpdateIndividualFilterRequest request) throws JdcloudSdkException {
        return new UpdateIndividualFilterExecutor().client(this).execute(request);
    }

    /**
     * 为当前域启用随机加密
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ChangeOpportunisticEncryptionSettingResponse changeOpportunisticEncryptionSetting(ChangeOpportunisticEncryptionSettingRequest request) throws JdcloudSdkException {
        return new ChangeOpportunisticEncryptionSettingExecutor().client(this).execute(request);
    }

    /**
     * WAF检查对您网站的HTTP请求。它检查GET和POST请求，并应用规则来帮助从合法的网站访问者中过滤出非法流量。星盾 WAF 检查网站地址或 URL 以检测任何不正常的东西。
如果星盾 WAF确定了可疑的用户行为。那么 WAF 将用一个页面 &quot;挑战 &quot;网络访客，要求他们成功提交验证码以继续其行动。
如果挑战失败，行动将被停止。这意味着 星盾 的 WAF 将在任何被识别为非法的流量到达您的源网络服务器之前将其阻止。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetWebApplicationFirewallWAFSettingResponse getWebApplicationFirewallWAFSetting(GetWebApplicationFirewallWAFSettingRequest request) throws JdcloudSdkException {
        return new GetWebApplicationFirewallWAFSettingExecutor().client(this).execute(request);
    }

    /**
     * 通过指定URL，从星盾的缓存中细化删除一个或多个文件。
要清除带有自定义缓存key的文件，请包括用于计算缓存key的报头。
例如要清除缓存key中含有${geo}或${devicetype}的文件，请包括CF-Device-Type或CF-IPCountry报头。
注意：当包含源报头时，请确保包括scheme协议和hostname主机名。如果是默认端口，可以省略端口号（http为80，https为443），否则必须包含端口号。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public PurgeFilesByURLResponse purgeFilesByURL(PurgeFilesByURLRequest request) throws JdcloudSdkException {
        return new PurgeFilesByURLExecutor().client(this).execute(request);
    }

    /**
     * HTTP/2边缘优化，优化了通过HTTP/2提供的资源交付，提高了页面加载性能。当与Worker结合使用时，它还支持对内容交付的精细控制。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetHTTP2EdgePrioritizationSettingResponse getHTTP2EdgePrioritizationSetting(GetHTTP2EdgePrioritizationSettingRequest request) throws JdcloudSdkException {
        return new GetHTTP2EdgePrioritizationSettingExecutor().client(this).execute(request);
    }

    /**
     * 升级套餐实例
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ModifyInstanceResponse modifyInstance(ModifyInstanceRequest request) throws JdcloudSdkException {
        return new ModifyInstanceExecutor().client(this).execute(request);
    }

    /**
     * 列出、搜索和筛选所有自定义SSL证书。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ListSSLConfigurationsResponse listSSLConfigurations(ListSSLConfigurationsRequest request) throws JdcloudSdkException {
        return new ListSSLConfigurationsExecutor().client(this).execute(request);
    }

    /**
     * 列出、搜索、排序和筛选您的域
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ListZonesResponse listZones(ListZonesRequest request) throws JdcloudSdkException {
        return new ListZonesExecutor().client(this).execute(request);
    }

    /**
     * 为你的网站自动最小化某些资产
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ChangeMinifySettingResponse changeMinifySetting(ChangeMinifySettingRequest request) throws JdcloudSdkException {
        return new ChangeMinifySettingExecutor().client(this).execute(request);
    }

    /**
     * 检查实例名称
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CheckInstancesNameResponse checkInstancesName(CheckInstancesNameRequest request) throws JdcloudSdkException {
        return new CheckInstancesNameExecutor().client(this).execute(request);
    }

    /**
     * 指定访问者在成功完成一项挑战（如验证码）后允许访问您的网站多长时间。在TTL过期后，访问者将不得不完成新的挑战。我们建议设置为15-45分钟，并将尝试遵守任何超过45分钟的设置。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ChangeChallengeTTLSettingResponse changeChallengeTTLSetting(ChangeChallengeTTLSettingRequest request) throws JdcloudSdkException {
        return new ChangeChallengeTTLSettingExecutor().client(this).execute(request);
    }

    /**
     * 浏览器缓存TTL（以秒为单位）指定星盾缓存资源将在访问者的计算机上保留多长时间。星盾将遵守服务器指定的任何更长时间。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ChangeBrowserCacheTTLSettingResponse changeBrowserCacheTTLSetting(ChangeBrowserCacheTTLSettingRequest request) throws JdcloudSdkException {
        return new ChangeBrowserCacheTTLSettingExecutor().client(this).execute(request);
    }

    /**
     * 星盾将预取包含在响应标头中的任何 URL。这只限于企业级域。
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ChangePrefetchPreloadSettingResponse changePrefetchPreloadSetting(ChangePrefetchPreloadSettingRequest request) throws JdcloudSdkException {
        return new ChangePrefetchPreloadSettingExecutor().client(this).execute(request);
    }

    /**
     * 检索域的防火墙包
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ListFirewallPackagesResponse listFirewallPackages(ListFirewallPackagesRequest request) throws JdcloudSdkException {
        return new ListFirewallPackagesExecutor().client(this).execute(request);
    }

    /**
     * 对所有使用&quot;http&quot;的URL的请求，用301重定向到相应的 &quot;https&quot; URL。如果你只想对一个子集的请求进行重定向，可以考虑创建一个&quot;Always use HTTPS&quot;的页面规则。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ChangeAlwaysUseHTTPSSettingResponse changeAlwaysUseHTTPSSetting(ChangeAlwaysUseHTTPSSettingRequest request) throws JdcloudSdkException {
        return new ChangeAlwaysUseHTTPSSettingExecutor().client(this).execute(request);
    }

    /**
     * 为该域启用自动HTTPS重写功能。
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetAutomaticHTTPSRewritesSettingResponse getAutomaticHTTPSRewritesSetting(GetAutomaticHTTPSRewritesSettingRequest request) throws JdcloudSdkException {
        return new GetAutomaticHTTPSRewritesSettingExecutor().client(this).execute(request);
    }

    /**
     * 对您的网站进行高级保护，防止分布式拒绝服务（DDoS）攻击。这是一个不可编辑的值。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetAdvancedDDOSSettingResponse getAdvancedDDOSSetting(GetAdvancedDDOSSettingRequest request) throws JdcloudSdkException {
        return new GetAdvancedDDOSSettingExecutor().client(this).execute(request);
    }

    /**
     * 购买流量包
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreateFlowPackResponse createFlowPack(CreateFlowPackRequest request) throws JdcloudSdkException {
        return new CreateFlowPackExecutor().client(this).execute(request);
    }

    /**
     * 为该域启用加密TLS 1.3功能。
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetZoneEnableTLS1_3SettingResponse getZoneEnableTLS1_3Setting(GetZoneEnableTLS1_3SettingRequest request) throws JdcloudSdkException {
        return new GetZoneEnableTLS1_3SettingExecutor().client(this).execute(request);
    }

    /**
     * 查询Bot开启状态
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeBotStatusResponse describeBotStatus(DescribeBotStatusRequest request) throws JdcloudSdkException {
        return new DescribeBotStatusExecutor().client(this).execute(request);
    }

    /**
     * 变更上传文件的最大值
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ChangeMaxUploadSettingResponse changeMaxUploadSetting(ChangeMaxUploadSettingRequest request) throws JdcloudSdkException {
        return new ChangeMaxUploadSettingExecutor().client(this).execute(request);
    }

    /**
     * 获取HTTPS请求允许使用的TLS协议的最低版本。例如，如果是TLS 1.1，那么TLS 1.0连接将被拒绝，而1.1、1.2和1.3（如果启用）将被允许。
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetMinimumTLSVersionSettingResponse getMinimumTLSVersionSetting(GetMinimumTLSVersionSettingRequest request) throws JdcloudSdkException {
        return new GetMinimumTLSVersionSettingExecutor().client(this).execute(request);
    }

    /**
     * 域的相关配置
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetAllZoneSettingsResponse getAllZoneSettings(GetAllZoneSettingsRequest request) throws JdcloudSdkException {
        return new GetAllZoneSettingsExecutor().client(this).execute(request);
    }

    /**
     * TLS 客户端授权要求星盾使用客户端证书连接到您的源服务器（Enterprise Only）。
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetTLSClientAuthSettingResponse getTLSClientAuthSetting(GetTLSClientAuthSettingRequest request) throws JdcloudSdkException {
        return new GetTLSClientAuthSettingExecutor().client(this).execute(request);
    }

    /**
     * HTTP/2边缘优化，优化了通过HTTP/2提供的资源交付，提高了页面加载性能。当与Worker结合使用时，它还支持对内容交付的精细控制。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ChangeHTTP2EdgePrioritizationSettingResponse changeHTTP2EdgePrioritizationSetting(ChangeHTTP2EdgePrioritizationSettingRequest request) throws JdcloudSdkException {
        return new ChangeHTTP2EdgePrioritizationSettingExecutor().client(this).execute(request);
    }

    /**
     * 列出当前定义的所有防火墙规则。
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ListOfFirewallRulesResponse listOfFirewallRules(ListOfFirewallRulesRequest request) throws JdcloudSdkException {
        return new ListOfFirewallRulesExecutor().client(this).execute(request);
    }

    /**
     * 获取当前域随机加密设置
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetOpportunisticEncryptionSettingResponse getOpportunisticEncryptionSetting(GetOpportunisticEncryptionSettingRequest request) throws JdcloudSdkException {
        return new GetOpportunisticEncryptionSettingExecutor().client(this).execute(request);
    }

    /**
     * 设置HTTPS请求使用的TLS协议的最低版本。例如，如果选择TLS 1.1，那么TLS 1.0连接将被拒绝，而1.1、1.2和1.3（如果启用）将被允许。
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ChangeMinimumTLSVersionSettingResponse changeMinimumTLSVersionSetting(ChangeMinimumTLSVersionSettingRequest request) throws JdcloudSdkException {
        return new ChangeMinimumTLSVersionSettingExecutor().client(this).execute(request);
    }

    /**
     * 更新自定义页面URL
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public UpdateCustomPageURLResponse updateCustomPageURL(UpdateCustomPageURLRequest request) throws JdcloudSdkException {
        return new UpdateCustomPageURLExecutor().client(this).execute(request);
    }

    /**
     * 
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ListPageRulesResponse listPageRules(ListPageRulesRequest request) throws JdcloudSdkException {
        return new ListPageRulesExecutor().client(this).execute(request);
    }

    /**
     * 开启/关闭HTTP2
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ChangeHTTP2SettingResponse changeHTTP2Setting(ChangeHTTP2SettingRequest request) throws JdcloudSdkException {
        return new ChangeHTTP2SettingExecutor().client(this).execute(request);
    }

    /**
     * 当开启时，在你的源站离线期间，星盾会提供已缓存过的页面。
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ChangeAlwaysOnlineSettingResponse changeAlwaysOnlineSetting(ChangeAlwaysOnlineSettingRequest request) throws JdcloudSdkException {
        return new ChangeAlwaysOnlineSettingExecutor().client(this).execute(request);
    }

    /**
     * 在所有启用星盾的子域上启用 IPv6。
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ChangeIPv6SettingResponse changeIPv6Setting(ChangeIPv6SettingRequest request) throws JdcloudSdkException {
        return new ChangeIPv6SettingExecutor().client(this).execute(request);
    }

    /**
     * 
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreateZoneResponse createZone(CreateZoneRequest request) throws JdcloudSdkException {
        return new CreateZoneExecutor().client(this).execute(request);
    }

    /**
     * 为你的网站选择适当的安全配置文件，这将自动调整每个安全设置。如果你选择定制一个单独的安全设置，该配置文件将成为自定义。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetSecurityLevelSettingResponse getSecurityLevelSetting(GetSecurityLevelSettingRequest request) throws JdcloudSdkException {
        return new GetSecurityLevelSettingExecutor().client(this).execute(request);
    }

    /**
     * 
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ListAvailablePageRuleSettingResponse listAvailablePageRuleSetting(ListAvailablePageRuleSettingRequest request) throws JdcloudSdkException {
        return new ListAvailablePageRuleSettingExecutor().client(this).execute(request);
    }

    /**
     * Rocket Loader是一个通用的异步JavaScript优化，它优先渲染你的内容同时异步加载你的网站的Javascript。
开启Rocket Loader将立即改善网页的渲染时间，有时以首次绘制时间（TTFP）以及window.onload时间（假设页面上有JavaScript）来衡量，这对你的搜索排名会产生积极影响。
当打开时，Rocket Loader将自动推迟加载你的HTML中引用的所有Javascript，而不需要配置。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ChangeRocketLoaderSettingResponse changeRocketLoaderSetting(ChangeRocketLoaderSettingRequest request) throws JdcloudSdkException {
        return new ChangeRocketLoaderSettingExecutor().client(this).execute(request);
    }

    /**
     * 获取Pseudo IPv4(IPv6到IPv4的转换服务)的设置
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetPseudoIPv4SettingResponse getPseudoIPv4Setting(GetPseudoIPv4SettingRequest request) throws JdcloudSdkException {
        return new GetPseudoIPv4SettingExecutor().client(this).execute(request);
    }

    /**
     * 域可以使用的可用自定义页面列表
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ListAvailableCustomPagesResponse listAvailableCustomPages(ListAvailableCustomPagesRequest request) throws JdcloudSdkException {
        return new ListAvailableCustomPagesExecutor().client(this).execute(request);
    }

    /**
     * WebSockets是客户端和源服务器之间持续的开放连接。在WebSockets连接中，客户端和源服务器可以来回传递数据，而不需要重新建立会话。
这使得在WebSockets连接中的数据交换非常快。WebSockets经常被用于实时应用，如即时聊天和游戏。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ChangeWebSocketsSettingResponse changeWebSocketsSetting(ChangeWebSocketsSettingRequest request) throws JdcloudSdkException {
        return new ChangeWebSocketsSettingExecutor().client(this).execute(request);
    }

    /**
     * TLS 客户端授权要求星盾使用客户端证书连接到您的源服务器（Enterprise Only）。
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ChangeTLSClientAuthSettingResponse changeTLSClientAuthSetting(ChangeTLSClientAuthSettingRequest request) throws JdcloudSdkException {
        return new ChangeTLSClientAuthSettingExecutor().client(this).execute(request);
    }

    /**
     * 星盾将代源服务器上任何 502、504 错误的客户错误页面，而不是显示默认的星盾错误页面。这不适用于 522 错误，并且仅限于企业级域。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetEnableErrorPagesOnSettingResponse getEnableErrorPagesOnSetting(GetEnableErrorPagesOnSettingRequest request) throws JdcloudSdkException {
        return new GetEnableErrorPagesOnSettingExecutor().client(this).execute(request);
    }

    /**
     * 为你的网站选择适当的安全配置文件，这将自动调整每个安全设置。如果你选择定制一个单独的安全设置，该配置文件将成为自定义。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ChangeSecurityLevelSettingResponse changeSecurityLevelSetting(ChangeSecurityLevelSettingRequest request) throws JdcloudSdkException {
        return new ChangeSecurityLevelSettingExecutor().client(this).execute(request);
    }

    /**
     * 上载域的新SSL证书
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreateSSLConfigurationResponse createSSLConfiguration(CreateSSLConfigurationRequest request) throws JdcloudSdkException {
        return new CreateSSLConfigurationExecutor().client(this).execute(request);
    }

    /**
     * 星盾域的安全标头。
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetSecurityHeaderHSTSSettingResponse getSecurityHeaderHSTSSetting(GetSecurityHeaderHSTSSettingRequest request) throws JdcloudSdkException {
        return new GetSecurityHeaderHSTSSettingExecutor().client(this).execute(request);
    }

    /**
     * 获取域的通用SSL证书设置
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public UniversalSSLSettingsDetailsResponse universalSSLSettingsDetails(UniversalSSLSettingsDetailsRequest request) throws JdcloudSdkException {
        return new UniversalSSLSettingsDetailsExecutor().client(this).execute(request);
    }

    /**
     * 在你的网页上对电子邮件地址进行加密，以防止机器人入侵，同时保持它们对人类可见。
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetEmailObfuscationSettingResponse getEmailObfuscationSetting(GetEmailObfuscationSettingRequest request) throws JdcloudSdkException {
        return new GetEmailObfuscationSettingExecutor().client(this).execute(request);
    }

    /**
     * 允许客户继续在我们发送给源的头中使用真正的客户IP。这只限于企业级域。
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ChangeTrueClientIPSettingResponse changeTrueClientIPSetting(ChangeTrueClientIPSettingRequest request) throws JdcloudSdkException {
        return new ChangeTrueClientIPSettingExecutor().client(this).execute(request);
    }

    /**
     * 自动将移动设备上的访问者重定向到一个移动优化的子域上
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ChangeMobileRedirectSettingResponse changeMobileRedirectSetting(ChangeMobileRedirectSettingRequest request) throws JdcloudSdkException {
        return new ChangeMobileRedirectSettingExecutor().client(this).execute(request);
    }

    /**
     * 星盾将把具有相同查询字符串的文件视为缓存中的同一个文件，而不管查询字符串的顺序如何。这只限于企业级域。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetEnableQueryStringSortSettingResponse getEnableQueryStringSortSetting(GetEnableQueryStringSortSettingRequest request) throws JdcloudSdkException {
        return new GetEnableQueryStringSortSettingExecutor().client(this).execute(request);
    }

    /**
     * 在所有启用星盾的子域上启用 IPv6。
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetIPv6SettingResponse getIPv6Setting(GetIPv6SettingRequest request) throws JdcloudSdkException {
        return new GetIPv6SettingExecutor().client(this).execute(request);
    }

    /**
     * 对于一个特定域，订购一个高级证书包
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public OrderAdvancedCertificateManagerCertificatePackResponse orderAdvancedCertificateManagerCertificatePack(OrderAdvancedCertificateManagerCertificatePackRequest request) throws JdcloudSdkException {
        return new OrderAdvancedCertificateManagerCertificatePackExecutor().client(this).execute(request);
    }

    /**
     * 自动优化移动设备上网站访问者的图像加载
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ChangeMirageSettingResponse changeMirageSetting(ChangeMirageSettingRequest request) throws JdcloudSdkException {
        return new ChangeMirageSettingExecutor().client(this).execute(request);
    }

    /**
     * 对于给定域，删除高级证书包
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteAdvancedCertificateManagerCertificatePackResponse deleteAdvancedCertificateManagerCertificatePack(DeleteAdvancedCertificateManagerCertificatePackRequest request) throws JdcloudSdkException {
        return new DeleteAdvancedCertificateManagerCertificatePackExecutor().client(this).execute(request);
    }

    /**
     * 修补域的通用SSL设置
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public EditUniversalSSLSettingsResponse editUniversalSSLSettings(EditUniversalSSLSettingsRequest request) throws JdcloudSdkException {
        return new EditUniversalSSLSettingsExecutor().client(this).execute(request);
    }

    /**
     * SSL对访问者的连接进行加密，并保护信用卡号码和其他进出网站的个人数据。
SSL最多需要5分钟才能完全激活。需要在星盾激活你的根域或www域。
Off，访客和星盾之间没有SSL，星盾和你的Web服务器之间也没有SSL（所有HTTP流量）。
Flexible, 访客和星盾之间的 SSL -- 访客在你的网站上看到 HTTPS，但星盾和你的 Web 服务器之间没有 SSL。您不需要在您的 Web 服务器上安装 SSL 证书，但您的访客仍会看到启用 HTTPS 的网站。
Full, 访客和星盾之间的 SSL -- 访客在你的网站上看到 HTTPS，以及星盾和你的 Web 服务器之间的 SSL。您至少需要有自己的 SSL 证书或自签名的证书。
Full (Strict), 访客和星盾之间的 SSL -- 访客在您的网站上看到 HTTPS，以及星盾和您的 Web 服务器之间的 SSL。你需要在你的网络服务器上安装一个有效的SSL证书。
这个证书必须由一个证书机构签署，有一个在未来的到期日，并为请求的域名（主机名）作出回应。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetSSLSettingResponse getSSLSetting(GetSSLSettingRequest request) throws JdcloudSdkException {
        return new GetSSLSettingExecutor().client(this).execute(request);
    }

    /**
     * Rocket Loader是一个通用的异步JavaScript优化，它优先渲染你的内容同时异步加载你的网站的Javascript。
开启Rocket Loader将立即改善网页的渲染时间，有时以首次绘制时间（TTFP）以及window.onload时间（假设页面上有JavaScript）来衡量，这对你的搜索排名会产生积极影响。
当打开时，Rocket Loader将自动推迟加载你的HTML中引用的所有Javascript，而不需要配置。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetRocketLoaderSettingResponse getRocketLoaderSetting(GetRocketLoaderSettingRequest request) throws JdcloudSdkException {
        return new GetRocketLoaderSettingExecutor().client(this).execute(request);
    }

    /**
     * 
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeletePageRuleResponse deletePageRule(DeletePageRuleRequest request) throws JdcloudSdkException {
        return new DeletePageRuleExecutor().client(this).execute(request);
    }

    /**
     * 当请求资产的客户端支持brotli压缩算法时，星盾将提供资产的brotli压缩版本。
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ChangeBrotliSettingResponse changeBrotliSetting(ChangeBrotliSettingRequest request) throws JdcloudSdkException {
        return new ChangeBrotliSettingExecutor().client(this).execute(request);
    }

    /**
     * 启用IP地理定位，让星盾对您网站的访问者进行地理定位，并将国家代码传递给您。
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ChangeIPGeolocationSettingResponse changeIPGeolocationSetting(ChangeIPGeolocationSettingRequest request) throws JdcloudSdkException {
        return new ChangeIPGeolocationSettingExecutor().client(this).execute(request);
    }

    /**
     * Privacy Pass是一个由Privacy Pass团队开发的浏览器扩展，旨在改善您的访客的浏览体验。启用Privacy Pass将减少显示给你的访客的验证码的数量。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ChangePrivacyPassSettingResponse changePrivacyPassSetting(ChangePrivacyPassSettingRequest request) throws JdcloudSdkException {
        return new ChangePrivacyPassSettingExecutor().client(this).execute(request);
    }

    /**
     * Privacy Pass是一个由Privacy Pass团队开发的浏览器扩展，旨在改善您的访客的浏览体验。启用Privacy Pass将减少显示给你的访客的验证码的数量。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetPrivacyPassSettingResponse getPrivacyPassSetting(GetPrivacyPassSettingRequest request) throws JdcloudSdkException {
        return new GetPrivacyPassSettingExecutor().client(this).execute(request);
    }

    /**
     * 创建新的防火墙规则。
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreateFirewallRulesResponse createFirewallRules(CreateFirewallRulesRequest request) throws JdcloudSdkException {
        return new CreateFirewallRulesExecutor().client(this).execute(request);
    }

    /**
     * 为该域启用加密TLS 1.3功能。
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ChangeTLS1_3SettingResponse changeTLS1_3Setting(ChangeTLS1_3SettingRequest request) throws JdcloudSdkException {
        return new ChangeTLS1_3SettingExecutor().client(this).execute(request);
    }

    /**
     * 为该域启用自动HTTPS重写功能。
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ChangeAutomaticHTTPSRewritesSettingResponse changeAutomaticHTTPSRewritesSetting(ChangeAutomaticHTTPSRewritesSettingRequest request) throws JdcloudSdkException {
        return new ChangeAutomaticHTTPSRewritesSettingExecutor().client(this).execute(request);
    }

    /**
     * 删除现有防火墙规则。
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteIndividualFirewallRulesResponse deleteIndividualFirewallRules(DeleteIndividualFirewallRulesRequest request) throws JdcloudSdkException {
        return new DeleteIndividualFirewallRulesExecutor().client(this).execute(request);
    }

    /**
     * 如果你的网站上有敏感的内容，你想让真正的访问者看到，但你想对可疑的访问者进行隐藏，你所要做的就是用星盾SSE标签来包装这些内容。
用下面的SSE标签包住任何你想不让可疑访客看到的内容，&lt;!--sse--&gt;&lt;!--/sse--&gt;。
例如，&lt;!--sse--&gt;不好的访问者不会看到我的电话号码，555-555-5555&lt;!--/sse--&gt;。注意，SSE只对HTML起作用。
如果你启用了HTML最小化功能，当你的HTML源代码通过星盾提供服务时，你不会看到SSE标签。
在这种情况下，SSE 仍将发挥作用，因为星盾的 HTML 缩减和 SSE 功能是在资源通过我们的网络传输给我们时即时发生的。当资源通过我们的网络移动到访问者的计算机上时，SSE 仍会发挥作用。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetServerSideExcludeSettingResponse getServerSideExcludeSetting(GetServerSideExcludeSettingRequest request) throws JdcloudSdkException {
        return new GetServerSideExcludeSettingExecutor().client(this).execute(request);
    }

    /**
     * 开启/关闭 0-RTT
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public Change0_RTTSessionResumptionSettingResponse change0_RTTSessionResumptionSetting(Change0_RTTSessionResumptionSettingRequest request) throws JdcloudSdkException {
        return new Change0_RTTSessionResumptionSettingExecutor().client(this).execute(request);
    }

    /**
     * 对所有使用&quot;http&quot;的URL的请求，用301重定向到相应的 &quot;https&quot; URL。如果你只想对一个子集的请求进行重定向，可以考虑创建一个&quot;Always use HTTPS&quot;的页面规则。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetAlwaysUseHTTPSSettingResponse getAlwaysUseHTTPSSetting(GetAlwaysUseHTTPSSettingRequest request) throws JdcloudSdkException {
        return new GetAlwaysUseHTTPSSettingExecutor().client(this).execute(request);
    }

    /**
     * 套餐包详情查询
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribePackageResponse describePackage(DescribePackageRequest request) throws JdcloudSdkException {
        return new DescribePackageExecutor().client(this).execute(request);
    }

    /**
     * 
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreatePageRuleResponse createPageRule(CreatePageRuleRequest request) throws JdcloudSdkException {
        return new CreatePageRuleExecutor().client(this).execute(request);
    }

    /**
     * SSL对访问者的连接进行加密，并保护信用卡号码和其他进出网站的个人数据。
SSL最多需要5分钟才能完全激活。需要在星盾激活你的根域或www域。
Off，访客和星盾之间没有SSL，星盾和你的Web服务器之间也没有SSL（所有HTTP流量）。
Flexible, 访客和星盾之间的 SSL -- 访客在你的网站上看到 HTTPS，但星盾和你的 Web 服务器之间没有 SSL。您不需要在您的 Web 服务器上安装 SSL 证书，但您的访客仍会看到启用 HTTPS 的网站。
Full, 访客和星盾之间的 SSL -- 访客在你的网站上看到 HTTPS，以及星盾和你的 Web 服务器之间的 SSL。您至少需要有自己的 SSL 证书或自签名的证书。
Full (Strict), 访客和星盾之间的 SSL -- 访客在您的网站上看到 HTTPS，以及星盾和您的 Web 服务器之间的 SSL。你需要在你的网络服务器上安装一个有效的SSL证书。
这个证书必须由一个证书机构签署，有一个在未来的到期日，并为请求的域名（主机名）作出回应。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ChangeSSLSettingResponse changeSSLSetting(ChangeSSLSettingRequest request) throws JdcloudSdkException {
        return new ChangeSSLSettingExecutor().client(this).execute(request);
    }

    /**
     * 列出、搜索、排序和筛选域的DNS记录。
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ListDNSRecordsResponse listDNSRecords(ListDNSRecordsRequest request) throws JdcloudSdkException {
        return new ListDNSRecordsExecutor().client(this).execute(request);
    }

    /**
     * 套餐实例列表信息查询
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeInstancesResponse describeInstances(DescribeInstancesRequest request) throws JdcloudSdkException {
        return new DescribeInstancesExecutor().client(this).execute(request);
    }

    /**
     * 获取HTTP2设置的状态
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetHTTP2SettingResponse getHTTP2Setting(GetHTTP2SettingRequest request) throws JdcloudSdkException {
        return new GetHTTP2SettingExecutor().client(this).execute(request);
    }

    /**
     * 指定访问者在成功完成一项挑战（如验证码）后允许访问您的网站多长时间。在TTL过期后，访问者将不得不完成新的挑战。我们建议设置为15-45分钟，并将尝试遵守任何超过45分钟的设置。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetChallengeTTLSettingResponse getChallengeTTLSetting(GetChallengeTTLSettingRequest request) throws JdcloudSdkException {
        return new GetChallengeTTLSettingExecutor().client(this).execute(request);
    }

    /**
     * 开启BOT
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public OpenFirewallBotResponse openFirewallBot(OpenFirewallBotRequest request) throws JdcloudSdkException {
        return new OpenFirewallBotExecutor().client(this).execute(request);
    }

    /**
     * 启用IP地理定位，让星盾对您网站的访问者进行地理定位，并将国家代码传递给您。
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetIPGeolocationSettingResponse getIPGeolocationSetting(GetIPGeolocationSettingRequest request) throws JdcloudSdkException {
        return new GetIPGeolocationSettingExecutor().client(this).execute(request);
    }

    /**
     * 
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public UpdateDNSRecordResponse updateDNSRecord(UpdateDNSRecordRequest request) throws JdcloudSdkException {
        return new UpdateDNSRecordExecutor().client(this).execute(request);
    }

    /**
     * Value of the 0-RTT setting
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public Get0_RTTSessionResumptionSettingResponse get0_RTTSessionResumptionSetting(Get0_RTTSessionResumptionSettingRequest request) throws JdcloudSdkException {
        return new Get0_RTTSessionResumptionSettingExecutor().client(this).execute(request);
    }

    /**
     * 如果你的网站上有敏感的内容，你想让真正的访问者看到，但你想对可疑的访问者进行隐藏，你所要做的就是用星盾SSE标签来包装这些内容。
用下面的SSE标签包住任何你想不让可疑访客看到的内容，&lt;!--sse--&gt;&lt;!--/sse--&gt;。
例如，&lt;!--sse--&gt;不好的访问者不会看到我的电话号码，555-555-5555&lt;!--/sse--&gt;。注意，SSE只对HTML起作用。
如果你启用了HTML最小化功能，当你的HTML源代码通过星盾提供服务时，你不会看到SSE标签。
在这种情况下，SSE 仍将发挥作用，因为星盾的 HTML 缩减和 SSE 功能是在资源通过我们的网络传输给我们时即时发生的。当资源通过我们的网络移动到访问者的计算机上时，SSE 仍会发挥作用。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ChangeServerSideExcludeSettingResponse changeServerSideExcludeSetting(ChangeServerSideExcludeSettingRequest request) throws JdcloudSdkException {
        return new ChangeServerSideExcludeSettingExecutor().client(this).execute(request);
    }

    /**
     * 更改异常检测类型WAF规则包的灵敏度和操作
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public EditFirewallPackageResponse editFirewallPackage(EditFirewallPackageRequest request) throws JdcloudSdkException {
        return new EditFirewallPackageExecutor().client(this).execute(request);
    }

    /**
     * 通过指定主机、关联的缓存标记或前缀，从星盾的缓存中精确删除一个或多个文件。
注意，缓存标记、主机和前缀清除每24小时的速率限制为30000次清除API调用。一次API调用最多可以清除30个标记、主机或前缀。
对于需要以更大容量进行清除的客户，可以提高此速率限制。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public PurgeFilesByCache_TagsAndHostOrPrefixResponse purgeFilesByCache_TagsAndHostOrPrefix(PurgeFilesByCache_TagsAndHostOrPrefixRequest request) throws JdcloudSdkException {
        return new PurgeFilesByCache_TagsAndHostOrPrefixExecutor().client(this).execute(request);
    }

    /**
     * 套餐实例续费回调查询
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public SelectDetailListResponse selectDetailList(SelectDetailListRequest request) throws JdcloudSdkException {
        return new SelectDetailListExecutor().client(this).execute(request);
    }

    /**
     * 从星盾的缓存中删除所有文件
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public PurgeAllFilesResponse purgeAllFiles(PurgeAllFilesRequest request) throws JdcloudSdkException {
        return new PurgeAllFilesExecutor().client(this).execute(request);
    }

    /**
     * 开启/关闭HTTP3
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ChangeHTTP3SettingResponse changeHTTP3Setting(ChangeHTTP3SettingRequest request) throws JdcloudSdkException {
        return new ChangeHTTP3SettingExecutor().client(this).execute(request);
    }

    /**
     * 浏览器完整性检查与不良行为检查类似，寻找最常被垃圾邮件发送者滥用的常见HTTP头，并拒绝他们访问您的页面。它还会对没有用户代理或非标准用户代理（也是滥用机器人、爬虫或访客常用的）的访客提出挑战质询。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ChangeBrowserCheckSettingResponse changeBrowserCheckSetting(ChangeBrowserCheckSettingRequest request) throws JdcloudSdkException {
        return new ChangeBrowserCheckSettingExecutor().client(this).execute(request);
    }

    /**
     * 
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteDNSRecordResponse deleteDNSRecord(DeleteDNSRecordRequest request) throws JdcloudSdkException {
        return new DeleteDNSRecordExecutor().client(this).execute(request);
    }

    /**
     * 套餐包列表查询
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribePackagesResponse describePackages(DescribePackagesRequest request) throws JdcloudSdkException {
        return new DescribePackagesExecutor().client(this).execute(request);
    }

    /**
     * 设置Pseudo IPv4(IPv6到IPv4的转换服务)
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ChangePseudoIPv4SettingResponse changePseudoIPv4Setting(ChangePseudoIPv4SettingRequest request) throws JdcloudSdkException {
        return new ChangePseudoIPv4SettingExecutor().client(this).execute(request);
    }

    /**
     * 允许客户继续在我们发送给源的头中使用真正的客户IP。这只限于企业级域。
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetTrueClientIPSettingResponse getTrueClientIPSetting(GetTrueClientIPSettingRequest request) throws JdcloudSdkException {
        return new GetTrueClientIPSettingExecutor().client(this).execute(request);
    }

    /**
     * 自动将移动设备上的访问者重定向到一个移动优化的子域上
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetMobileRedirectSettingResponse getMobileRedirectSetting(GetMobileRedirectSettingRequest request) throws JdcloudSdkException {
        return new GetMobileRedirectSettingExecutor().client(this).execute(request);
    }

    /**
     * 剥离元数据并压缩你的图像，以加快页面加载时间。
Basic（无损），减少PNG、JPEG和GIF文件的大小 - 对视觉质量没有影响。
Basic+JPEG（有损），进一步减少JPEG文件的大小，以加快图像加载。
较大的JPEG文件被转换为渐进式图像，首先加载较低分辨率的图像，最后是较高的分辨率版本。
不建议用于高像素的摄影网站。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ChangePolishSettingResponse changePolishSetting(ChangePolishSettingRequest request) throws JdcloudSdkException {
        return new ChangePolishSettingExecutor().client(this).execute(request);
    }

    /**
     * 在你的网页上对电子邮件地址进行加密，以防止机器人入侵，同时保持它们对人类可见。
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ChangeEmailObfuscationSettingResponse changeEmailObfuscationSetting(ChangeEmailObfuscationSettingRequest request) throws JdcloudSdkException {
        return new ChangeEmailObfuscationSettingExecutor().client(this).execute(request);
    }

    /**
     * 更新一个单独的现有防火墙规则。
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public UpdateIndividualFirewallRuleResponse updateIndividualFirewallRule(UpdateIndividualFirewallRuleRequest request) throws JdcloudSdkException {
        return new UpdateIndividualFirewallRuleExecutor().client(this).execute(request);
    }

    /**
     * 获取有关单个防火墙包的信息
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public FirewallPackageDetailsResponse firewallPackageDetails(FirewallPackageDetailsRequest request) throws JdcloudSdkException {
        return new FirewallPackageDetailsExecutor().client(this).execute(request);
    }

    /**
     * 自动优化移动设备上网站访问者的图像加载
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetMirageSettingResponse getMirageSetting(GetMirageSettingRequest request) throws JdcloudSdkException {
        return new GetMirageSettingExecutor().client(this).execute(request);
    }

    /**
     * 替换页面规则。最终规则将与此请求传递的数据完全匹配。
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public UpdatePageRuleResponse updatePageRule(UpdatePageRuleRequest request) throws JdcloudSdkException {
        return new UpdatePageRuleExecutor().client(this).execute(request);
    }

    /**
     * 更新规则组的状态
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public EditRuleGroupResponse editRuleGroup(EditRuleGroupRequest request) throws JdcloudSdkException {
        return new EditRuleGroupExecutor().client(this).execute(request);
    }

    /**
     * 一个用于TLS终端的密码允许列表。这些密码必须是BoringSSL的格式。
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetCiphersSettingResponse getCiphersSetting(GetCiphersSettingRequest request) throws JdcloudSdkException {
        return new GetCiphersSettingExecutor().client(this).execute(request);
    }

    /**
     * 一个用于TLS终端的密码允许列表。这些密码必须是BoringSSL的格式。
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ChangeCiphersSettingResponse changeCiphersSetting(ChangeCiphersSettingRequest request) throws JdcloudSdkException {
        return new ChangeCiphersSettingExecutor().client(this).execute(request);
    }

    /**
     * 当请求图像的客户端支持WebP图像编解码器时。当WebP比原始图像格式具有性能优势时，星盾将提供WebP版本的图像。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetWebPSettingResponse getWebPSetting(GetWebPSettingRequest request) throws JdcloudSdkException {
        return new GetWebPSettingExecutor().client(this).execute(request);
    }

    /**
     * 当请求图像的客户端支持WebP图像编解码器时。当WebP比原始图像格式具有性能优势时，星盾将提供WebP版本的图像。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ChangeWebPSettingResponse changeWebPSetting(ChangeWebPSettingRequest request) throws JdcloudSdkException {
        return new ChangeWebPSettingExecutor().client(this).execute(request);
    }

    /**
     * 启用后，热链路保护选项可确保其他网站无法通过建立使用您网站上托管的图像的页面来占用您的带宽。只要您的网站上的图像请求被星盾选中，我们就会检查以确保这不是其他网站在请求它们。
人们仍然能够从你的网页上下载和查看图像，但其他网站将无法窃取它们用于自己的网页。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetHotlinkProtectionSettingResponse getHotlinkProtectionSetting(GetHotlinkProtectionSettingRequest request) throws JdcloudSdkException {
        return new GetHotlinkProtectionSettingExecutor().client(this).execute(request);
    }

    /**
     * WAF检查对您网站的HTTP请求。它检查GET和POST请求，并应用规则来帮助从合法的网站访问者中过滤出非法流量。星盾 WAF 检查网站地址或 URL 以检测任何不正常的东西。
如果星盾 WAF确定了可疑的用户行为。那么 WAF 将用一个页面 &quot;挑战 &quot;网络访客，要求他们成功提交验证码以继续其行动。
如果挑战失败，行动将被停止。这意味着 星盾 的 WAF 将在任何被识别为非法的流量到达您的源网络服务器之前将其阻止。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ChangeWebApplicationFirewallWAFSettingResponse changeWebApplicationFirewallWAFSetting(ChangeWebApplicationFirewallWAFSettingRequest request) throws JdcloudSdkException {
        return new ChangeWebApplicationFirewallWAFSettingExecutor().client(this).execute(request);
    }

    /**
     * 从域中删除SSL证书。
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteSSLConfigurationResponse deleteSSLConfiguration(DeleteSSLConfigurationRequest request) throws JdcloudSdkException {
        return new DeleteSSLConfigurationExecutor().client(this).execute(request);
    }

    /**
     * 获取单个规则组
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public RuleGroupDetailsResponse ruleGroupDetails(RuleGroupDetailsRequest request) throws JdcloudSdkException {
        return new RuleGroupDetailsExecutor().client(this).execute(request);
    }

    /**
     * 包内的搜索、排序和筛选规则
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ListRulesResponse listRules(ListRulesRequest request) throws JdcloudSdkException {
        return new ListRulesExecutor().client(this).execute(request);
    }

    /**
     * 搜索、列出和排序包中包含的规则组
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ListRuleGroupsResponse listRuleGroups(ListRuleGroupsRequest request) throws JdcloudSdkException {
        return new ListRuleGroupsExecutor().client(this).execute(request);
    }

    /**
     * 创建DNS记录
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreateDNSRecordResponse createDNSRecord(CreateDNSRecordRequest request) throws JdcloudSdkException {
        return new CreateDNSRecordExecutor().client(this).execute(request);
    }

    /**
     * 获取HTTP3设置的状态
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetHTTP3SettingResponse getHTTP3Setting(GetHTTP3SettingRequest request) throws JdcloudSdkException {
        return new GetHTTP3SettingExecutor().client(this).execute(request);
    }


    public interface Builder {
        public Builder credentialsProvider(CredentialsProvider provider);
        public Builder environment(Environment environment);
        public Builder httpRequestConfig(HttpRequestConfig config);
        public StarshieldClient build() throws JdcloudSdkException;
    }

    private static class DefaultBuilder implements Builder {

        private StarshieldClient starshieldClient;

        public DefaultBuilder() {
            starshieldClient = new StarshieldClient();
        }

        public DefaultBuilder credentialsProvider(CredentialsProvider provider) {
            starshieldClient.credentialsProvider = provider;
            return this;
        }

        public DefaultBuilder httpRequestConfig(HttpRequestConfig config) {
            starshieldClient.httpRequestConfig = config;
            return this;
        }

        public StarshieldClient build() throws JdcloudSdkException {

            if (starshieldClient.credentialsProvider == null) {
                //if credentialsProvider not set, try load jdcloud global default  credentials provider
                starshieldClient.credentialsProvider = Jdcloud.defaultInstance().getCredentialsProvider();
                if (starshieldClient.credentialsProvider == null) {
                    throw new JdcloudValidateException("StarshieldClient build error: jdcloud credentials provider not set");
                }
            }
            if (starshieldClient.httpRequestConfig == null) {
                starshieldClient.httpRequestConfig = Jdcloud.defaultInstance().getHttpRequestConfig();
                if (starshieldClient.httpRequestConfig == null) {
                    throw new JdcloudValidateException("StarshieldClient build error: http request config not set");
                }
            }
            return starshieldClient;
        }

        public Builder environment(Environment environment) {
            starshieldClient.environment = environment;
            return this;
        }
    }
}
