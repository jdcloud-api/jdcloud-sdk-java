/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Zone
 * A Zone is a domain name along with its subdomains and other identities
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.starshield.model;

import java.util.List;
import java.util.ArrayList;
import com.jdcloud.sdk.annotation.Required;
import com.jdcloud.sdk.service.JdcloudRequest;

/**
 * 通过指定主机、关联的缓存标记或前缀，从星盾的缓存中精确删除一个或多个文件。
注意，缓存标记、主机和前缀清除每24小时的速率限制为30000次清除API调用。一次API调用最多可以清除30个标记、主机或前缀。
对于需要以更大容量进行清除的客户，可以提高此速率限制。

 */
public class PurgeFilesByCache_TagsAndHostOrPrefixRequest extends JdcloudRequest implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 如何资产携带Cache-Tag头，并且它的值与提供的值之一匹配的话，该资产将从星盾缓存中清除
     */
    private List<String> tags;

    /**
     * 如果资产的URL中的host与提供的值之一匹配的话，该资产将从星盾缓存中清除
     */
    private List<String> hosts;

    /**
     * URL上与前缀匹配的任何资产都将从星盾缓存中清除。
例如, a.com/b 意味着 a.com/b/c/d.png 会被删除，而 a.com/bc.png 不会被删除。前缀a.com/b和a.com/b/c是冗余的。

     */
    private List<String> prefixes;

    /**
     * identifier
     * Required:true
     */
    @Required
    private String identifier;


    /**
     * get 如何资产携带Cache-Tag头，并且它的值与提供的值之一匹配的话，该资产将从星盾缓存中清除
     *
     * @return
     */
    public List<String> getTags() {
        return tags;
    }

    /**
     * set 如何资产携带Cache-Tag头，并且它的值与提供的值之一匹配的话，该资产将从星盾缓存中清除
     *
     * @param tags
     */
    public void setTags(List<String> tags) {
        this.tags = tags;
    }

    /**
     * get 如果资产的URL中的host与提供的值之一匹配的话，该资产将从星盾缓存中清除
     *
     * @return
     */
    public List<String> getHosts() {
        return hosts;
    }

    /**
     * set 如果资产的URL中的host与提供的值之一匹配的话，该资产将从星盾缓存中清除
     *
     * @param hosts
     */
    public void setHosts(List<String> hosts) {
        this.hosts = hosts;
    }

    /**
     * get URL上与前缀匹配的任何资产都将从星盾缓存中清除。
例如, a.com/b 意味着 a.com/b/c/d.png 会被删除，而 a.com/bc.png 不会被删除。前缀a.com/b和a.com/b/c是冗余的。

     *
     * @return
     */
    public List<String> getPrefixes() {
        return prefixes;
    }

    /**
     * set URL上与前缀匹配的任何资产都将从星盾缓存中清除。
例如, a.com/b 意味着 a.com/b/c/d.png 会被删除，而 a.com/bc.png 不会被删除。前缀a.com/b和a.com/b/c是冗余的。

     *
     * @param prefixes
     */
    public void setPrefixes(List<String> prefixes) {
        this.prefixes = prefixes;
    }

    /**
     * get identifier
     *
     * @return
     */
    public String getIdentifier() {
        return identifier;
    }

    /**
     * set identifier
     *
     * @param identifier
     */
    public void setIdentifier(String identifier) {
        this.identifier = identifier;
    }


    /**
     * set 如何资产携带Cache-Tag头，并且它的值与提供的值之一匹配的话，该资产将从星盾缓存中清除
     *
     * @param tags
     */
    public PurgeFilesByCache_TagsAndHostOrPrefixRequest tags(List<String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * set 如果资产的URL中的host与提供的值之一匹配的话，该资产将从星盾缓存中清除
     *
     * @param hosts
     */
    public PurgeFilesByCache_TagsAndHostOrPrefixRequest hosts(List<String> hosts) {
        this.hosts = hosts;
        return this;
    }

    /**
     * set URL上与前缀匹配的任何资产都将从星盾缓存中清除。
例如, a.com/b 意味着 a.com/b/c/d.png 会被删除，而 a.com/bc.png 不会被删除。前缀a.com/b和a.com/b/c是冗余的。

     *
     * @param prefixes
     */
    public PurgeFilesByCache_TagsAndHostOrPrefixRequest prefixes(List<String> prefixes) {
        this.prefixes = prefixes;
        return this;
    }

    /**
     * set identifier
     *
     * @param identifier
     */
    public PurgeFilesByCache_TagsAndHostOrPrefixRequest identifier(String identifier) {
        this.identifier = identifier;
        return this;
    }


    /**
     * add item to 如何资产携带Cache-Tag头，并且它的值与提供的值之一匹配的话，该资产将从星盾缓存中清除
     *
     * @param tag
     */
    public void addTag(String tag) {
        if (this.tags == null) {
            this.tags = new ArrayList<>();
        }
        this.tags.add(tag);
    }

    /**
     * add item to 如果资产的URL中的host与提供的值之一匹配的话，该资产将从星盾缓存中清除
     *
     * @param host
     */
    public void addHost(String host) {
        if (this.hosts == null) {
            this.hosts = new ArrayList<>();
        }
        this.hosts.add(host);
    }

    /**
     * add item to URL上与前缀匹配的任何资产都将从星盾缓存中清除。
例如, a.com/b 意味着 a.com/b/c/d.png 会被删除，而 a.com/bc.png 不会被删除。前缀a.com/b和a.com/b/c是冗余的。

     *
     * @param prefixe
     */
    public void addPrefixe(String prefixe) {
        if (this.prefixes == null) {
            this.prefixes = new ArrayList<>();
        }
        this.prefixes.add(prefixe);
    }

}