/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Custom SSL for a Zone
 * Custom SSL certificate for a zone
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.starshield.model;

import com.jdcloud.sdk.service.starshield.model.Geo_restrictions;
import com.jdcloud.sdk.annotation.Required;
import com.jdcloud.sdk.service.JdcloudRequest;

/**
 * 上载域的新SSL证书
 */
public class CreateSSLConfigurationRequest extends JdcloudRequest implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 域的SSL证书或证书以及中间层
     */
    private String certificate;

    /**
     * 域的私钥
     */
    private String private_key;

    /**
     * SSL泛捆绑在各处有着最高的概率被验证，甚至能被使用过时的或不寻常的信任存储的客户端验证。
最佳捆绑使用最短的认证链和最新的中间证书。
而强制捆绑会验证证书链，但不以其他方式修改证书链。

     */
    private String bundle_method;

    /**
     * geo_restrictions
     */
    private Geo_restrictions geo_restrictions;

    /**
     * “legacy_custom”类型支持在TLS握手中不包含SNI的传统客户端。
     */
    private String ty_pe;

    /**
     * zone_identifier
     * Required:true
     */
    @Required
    private String zone_identifier;


    /**
     * get 域的SSL证书或证书以及中间层
     *
     * @return
     */
    public String getCertificate() {
        return certificate;
    }

    /**
     * set 域的SSL证书或证书以及中间层
     *
     * @param certificate
     */
    public void setCertificate(String certificate) {
        this.certificate = certificate;
    }

    /**
     * get 域的私钥
     *
     * @return
     */
    public String getPrivate_key() {
        return private_key;
    }

    /**
     * set 域的私钥
     *
     * @param private_key
     */
    public void setPrivate_key(String private_key) {
        this.private_key = private_key;
    }

    /**
     * get SSL泛捆绑在各处有着最高的概率被验证，甚至能被使用过时的或不寻常的信任存储的客户端验证。
最佳捆绑使用最短的认证链和最新的中间证书。
而强制捆绑会验证证书链，但不以其他方式修改证书链。

     *
     * @return
     */
    public String getBundle_method() {
        return bundle_method;
    }

    /**
     * set SSL泛捆绑在各处有着最高的概率被验证，甚至能被使用过时的或不寻常的信任存储的客户端验证。
最佳捆绑使用最短的认证链和最新的中间证书。
而强制捆绑会验证证书链，但不以其他方式修改证书链。

     *
     * @param bundle_method
     */
    public void setBundle_method(String bundle_method) {
        this.bundle_method = bundle_method;
    }

    /**
     * get geo_restrictions
     *
     * @return
     */
    public Geo_restrictions getGeo_restrictions() {
        return geo_restrictions;
    }

    /**
     * set geo_restrictions
     *
     * @param geo_restrictions
     */
    public void setGeo_restrictions(Geo_restrictions geo_restrictions) {
        this.geo_restrictions = geo_restrictions;
    }

    /**
     * get “legacy_custom”类型支持在TLS握手中不包含SNI的传统客户端。
     *
     * @return
     */
    public String getTy_pe() {
        return ty_pe;
    }

    /**
     * set “legacy_custom”类型支持在TLS握手中不包含SNI的传统客户端。
     *
     * @param ty_pe
     */
    public void setTy_pe(String ty_pe) {
        this.ty_pe = ty_pe;
    }

    /**
     * get zone_identifier
     *
     * @return
     */
    public String getZone_identifier() {
        return zone_identifier;
    }

    /**
     * set zone_identifier
     *
     * @param zone_identifier
     */
    public void setZone_identifier(String zone_identifier) {
        this.zone_identifier = zone_identifier;
    }


    /**
     * set 域的SSL证书或证书以及中间层
     *
     * @param certificate
     */
    public CreateSSLConfigurationRequest certificate(String certificate) {
        this.certificate = certificate;
        return this;
    }

    /**
     * set 域的私钥
     *
     * @param private_key
     */
    public CreateSSLConfigurationRequest private_key(String private_key) {
        this.private_key = private_key;
        return this;
    }

    /**
     * set SSL泛捆绑在各处有着最高的概率被验证，甚至能被使用过时的或不寻常的信任存储的客户端验证。
最佳捆绑使用最短的认证链和最新的中间证书。
而强制捆绑会验证证书链，但不以其他方式修改证书链。

     *
     * @param bundle_method
     */
    public CreateSSLConfigurationRequest bundle_method(String bundle_method) {
        this.bundle_method = bundle_method;
        return this;
    }

    /**
     * set geo_restrictions
     *
     * @param geo_restrictions
     */
    public CreateSSLConfigurationRequest geo_restrictions(Geo_restrictions geo_restrictions) {
        this.geo_restrictions = geo_restrictions;
        return this;
    }

    /**
     * set “legacy_custom”类型支持在TLS握手中不包含SNI的传统客户端。
     *
     * @param ty_pe
     */
    public CreateSSLConfigurationRequest ty_pe(String ty_pe) {
        this.ty_pe = ty_pe;
        return this;
    }

    /**
     * set zone_identifier
     *
     * @param zone_identifier
     */
    public CreateSSLConfigurationRequest zone_identifier(String zone_identifier) {
        this.zone_identifier = zone_identifier;
        return this;
    }


}