/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Log-Analytics
 * Analytics data for a zone/instance
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.starshield.model;

import java.util.List;
import java.util.ArrayList;
import com.jdcloud.sdk.service.starshield.model.Totals;
import com.jdcloud.sdk.service.JdcloudResult;

/**
 * The dashboard view provides both totals and timeseries data for the given zone and time period across the entire scdn network.
 */
public class DashboardResult extends JdcloudResult implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * totals
     */
    private Totals totals;

    /**
     * Time deltas containing metadata about each bucket of time. The number of buckets (resolution) is determined by the amount of time between the since and until parameters.
     */
    
    private List<Totals> timeseries;


    /**
     * get totals
     *
     * @return
     */
    public Totals getTotals() {
        return totals;
    }

    /**
     * set totals
     *
     * @param totals
     */
    public void setTotals(Totals totals) {
        this.totals = totals;
    }


    /**
    * get Time deltas containing metadata about each bucket of time. The number of buckets (resolution) is determined by the amount of time between the since and until parameters.
    *
    * @return
    */
    public List<Totals> getTimeseries() {
        return timeseries;
    }

    /**
    * set Time deltas containing metadata about each bucket of time. The number of buckets (resolution) is determined by the amount of time between the since and until parameters.
    *
    * @param timeseries
    */
    public void setTimeseries(List<Totals> timeseries) {
        this.timeseries = timeseries;
    }



    /**
     * set totals
     *
     * @param totals
     */
    public DashboardResult totals(Totals totals) {
        this.totals = totals;
        return this;
    }


    /**
    * set Time deltas containing metadata about each bucket of time. The number of buckets (resolution) is determined by the amount of time between the since and until parameters.
    *
    * @param timeseries
    */
    public DashboardResult timeseries(List<Totals> timeseries) {
        this.timeseries = timeseries;
        return this;
    }



    /**
     * add item to Time deltas containing metadata about each bucket of time. The number of buckets (resolution) is determined by the amount of time between the since and until parameters.
     *
     * @param timeserie
     */
    public void addTimeserie(Totals timeserie) {
        if (this.timeseries == null) {
            this.timeseries = new ArrayList<>();
        }
        this.timeseries.add(timeserie);
    }
}