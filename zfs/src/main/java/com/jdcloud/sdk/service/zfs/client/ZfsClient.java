/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * CFS的API
 * CFS(Cloud-File-Service)的API包含CFS相关接口。
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.zfs.client;

import com.jdcloud.sdk.JdcloudSdkException;
import com.jdcloud.sdk.auth.CredentialsProvider;
import com.jdcloud.sdk.client.Environment;
import com.jdcloud.sdk.client.Jdcloud;
import com.jdcloud.sdk.client.JdcloudClient;
import com.jdcloud.sdk.client.JdcloudValidateException;
import com.jdcloud.sdk.http.HttpRequestConfig;
import com.jdcloud.sdk.service.zfs.model.CreateMountTargetRequest;
import com.jdcloud.sdk.service.zfs.model.CreateMountTargetResponse;
import com.jdcloud.sdk.service.zfs.client.CreateMountTargetExecutor;
import com.jdcloud.sdk.service.zfs.model.CreateFileSystemRequest;
import com.jdcloud.sdk.service.zfs.model.CreateFileSystemResponse;
import com.jdcloud.sdk.service.zfs.client.CreateFileSystemExecutor;
import com.jdcloud.sdk.service.zfs.model.DescribeFileSystemRequest;
import com.jdcloud.sdk.service.zfs.model.DescribeFileSystemResponse;
import com.jdcloud.sdk.service.zfs.client.DescribeFileSystemExecutor;
import com.jdcloud.sdk.service.zfs.model.DeleteMountTargetRequest;
import com.jdcloud.sdk.service.zfs.model.DeleteMountTargetResponse;
import com.jdcloud.sdk.service.zfs.client.DeleteMountTargetExecutor;
import com.jdcloud.sdk.service.zfs.model.DescribeFileSystemsRequest;
import com.jdcloud.sdk.service.zfs.model.DescribeFileSystemsResponse;
import com.jdcloud.sdk.service.zfs.client.DescribeFileSystemsExecutor;
import com.jdcloud.sdk.service.zfs.model.DeleteFileSystemRequest;
import com.jdcloud.sdk.service.zfs.model.DeleteFileSystemResponse;
import com.jdcloud.sdk.service.zfs.client.DeleteFileSystemExecutor;
import com.jdcloud.sdk.service.zfs.model.ModifyFileSystemAttributeRequest;
import com.jdcloud.sdk.service.zfs.model.ModifyFileSystemAttributeResponse;
import com.jdcloud.sdk.service.zfs.client.ModifyFileSystemAttributeExecutor;
import com.jdcloud.sdk.service.zfs.model.DescribeMountTargetsRequest;
import com.jdcloud.sdk.service.zfs.model.DescribeMountTargetsResponse;
import com.jdcloud.sdk.service.zfs.client.DescribeMountTargetsExecutor;
import com.jdcloud.sdk.service.zfs.model.DescribeMountTargetRequest;
import com.jdcloud.sdk.service.zfs.model.DescribeMountTargetResponse;
import com.jdcloud.sdk.service.zfs.client.DescribeMountTargetExecutor;

/**
 * zfsClient
 */
public class ZfsClient extends JdcloudClient {

    public final static String ApiVersion = "v1";
    private final static String UserAgentPrefix = "JdcloudSdkJava";
    public final static String ClientVersion = "1.2.9";
    public final static String DefaultEndpoint = "cfs.jdcloud-api.com";
    public final static String ServiceName = "zfs";
    public final static String UserAgent = UserAgentPrefix + "/" + ClientVersion + " " + ServiceName + "/" + ApiVersion;

    CredentialsProvider credentialsProvider;
    HttpRequestConfig httpRequestConfig;
    Environment environment = new Environment.Builder().endpoint(DefaultEndpoint).build();

    public CredentialsProvider getCredentialsProvider() {
        return credentialsProvider;
    }

    public HttpRequestConfig getHttpRequestConfig() {
        return httpRequestConfig;
    }

    public Environment getEnvironment() {
        return environment;
    }

    public String getUserAgent() {
        return UserAgent;
    }

    public String getServiceName() {
        return ServiceName;
    }

    public String getVersion() {
        return ApiVersion;
    }

    private ZfsClient() {

    }

    public static Builder builder() {
        return new DefaultBuilder();
    }


    /**
     * - 为一个文件系统创建一个挂载目标。通过这个挂载目标,你可以挂载将一个文件系统挂载到主机实例上。
- 创建一个挂载目标，为这个挂载目标分配一个Id

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreateMountTargetResponse createMountTarget(CreateMountTargetRequest request) throws JdcloudSdkException {
        return new CreateMountTargetExecutor().client(this).execute(request);
    }

    /**
     * - 创建一个新的文件系统，为这个文件系统分配一个Id

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreateFileSystemResponse createFileSystem(CreateFileSystemRequest request) throws JdcloudSdkException {
        return new CreateFileSystemExecutor().client(this).execute(request);
    }

    /**
     * 查询文件系统详情
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeFileSystemResponse describeFileSystem(DescribeFileSystemRequest request) throws JdcloudSdkException {
        return new DescribeFileSystemExecutor().client(this).execute(request);
    }

    /**
     * -   删除挂载目标的同时会删除相关的网络接口。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteMountTargetResponse deleteMountTarget(DeleteMountTargetRequest request) throws JdcloudSdkException {
        return new DeleteMountTargetExecutor().client(this).execute(request);
    }

    /**
     * -   查询文件系统列表。
-   filters多个过滤条件之间是逻辑与(AND)，每个条件内部的多个取值是逻辑或(OR)

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeFileSystemsResponse describeFileSystems(DescribeFileSystemsRequest request) throws JdcloudSdkException {
        return new DescribeFileSystemsExecutor().client(this).execute(request);
    }

    /**
     * -   删除一个文件系统，一旦删除，该文件系统将不存在，也无法访问已删除的文件系统里的任何内容。
 [MFA enabled]
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteFileSystemResponse deleteFileSystem(DeleteFileSystemRequest request) throws JdcloudSdkException {
        return new DeleteFileSystemExecutor().client(this).execute(request);
    }

    /**
     * 修改文件系统属性(name 和 description 必须要指定一个)
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ModifyFileSystemAttributeResponse modifyFileSystemAttribute(ModifyFileSystemAttributeRequest request) throws JdcloudSdkException {
        return new ModifyFileSystemAttributeExecutor().client(this).execute(request);
    }

    /**
     * -   查询挂载目标列表。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeMountTargetsResponse describeMountTargets(DescribeMountTargetsRequest request) throws JdcloudSdkException {
        return new DescribeMountTargetsExecutor().client(this).execute(request);
    }

    /**
     * 查询挂载目标详情
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeMountTargetResponse describeMountTarget(DescribeMountTargetRequest request) throws JdcloudSdkException {
        return new DescribeMountTargetExecutor().client(this).execute(request);
    }


    public interface Builder {
        public Builder credentialsProvider(CredentialsProvider provider);
        public Builder environment(Environment environment);
        public Builder httpRequestConfig(HttpRequestConfig config);
        public ZfsClient build() throws JdcloudSdkException;
    }

    private static class DefaultBuilder implements Builder {

        private ZfsClient zfsClient;

        public DefaultBuilder() {
            zfsClient = new ZfsClient();
        }

        public DefaultBuilder credentialsProvider(CredentialsProvider provider) {
            zfsClient.credentialsProvider = provider;
            return this;
        }

        public DefaultBuilder httpRequestConfig(HttpRequestConfig config) {
            zfsClient.httpRequestConfig = config;
            return this;
        }

        public ZfsClient build() throws JdcloudSdkException {

            if (zfsClient.credentialsProvider == null) {
                //if credentialsProvider not set, try load jdcloud global default  credentials provider
                zfsClient.credentialsProvider = Jdcloud.defaultInstance().getCredentialsProvider();
                if (zfsClient.credentialsProvider == null) {
                    throw new JdcloudValidateException("ZfsClient build error: jdcloud credentials provider not set");
                }
            }
            if (zfsClient.httpRequestConfig == null) {
                zfsClient.httpRequestConfig = Jdcloud.defaultInstance().getHttpRequestConfig();
                if (zfsClient.httpRequestConfig == null) {
                    throw new JdcloudValidateException("ZfsClient build error: http request config not set");
                }
            }
            return zfsClient;
        }

        public Builder environment(Environment environment) {
            zfsClient.environment = environment;
            return this;
        }
    }
}
