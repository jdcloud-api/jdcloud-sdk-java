/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 京东云RocketMQ接口
 * RocketMQ相关接口
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.rocketmq.client;

import com.jdcloud.sdk.JdcloudSdkException;
import com.jdcloud.sdk.auth.CredentialsProvider;
import com.jdcloud.sdk.client.Environment;
import com.jdcloud.sdk.client.Jdcloud;
import com.jdcloud.sdk.client.JdcloudClient;
import com.jdcloud.sdk.client.JdcloudValidateException;
import com.jdcloud.sdk.http.HttpRequestConfig;
import com.jdcloud.sdk.service.rocketmq.model.UpdateConsumerGroupRequest;
import com.jdcloud.sdk.service.rocketmq.model.UpdateConsumerGroupResponse;
import com.jdcloud.sdk.service.rocketmq.client.UpdateConsumerGroupExecutor;
import com.jdcloud.sdk.service.rocketmq.model.CreateTopicRequest;
import com.jdcloud.sdk.service.rocketmq.model.CreateTopicResponse;
import com.jdcloud.sdk.service.rocketmq.client.CreateTopicExecutor;
import com.jdcloud.sdk.service.rocketmq.model.DescribeTopicRequest;
import com.jdcloud.sdk.service.rocketmq.model.DescribeTopicResponse;
import com.jdcloud.sdk.service.rocketmq.client.DescribeTopicExecutor;
import com.jdcloud.sdk.service.rocketmq.model.DeleteTopicRequest;
import com.jdcloud.sdk.service.rocketmq.model.DeleteTopicResponse;
import com.jdcloud.sdk.service.rocketmq.client.DeleteTopicExecutor;
import com.jdcloud.sdk.service.rocketmq.model.DeleteConsumerGroupRequest;
import com.jdcloud.sdk.service.rocketmq.model.DeleteConsumerGroupResponse;
import com.jdcloud.sdk.service.rocketmq.client.DeleteConsumerGroupExecutor;
import com.jdcloud.sdk.service.rocketmq.model.DescribeTopicNamesRequest;
import com.jdcloud.sdk.service.rocketmq.model.DescribeTopicNamesResponse;
import com.jdcloud.sdk.service.rocketmq.client.DescribeTopicNamesExecutor;
import com.jdcloud.sdk.service.rocketmq.model.DescribeConsumeTraceDetailRequest;
import com.jdcloud.sdk.service.rocketmq.model.DescribeConsumeTraceDetailResponse;
import com.jdcloud.sdk.service.rocketmq.client.DescribeConsumeTraceDetailExecutor;
import com.jdcloud.sdk.service.rocketmq.model.DescribeConsumerGroupsRequest;
import com.jdcloud.sdk.service.rocketmq.model.DescribeConsumerGroupsResponse;
import com.jdcloud.sdk.service.rocketmq.client.DescribeConsumerGroupsExecutor;
import com.jdcloud.sdk.service.rocketmq.model.CreateConsumerGroupRequest;
import com.jdcloud.sdk.service.rocketmq.model.CreateConsumerGroupResponse;
import com.jdcloud.sdk.service.rocketmq.client.CreateConsumerGroupExecutor;
import com.jdcloud.sdk.service.rocketmq.model.DescribeConsumerAllTopicsRequest;
import com.jdcloud.sdk.service.rocketmq.model.DescribeConsumerAllTopicsResponse;
import com.jdcloud.sdk.service.rocketmq.client.DescribeConsumerAllTopicsExecutor;
import com.jdcloud.sdk.service.rocketmq.model.DescribeProduceTraceRequest;
import com.jdcloud.sdk.service.rocketmq.model.DescribeProduceTraceResponse;
import com.jdcloud.sdk.service.rocketmq.client.DescribeProduceTraceExecutor;
import com.jdcloud.sdk.service.rocketmq.model.DescribeConsumerSubTopicsRequest;
import com.jdcloud.sdk.service.rocketmq.model.DescribeConsumerSubTopicsResponse;
import com.jdcloud.sdk.service.rocketmq.client.DescribeConsumerSubTopicsExecutor;
import com.jdcloud.sdk.service.rocketmq.model.DescribeConsumerGroupNamesRequest;
import com.jdcloud.sdk.service.rocketmq.model.DescribeConsumerGroupNamesResponse;
import com.jdcloud.sdk.service.rocketmq.client.DescribeConsumerGroupNamesExecutor;
import com.jdcloud.sdk.service.rocketmq.model.DescribeMessageByMsgIdRequest;
import com.jdcloud.sdk.service.rocketmq.model.DescribeMessageByMsgIdResponse;
import com.jdcloud.sdk.service.rocketmq.client.DescribeMessageByMsgIdExecutor;
import com.jdcloud.sdk.service.rocketmq.model.SendMessageRequest;
import com.jdcloud.sdk.service.rocketmq.model.SendMessageResponse;
import com.jdcloud.sdk.service.rocketmq.client.SendMessageExecutor;
import com.jdcloud.sdk.service.rocketmq.model.DescribeConsumersByTopicRequest;
import com.jdcloud.sdk.service.rocketmq.model.DescribeConsumersByTopicResponse;
import com.jdcloud.sdk.service.rocketmq.client.DescribeConsumersByTopicExecutor;
import com.jdcloud.sdk.service.rocketmq.model.ResetOffsetRequest;
import com.jdcloud.sdk.service.rocketmq.model.ResetOffsetResponse;
import com.jdcloud.sdk.service.rocketmq.client.ResetOffsetExecutor;
import com.jdcloud.sdk.service.rocketmq.model.DescribeTopicsRequest;
import com.jdcloud.sdk.service.rocketmq.model.DescribeTopicsResponse;
import com.jdcloud.sdk.service.rocketmq.client.DescribeTopicsExecutor;
import com.jdcloud.sdk.service.rocketmq.model.DescribeConsumerGroupStatusRequest;
import com.jdcloud.sdk.service.rocketmq.model.DescribeConsumerGroupStatusResponse;
import com.jdcloud.sdk.service.rocketmq.client.DescribeConsumerGroupStatusExecutor;
import com.jdcloud.sdk.service.rocketmq.model.DescribeMessagesRequest;
import com.jdcloud.sdk.service.rocketmq.model.DescribeMessagesResponse;
import com.jdcloud.sdk.service.rocketmq.client.DescribeMessagesExecutor;
import com.jdcloud.sdk.service.rocketmq.model.DescribeConsumeTraceRequest;
import com.jdcloud.sdk.service.rocketmq.model.DescribeConsumeTraceResponse;
import com.jdcloud.sdk.service.rocketmq.client.DescribeConsumeTraceExecutor;
import com.jdcloud.sdk.service.rocketmq.model.UpdateTopicDescriptionRequest;
import com.jdcloud.sdk.service.rocketmq.model.UpdateTopicDescriptionResponse;
import com.jdcloud.sdk.service.rocketmq.client.UpdateTopicDescriptionExecutor;

/**
 * rocketmqClient
 */
public class RocketmqClient extends JdcloudClient {

    public final static String ApiVersion = "v1";
    private final static String UserAgentPrefix = "JdcloudSdkJava";
    public final static String ClientVersion = "1.2.11";
    public final static String DefaultEndpoint = "rocketmq.jdcloud-api.com";
    public final static String ServiceName = "rocketmq";
    public final static String UserAgent = UserAgentPrefix + "/" + ClientVersion + " " + ServiceName + "/" + ApiVersion;

    CredentialsProvider credentialsProvider;
    HttpRequestConfig httpRequestConfig;
    Environment environment = new Environment.Builder().endpoint(DefaultEndpoint).build();

    public CredentialsProvider getCredentialsProvider() {
        return credentialsProvider;
    }

    public HttpRequestConfig getHttpRequestConfig() {
        return httpRequestConfig;
    }

    public Environment getEnvironment() {
        return environment;
    }

    public String getUserAgent() {
        return UserAgent;
    }

    public String getServiceName() {
        return ServiceName;
    }

    public String getVersion() {
        return ApiVersion;
    }

    private RocketmqClient() {

    }

    public static Builder builder() {
        return new DefaultBuilder();
    }


    /**
     * 修改consumerGroup
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public UpdateConsumerGroupResponse updateConsumerGroup(UpdateConsumerGroupRequest request) throws JdcloudSdkException {
        return new UpdateConsumerGroupExecutor().client(this).execute(request);
    }

    /**
     * 创建指定名称的topic
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreateTopicResponse createTopic(CreateTopicRequest request) throws JdcloudSdkException {
        return new CreateTopicExecutor().client(this).execute(request);
    }

    /**
     * 查询topic详情
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeTopicResponse describeTopic(DescribeTopicRequest request) throws JdcloudSdkException {
        return new DescribeTopicExecutor().client(this).execute(request);
    }

    /**
     * 删除单个topic
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteTopicResponse deleteTopic(DeleteTopicRequest request) throws JdcloudSdkException {
        return new DeleteTopicExecutor().client(this).execute(request);
    }

    /**
     * 删除consumerGroup
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteConsumerGroupResponse deleteConsumerGroup(DeleteConsumerGroupRequest request) throws JdcloudSdkException {
        return new DeleteConsumerGroupExecutor().client(this).execute(request);
    }

    /**
     * 查询topic列表，用于消息查询接口，下拉框选择topic
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeTopicNamesResponse describeTopicNames(DescribeTopicNamesRequest request) throws JdcloudSdkException {
        return new DescribeTopicNamesExecutor().client(this).execute(request);
    }

    /**
     * 查询消息消费轨迹（消费者客户端列表）
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeConsumeTraceDetailResponse describeConsumeTraceDetail(DescribeConsumeTraceDetailRequest request) throws JdcloudSdkException {
        return new DescribeConsumeTraceDetailExecutor().client(this).execute(request);
    }

    /**
     * consumerGroup列表
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeConsumerGroupsResponse describeConsumerGroups(DescribeConsumerGroupsRequest request) throws JdcloudSdkException {
        return new DescribeConsumerGroupsExecutor().client(this).execute(request);
    }

    /**
     * 创建consumerGroup
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreateConsumerGroupResponse createConsumerGroup(CreateConsumerGroupRequest request) throws JdcloudSdkException {
        return new CreateConsumerGroupExecutor().client(this).execute(request);
    }

    /**
     * 消费者订阅过的topic列表，用于重置消费位点
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeConsumerAllTopicsResponse describeConsumerAllTopics(DescribeConsumerAllTopicsRequest request) throws JdcloudSdkException {
        return new DescribeConsumerAllTopicsExecutor().client(this).execute(request);
    }

    /**
     * 查询消息生产轨迹
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeProduceTraceResponse describeProduceTrace(DescribeProduceTraceRequest request) throws JdcloudSdkException {
        return new DescribeProduceTraceExecutor().client(this).execute(request);
    }

    /**
     * consumerGroup在线订阅topic信息
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeConsumerSubTopicsResponse describeConsumerSubTopics(DescribeConsumerSubTopicsRequest request) throws JdcloudSdkException {
        return new DescribeConsumerSubTopicsExecutor().client(this).execute(request);
    }

    /**
     * consumerGroup名称列表，用于查死信消息下拉框
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeConsumerGroupNamesResponse describeConsumerGroupNames(DescribeConsumerGroupNamesRequest request) throws JdcloudSdkException {
        return new DescribeConsumerGroupNamesExecutor().client(this).execute(request);
    }

    /**
     * 根据msgId查询消息详情
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeMessageByMsgIdResponse describeMessageByMsgId(DescribeMessageByMsgIdRequest request) throws JdcloudSdkException {
        return new DescribeMessageByMsgIdExecutor().client(this).execute(request);
    }

    /**
     * 发送消息
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public SendMessageResponse sendMessage(SendMessageRequest request) throws JdcloudSdkException {
        return new SendMessageExecutor().client(this).execute(request);
    }

    /**
     * topic订阅管理列表，显示订阅过该topic的consumerGroup
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeConsumersByTopicResponse describeConsumersByTopic(DescribeConsumersByTopicRequest request) throws JdcloudSdkException {
        return new DescribeConsumersByTopicExecutor().client(this).execute(request);
    }

    /**
     * 重置消费位点（消费组可以不在线）
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ResetOffsetResponse resetOffset(ResetOffsetRequest request) throws JdcloudSdkException {
        return new ResetOffsetExecutor().client(this).execute(request);
    }

    /**
     * 查询topic列表
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeTopicsResponse describeTopics(DescribeTopicsRequest request) throws JdcloudSdkException {
        return new DescribeTopicsExecutor().client(this).execute(request);
    }

    /**
     * consumerGroup状态详情
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeConsumerGroupStatusResponse describeConsumerGroupStatus(DescribeConsumerGroupStatusRequest request) throws JdcloudSdkException {
        return new DescribeConsumerGroupStatusExecutor().client(this).execute(request);
    }

    /**
     * 查询消息列表
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeMessagesResponse describeMessages(DescribeMessagesRequest request) throws JdcloudSdkException {
        return new DescribeMessagesExecutor().client(this).execute(request);
    }

    /**
     * 查询消息消费轨迹（消费组列表）
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeConsumeTraceResponse describeConsumeTrace(DescribeConsumeTraceRequest request) throws JdcloudSdkException {
        return new DescribeConsumeTraceExecutor().client(this).execute(request);
    }

    /**
     * 修改topic描述
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public UpdateTopicDescriptionResponse updateTopicDescription(UpdateTopicDescriptionRequest request) throws JdcloudSdkException {
        return new UpdateTopicDescriptionExecutor().client(this).execute(request);
    }


    public interface Builder {
        public Builder credentialsProvider(CredentialsProvider provider);
        public Builder environment(Environment environment);
        public Builder httpRequestConfig(HttpRequestConfig config);
        public RocketmqClient build() throws JdcloudSdkException;
    }

    private static class DefaultBuilder implements Builder {

        private RocketmqClient rocketmqClient;

        public DefaultBuilder() {
            rocketmqClient = new RocketmqClient();
        }

        public DefaultBuilder credentialsProvider(CredentialsProvider provider) {
            rocketmqClient.credentialsProvider = provider;
            return this;
        }

        public DefaultBuilder httpRequestConfig(HttpRequestConfig config) {
            rocketmqClient.httpRequestConfig = config;
            return this;
        }

        public RocketmqClient build() throws JdcloudSdkException {

            if (rocketmqClient.credentialsProvider == null) {
                //if credentialsProvider not set, try load jdcloud global default  credentials provider
                rocketmqClient.credentialsProvider = Jdcloud.defaultInstance().getCredentialsProvider();
                if (rocketmqClient.credentialsProvider == null) {
                    throw new JdcloudValidateException("RocketmqClient build error: jdcloud credentials provider not set");
                }
            }
            if (rocketmqClient.httpRequestConfig == null) {
                rocketmqClient.httpRequestConfig = Jdcloud.defaultInstance().getHttpRequestConfig();
                if (rocketmqClient.httpRequestConfig == null) {
                    throw new JdcloudValidateException("RocketmqClient build error: http request config not set");
                }
            }
            return rocketmqClient;
        }

        public Builder environment(Environment environment) {
            rocketmqClient.environment = environment;
            return this;
        }
    }
}
