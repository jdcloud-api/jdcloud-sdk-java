/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * 
 *
 * 
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.rocketmq.model;

import java.util.List;
import java.util.ArrayList;

/**
 * archSpecConfig
 */
public class ArchSpecConfig  implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * cpu架构类型(x86/arm64)
     */
    private String archType;

    /**
     * 该架构是否对外售卖
     */
    private Boolean onSale;

    /**
     * 指定架构下包含的节点的可选配置信息
     */
    
    private List<NodeSpecConfig> nodeSpecConfig;


    /**
     * get cpu架构类型(x86/arm64)
     *
     * @return
     */
    public String getArchType() {
        return archType;
    }

    /**
     * set cpu架构类型(x86/arm64)
     *
     * @param archType
     */
    public void setArchType(String archType) {
        this.archType = archType;
    }


    /**
     * get 该架构是否对外售卖
     *
     * @return
     */
    public Boolean getOnSale() {
        return onSale;
    }

    /**
     * set 该架构是否对外售卖
     *
     * @param onSale
     */
    public void setOnSale(Boolean onSale) {
        this.onSale = onSale;
    }


    /**
    * get 指定架构下包含的节点的可选配置信息
    *
    * @return
    */
    public List<NodeSpecConfig> getNodeSpecConfig() {
        return nodeSpecConfig;
    }

    /**
    * set 指定架构下包含的节点的可选配置信息
    *
    * @param nodeSpecConfig
    */
    public void setNodeSpecConfig(List<NodeSpecConfig> nodeSpecConfig) {
        this.nodeSpecConfig = nodeSpecConfig;
    }



    /**
     * set cpu架构类型(x86/arm64)
     *
     * @param archType
     */
    public ArchSpecConfig archType(String archType) {
        this.archType = archType;
        return this;
    }


    /**
     * set 该架构是否对外售卖
     *
     * @param onSale
     */
    public ArchSpecConfig onSale(Boolean onSale) {
        this.onSale = onSale;
        return this;
    }


    /**
    * set 指定架构下包含的节点的可选配置信息
    *
    * @param nodeSpecConfig
    */
    public ArchSpecConfig nodeSpecConfig(List<NodeSpecConfig> nodeSpecConfig) {
        this.nodeSpecConfig = nodeSpecConfig;
        return this;
    }



    /**
     * add item to 指定架构下包含的节点的可选配置信息
     *
     * @param nodeSpecConfig
     */
    public void addNodeSpecConfig(NodeSpecConfig nodeSpecConfig) {
        if (this.nodeSpecConfig == null) {
            this.nodeSpecConfig = new ArrayList<>();
        }
        this.nodeSpecConfig.add(nodeSpecConfig);
    }
}