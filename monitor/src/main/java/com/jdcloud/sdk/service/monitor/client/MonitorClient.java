/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * JCLOUD MONITOR API
 * monitor API
 *
 * OpenAPI spec version: v2
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.monitor.client;

import com.jdcloud.sdk.JdcloudSdkException;
import com.jdcloud.sdk.auth.CredentialsProvider;
import com.jdcloud.sdk.client.Environment;
import com.jdcloud.sdk.client.Jdcloud;
import com.jdcloud.sdk.client.JdcloudClient;
import com.jdcloud.sdk.client.JdcloudValidateException;
import com.jdcloud.sdk.http.HttpRequestConfig;
import com.jdcloud.sdk.service.monitor.model.CreateAlarmRequest;
import com.jdcloud.sdk.service.monitor.model.CreateAlarmResponse;
import com.jdcloud.sdk.service.monitor.client.CreateAlarmExecutor;
import com.jdcloud.sdk.service.monitor.model.DescribeMetricDataRequest;
import com.jdcloud.sdk.service.monitor.model.DescribeMetricDataResponse;
import com.jdcloud.sdk.service.monitor.client.DescribeMetricDataExecutor;
import com.jdcloud.sdk.service.monitor.model.DescribeServicesRequest;
import com.jdcloud.sdk.service.monitor.model.DescribeServicesResponse;
import com.jdcloud.sdk.service.monitor.client.DescribeServicesExecutor;
import com.jdcloud.sdk.service.monitor.model.DescribeMetricsForAlarmRequest;
import com.jdcloud.sdk.service.monitor.model.DescribeMetricsForAlarmResponse;
import com.jdcloud.sdk.service.monitor.client.DescribeMetricsForAlarmExecutor;
import com.jdcloud.sdk.service.monitor.model.DescribeAlarmContactsRequest;
import com.jdcloud.sdk.service.monitor.model.DescribeAlarmContactsResponse;
import com.jdcloud.sdk.service.monitor.client.DescribeAlarmContactsExecutor;
import com.jdcloud.sdk.service.monitor.model.DescribeAlarmHistoryRequest;
import com.jdcloud.sdk.service.monitor.model.DescribeAlarmHistoryResponse;
import com.jdcloud.sdk.service.monitor.client.DescribeAlarmHistoryExecutor;
import com.jdcloud.sdk.service.monitor.model.DescribeAlarmRequest;
import com.jdcloud.sdk.service.monitor.model.DescribeAlarmResponse;
import com.jdcloud.sdk.service.monitor.client.DescribeAlarmExecutor;
import com.jdcloud.sdk.service.monitor.model.DeleteAlarmsRequest;
import com.jdcloud.sdk.service.monitor.model.DeleteAlarmsResponse;
import com.jdcloud.sdk.service.monitor.client.DeleteAlarmsExecutor;
import com.jdcloud.sdk.service.monitor.model.LastDownsampleRequest;
import com.jdcloud.sdk.service.monitor.model.LastDownsampleResponse;
import com.jdcloud.sdk.service.monitor.client.LastDownsampleExecutor;
import com.jdcloud.sdk.service.monitor.model.DescribeProductsForAlarmRequest;
import com.jdcloud.sdk.service.monitor.model.DescribeProductsForAlarmResponse;
import com.jdcloud.sdk.service.monitor.client.DescribeProductsForAlarmExecutor;
import com.jdcloud.sdk.service.monitor.model.UpdateAlarmRequest;
import com.jdcloud.sdk.service.monitor.model.UpdateAlarmResponse;
import com.jdcloud.sdk.service.monitor.client.UpdateAlarmExecutor;
import com.jdcloud.sdk.service.monitor.model.DescribeCustomMetricDataRequest;
import com.jdcloud.sdk.service.monitor.model.DescribeCustomMetricDataResponse;
import com.jdcloud.sdk.service.monitor.client.DescribeCustomMetricDataExecutor;
import com.jdcloud.sdk.service.monitor.model.EnableAlarmsRequest;
import com.jdcloud.sdk.service.monitor.model.EnableAlarmsResponse;
import com.jdcloud.sdk.service.monitor.client.EnableAlarmsExecutor;
import com.jdcloud.sdk.service.monitor.model.DescribeTagValuesRequest;
import com.jdcloud.sdk.service.monitor.model.DescribeTagValuesResponse;
import com.jdcloud.sdk.service.monitor.client.DescribeTagValuesExecutor;
import com.jdcloud.sdk.service.monitor.model.PutCustomMetricDataRequest;
import com.jdcloud.sdk.service.monitor.model.PutCustomMetricDataResponse;
import com.jdcloud.sdk.service.monitor.client.PutCustomMetricDataExecutor;
import com.jdcloud.sdk.service.monitor.model.PutMetricDataRequest;
import com.jdcloud.sdk.service.monitor.model.PutMetricDataResponse;
import com.jdcloud.sdk.service.monitor.client.PutMetricDataExecutor;
import com.jdcloud.sdk.service.monitor.model.DescribeAlarmsRequest;
import com.jdcloud.sdk.service.monitor.model.DescribeAlarmsResponse;
import com.jdcloud.sdk.service.monitor.client.DescribeAlarmsExecutor;
import com.jdcloud.sdk.service.monitor.model.DescribeMetricsRequest;
import com.jdcloud.sdk.service.monitor.model.DescribeMetricsResponse;
import com.jdcloud.sdk.service.monitor.client.DescribeMetricsExecutor;

/**
 * monitorClient
 */
public class MonitorClient extends JdcloudClient {

    public final static String ApiVersion = "v2";
    private final static String UserAgentPrefix = "JdcloudSdkJava";
    public final static String ClientVersion = "1.2.3";
    public final static String DefaultEndpoint = "monitor.jdcloud-api.com";
    public final static String ServiceName = "monitor";
    public final static String UserAgent = UserAgentPrefix + "/" + ClientVersion + " " + ServiceName + "/" + ApiVersion;

    CredentialsProvider credentialsProvider;
    HttpRequestConfig httpRequestConfig;
    Environment environment = new Environment.Builder().endpoint(DefaultEndpoint).build();

    public CredentialsProvider getCredentialsProvider() {
        return credentialsProvider;
    }

    public HttpRequestConfig getHttpRequestConfig() {
        return httpRequestConfig;
    }

    public Environment getEnvironment() {
        return environment;
    }

    public String getUserAgent() {
        return UserAgent;
    }

    public String getServiceName() {
        return ServiceName;
    }

    public String getVersion() {
        return ApiVersion;
    }

    private MonitorClient() {

    }

    public static Builder builder() {
        return new DefaultBuilder();
    }


    /**
     * 创建报警规则
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreateAlarmResponse createAlarm(CreateAlarmRequest request) throws JdcloudSdkException {
        return new CreateAlarmExecutor().client(this).execute(request);
    }

    /**
     * 查看某资源单个监控项数据，metric介绍：&lt;a href&#x3D;&quot;https://docs.jdcloud.com/cn/monitoring/metrics&quot;&gt;Metrics&lt;/a&gt;，可以使用接口&lt;a href&#x3D;&quot;https://docs.jdcloud.com/cn/monitoring/metrics&quot;&gt;describeMetrics&lt;/a&gt;：查询产品线可用的metric列表。
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeMetricDataResponse describeMetricData(DescribeMetricDataRequest request) throws JdcloudSdkException {
        return new DescribeMetricDataExecutor().client(this).execute(request);
    }

    /**
     * 查询监控图可用的产品线列表
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeServicesResponse describeServices(DescribeServicesRequest request) throws JdcloudSdkException {
        return new DescribeServicesExecutor().client(this).execute(request);
    }

    /**
     * 查询可用于创建监控规则的指标列表,metric介绍：&lt;a href&#x3D;&quot;https://docs.jdcloud.com/cn/monitoring/metrics&quot;&gt;Metrics&lt;/a&gt;
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeMetricsForAlarmResponse describeMetricsForAlarm(DescribeMetricsForAlarmRequest request) throws JdcloudSdkException {
        return new DescribeMetricsForAlarmExecutor().client(this).execute(request);
    }

    /**
     * 查询规则的报警联系人
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeAlarmContactsResponse describeAlarmContacts(DescribeAlarmContactsRequest request) throws JdcloudSdkException {
        return new DescribeAlarmContactsExecutor().client(this).execute(request);
    }

    /**
     * 查询报警历史
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeAlarmHistoryResponse describeAlarmHistory(DescribeAlarmHistoryRequest request) throws JdcloudSdkException {
        return new DescribeAlarmHistoryExecutor().client(this).execute(request);
    }

    /**
     * 查询规则详情
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeAlarmResponse describeAlarm(DescribeAlarmRequest request) throws JdcloudSdkException {
        return new DescribeAlarmExecutor().client(this).execute(request);
    }

    /**
     * 删除规则
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteAlarmsResponse deleteAlarms(DeleteAlarmsRequest request) throws JdcloudSdkException {
        return new DeleteAlarmsExecutor().client(this).execute(request);
    }

    /**
     * 根据不同的聚合方式将metric的数据聚合为一个点。downAggrType：last(最后一个点)、max(最大值)、min(最小值)、avg(平均值)。该接口返回值为上报metric的原始值，没有做单位转换。metric介绍：&lt;a href&#x3D;&quot;https://docs.jdcloud.com/cn/monitoring/metrics&quot;&gt;Metrics&lt;/a&gt;
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public LastDownsampleResponse lastDownsample(LastDownsampleRequest request) throws JdcloudSdkException {
        return new LastDownsampleExecutor().client(this).execute(request);
    }

    /**
     * 查询可用于创建监控规则的产品列表
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeProductsForAlarmResponse describeProductsForAlarm(DescribeProductsForAlarmRequest request) throws JdcloudSdkException {
        return new DescribeProductsForAlarmExecutor().client(this).execute(request);
    }

    /**
     * 修改已创建的报警规则
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public UpdateAlarmResponse updateAlarm(UpdateAlarmRequest request) throws JdcloudSdkException {
        return new UpdateAlarmExecutor().client(this).execute(request);
    }

    /**
     * 通过指定维度查询自定义监控的数据
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeCustomMetricDataResponse describeCustomMetricData(DescribeCustomMetricDataRequest request) throws JdcloudSdkException {
        return new DescribeCustomMetricDataExecutor().client(this).execute(request);
    }

    /**
     * 启用、禁用规则
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public EnableAlarmsResponse enableAlarms(EnableAlarmsRequest request) throws JdcloudSdkException {
        return new EnableAlarmsExecutor().client(this).execute(request);
    }

    /**
     * 查询某资源下指定tag key的tag value
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeTagValuesResponse describeTagValues(DescribeTagValuesRequest request) throws JdcloudSdkException {
        return new DescribeTagValuesExecutor().client(this).execute(request);
    }

    /**
     * 该接口为自定义监控数据上报的接口，方便您将自己采集的时序数据上报到云监控。不同region域名上报不同region的数据，参考：&lt;a href&#x3D;&quot;https://docs.jdcloud.com/cn/monitoring/reporting-monitoring-data&quot;&gt;调用说明&lt;/a&gt;可上报原始数据和已聚合的统计数据。支持批量上报方式。单次请求最多包含 50 个数据点；数据大小不超过 256k。
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public PutCustomMetricDataResponse putCustomMetricData(PutCustomMetricDataRequest request) throws JdcloudSdkException {
        return new PutCustomMetricDataExecutor().client(this).execute(request);
    }

    /**
     * 该接口为自定义监控数据上报的接口，方便您将自己采集的时序数据上报到云监控。不同region域名上报不同region的数据，参考：&lt;a href&#x3D;&quot;https://docs.jdcloud.com/cn/monitoring/reporting-monitoring-data&quot;&gt;调用说明&lt;/a&gt;可上报原始数据和已聚合的统计数据。支持批量上报方式。单次请求最多包含 50 个数据点；数据大小不超过 256k。
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public PutMetricDataResponse putMetricData(PutMetricDataRequest request) throws JdcloudSdkException {
        return new PutMetricDataExecutor().client(this).execute(request);
    }

    /**
     * 查询规则列表
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeAlarmsResponse describeAlarms(DescribeAlarmsRequest request) throws JdcloudSdkException {
        return new DescribeAlarmsExecutor().client(this).execute(request);
    }

    /**
     * 根据产品线查询可用监控项列表,metric介绍：&lt;a href&#x3D;&quot;https://docs.jdcloud.com/cn/monitoring/metrics&quot;&gt;Metrics&lt;/a&gt;
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeMetricsResponse describeMetrics(DescribeMetricsRequest request) throws JdcloudSdkException {
        return new DescribeMetricsExecutor().client(this).execute(request);
    }


    public interface Builder {
        public Builder credentialsProvider(CredentialsProvider provider);
        public Builder environment(Environment environment);
        public Builder httpRequestConfig(HttpRequestConfig config);
        public MonitorClient build() throws JdcloudSdkException;
    }

    private static class DefaultBuilder implements Builder {

        private MonitorClient monitorClient;

        public DefaultBuilder() {
            monitorClient = new MonitorClient();
        }

        public DefaultBuilder credentialsProvider(CredentialsProvider provider) {
            monitorClient.credentialsProvider = provider;
            return this;
        }

        public DefaultBuilder httpRequestConfig(HttpRequestConfig config) {
            monitorClient.httpRequestConfig = config;
            return this;
        }

        public MonitorClient build() throws JdcloudSdkException {

            if (monitorClient.credentialsProvider == null) {
                //if credentialsProvider not set, try load jdcloud global default  credentials provider
                monitorClient.credentialsProvider = Jdcloud.defaultInstance().getCredentialsProvider();
                if (monitorClient.credentialsProvider == null) {
                    throw new JdcloudValidateException("MonitorClient build error: jdcloud credentials provider not set");
                }
            }
            if (monitorClient.httpRequestConfig == null) {
                monitorClient.httpRequestConfig = Jdcloud.defaultInstance().getHttpRequestConfig();
                if (monitorClient.httpRequestConfig == null) {
                    throw new JdcloudValidateException("MonitorClient build error: http request config not set");
                }
            }
            return monitorClient;
        }

        public Builder environment(Environment environment) {
            monitorClient.environment = environment;
            return this;
        }
    }
}
