/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * 
 *
 * 
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.fc.model;

import java.util.List;
import java.util.ArrayList;
import com.jdcloud.sdk.annotation.Required;

/**
 * 指定的创建 function 参数
 */
public class InternalFunctionSpec  implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 服务名称，不可为空，只支持中文、数字、大小写字母、英文下划线“_”及中划线“-”，且不能超过32字符
     * Required:true
     */
    @Required
    private String functionName;

    /**
     * 函数代码
     * Required:true
     */
    @Required
    private InternalCode code;

    /**
     * 函数运行的超时时间，单位为秒，默认为60，取值范围为1-900；。函数超过这个时间后会被终止执行。
     */
    private Integer timeout;

    /**
     * 函数运行的语言环境，目前支持nodejs16。
     * Required:true
     */
    @Required
    private String runtime;

    /**
     * 函数执行的入口，具体格式和语言相关。
     * Required:true
     */
    @Required
    private String handler;

    /**
     * 描述信息，默认为空；允许输入UTF-8编码下的全部字符，不超过256字符。
     */
    private String description;

    /**
     * 容器执行的环境变量；如果和使用中的环境变量Key相同，会覆镜像, 不能和镜像环境变量的key相同；&lt;/br&gt; 最大50对
     */
    
    private List<Environment> envs;
    /**
     * vCPU：单位为核，默认选中1，支持选择0.15、0.75、1
     */
    private Number cpu;

    /**
     * 内存：单位为MB，默认选中1024，与vCPU联动：vCPU选择0.15时，内存仅支持选择0.25* 1024，vCPU选择0.75时，内存仅支持选择1*1024｜
     */
    private Integer memorySize;

    /**
     * 硬盘：单位为MB，默认选中0.5*1024，支持选择0.5 * 1024
     */
    private Integer diskSize;



    /**
     * get 服务名称，不可为空，只支持中文、数字、大小写字母、英文下划线“_”及中划线“-”，且不能超过32字符
     *
     * @return
     */
    public String getFunctionName() {
        return functionName;
    }

    /**
     * set 服务名称，不可为空，只支持中文、数字、大小写字母、英文下划线“_”及中划线“-”，且不能超过32字符
     *
     * @param functionName
     */
    public void setFunctionName(String functionName) {
        this.functionName = functionName;
    }


    /**
     * get 函数代码
     *
     * @return
     */
    public InternalCode getCode() {
        return code;
    }

    /**
     * set 函数代码
     *
     * @param code
     */
    public void setCode(InternalCode code) {
        this.code = code;
    }


    /**
     * get 函数运行的超时时间，单位为秒，默认为60，取值范围为1-900；。函数超过这个时间后会被终止执行。
     *
     * @return
     */
    public Integer getTimeout() {
        return timeout;
    }

    /**
     * set 函数运行的超时时间，单位为秒，默认为60，取值范围为1-900；。函数超过这个时间后会被终止执行。
     *
     * @param timeout
     */
    public void setTimeout(Integer timeout) {
        this.timeout = timeout;
    }


    /**
     * get 函数运行的语言环境，目前支持nodejs16。
     *
     * @return
     */
    public String getRuntime() {
        return runtime;
    }

    /**
     * set 函数运行的语言环境，目前支持nodejs16。
     *
     * @param runtime
     */
    public void setRuntime(String runtime) {
        this.runtime = runtime;
    }


    /**
     * get 函数执行的入口，具体格式和语言相关。
     *
     * @return
     */
    public String getHandler() {
        return handler;
    }

    /**
     * set 函数执行的入口，具体格式和语言相关。
     *
     * @param handler
     */
    public void setHandler(String handler) {
        this.handler = handler;
    }


    /**
     * get 描述信息，默认为空；允许输入UTF-8编码下的全部字符，不超过256字符。
     *
     * @return
     */
    public String getDescription() {
        return description;
    }

    /**
     * set 描述信息，默认为空；允许输入UTF-8编码下的全部字符，不超过256字符。
     *
     * @param description
     */
    public void setDescription(String description) {
        this.description = description;
    }


    /**
    * get 容器执行的环境变量；如果和使用中的环境变量Key相同，会覆镜像, 不能和镜像环境变量的key相同；&lt;/br&gt; 最大50对
    *
    * @return
    */
    public List<Environment> getEnvs() {
        return envs;
    }

    /**
    * set 容器执行的环境变量；如果和使用中的环境变量Key相同，会覆镜像, 不能和镜像环境变量的key相同；&lt;/br&gt; 最大50对
    *
    * @param envs
    */
    public void setEnvs(List<Environment> envs) {
        this.envs = envs;
    }


    /**
     * get vCPU：单位为核，默认选中1，支持选择0.15、0.75、1
     *
     * @return
     */
    public Number getCpu() {
        return cpu;
    }

    /**
     * set vCPU：单位为核，默认选中1，支持选择0.15、0.75、1
     *
     * @param cpu
     */
    public void setCpu(Number cpu) {
        this.cpu = cpu;
    }


    /**
     * get 内存：单位为MB，默认选中1024，与vCPU联动：vCPU选择0.15时，内存仅支持选择0.25* 1024，vCPU选择0.75时，内存仅支持选择1*1024｜
     *
     * @return
     */
    public Integer getMemorySize() {
        return memorySize;
    }

    /**
     * set 内存：单位为MB，默认选中1024，与vCPU联动：vCPU选择0.15时，内存仅支持选择0.25* 1024，vCPU选择0.75时，内存仅支持选择1*1024｜
     *
     * @param memorySize
     */
    public void setMemorySize(Integer memorySize) {
        this.memorySize = memorySize;
    }


    /**
     * get 硬盘：单位为MB，默认选中0.5*1024，支持选择0.5 * 1024
     *
     * @return
     */
    public Integer getDiskSize() {
        return diskSize;
    }

    /**
     * set 硬盘：单位为MB，默认选中0.5*1024，支持选择0.5 * 1024
     *
     * @param diskSize
     */
    public void setDiskSize(Integer diskSize) {
        this.diskSize = diskSize;
    }



    /**
     * set 服务名称，不可为空，只支持中文、数字、大小写字母、英文下划线“_”及中划线“-”，且不能超过32字符
     *
     * @param functionName
     */
    public InternalFunctionSpec functionName(String functionName) {
        this.functionName = functionName;
        return this;
    }


    /**
     * set 函数代码
     *
     * @param code
     */
    public InternalFunctionSpec code(InternalCode code) {
        this.code = code;
        return this;
    }


    /**
     * set 函数运行的超时时间，单位为秒，默认为60，取值范围为1-900；。函数超过这个时间后会被终止执行。
     *
     * @param timeout
     */
    public InternalFunctionSpec timeout(Integer timeout) {
        this.timeout = timeout;
        return this;
    }


    /**
     * set 函数运行的语言环境，目前支持nodejs16。
     *
     * @param runtime
     */
    public InternalFunctionSpec runtime(String runtime) {
        this.runtime = runtime;
        return this;
    }


    /**
     * set 函数执行的入口，具体格式和语言相关。
     *
     * @param handler
     */
    public InternalFunctionSpec handler(String handler) {
        this.handler = handler;
        return this;
    }


    /**
     * set 描述信息，默认为空；允许输入UTF-8编码下的全部字符，不超过256字符。
     *
     * @param description
     */
    public InternalFunctionSpec description(String description) {
        this.description = description;
        return this;
    }


    /**
    * set 容器执行的环境变量；如果和使用中的环境变量Key相同，会覆镜像, 不能和镜像环境变量的key相同；&lt;/br&gt; 最大50对
    *
    * @param envs
    */
    public InternalFunctionSpec envs(List<Environment> envs) {
        this.envs = envs;
        return this;
    }


    /**
     * set vCPU：单位为核，默认选中1，支持选择0.15、0.75、1
     *
     * @param cpu
     */
    public InternalFunctionSpec cpu(Number cpu) {
        this.cpu = cpu;
        return this;
    }


    /**
     * set 内存：单位为MB，默认选中1024，与vCPU联动：vCPU选择0.15时，内存仅支持选择0.25* 1024，vCPU选择0.75时，内存仅支持选择1*1024｜
     *
     * @param memorySize
     */
    public InternalFunctionSpec memorySize(Integer memorySize) {
        this.memorySize = memorySize;
        return this;
    }


    /**
     * set 硬盘：单位为MB，默认选中0.5*1024，支持选择0.5 * 1024
     *
     * @param diskSize
     */
    public InternalFunctionSpec diskSize(Integer diskSize) {
        this.diskSize = diskSize;
        return this;
    }



    /**
     * add item to 容器执行的环境变量；如果和使用中的环境变量Key相同，会覆镜像, 不能和镜像环境变量的key相同；&lt;/br&gt; 最大50对
     *
     * @param env
     */
    public void addEnv(Environment env) {
        if (this.envs == null) {
            this.envs = new ArrayList<>();
        }
        this.envs.add(env);
    }
}