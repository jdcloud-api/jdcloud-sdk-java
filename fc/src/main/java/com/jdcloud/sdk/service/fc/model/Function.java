/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * 
 *
 * 
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.fc.model;

import java.util.List;
import java.util.ArrayList;

/**
 * service 详情
 */
public class Function  implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 函数 ID
     */
    private String functionId;

    /**
     * 函数 名称
     */
    private String functionName;

    /**
     * 服务 ID
     */
    private String serviceId;

    /**
     * 服务 名称
     */
    private String serviceName;

    /**
     * 部署包的 sha256 hash
     */
    private String checkSum;

    /**
     * 部署包的大小 Bytes
     */
    private Integer codeSize;

    /**
     * 描述信息。
     */
    private String description;

    /**
     * 环境变量配置。
     */
    
    private List<Environment> envs;
    /**
     * 函数运行的语言环境。
     */
    private String runtime;

    /**
     * 函数运行的超时时间，单位为秒。
     */
    private Integer timeout;

    /**
     * 函数执行的入口，具体格式和语言相关。
     */
    private String handler;

    /**
     * vCPU：单位为核。
     */
    private Number cpu;

    /**
     * 内存：单位为MB。
     */
    private Integer memorySize;

    /**
     * 硬盘：单位为MB。
     */
    private Integer diskSize;

    /**
     * 函数调用统计次数
     */
    private Integer invocationCount;

    /**
     * 函数创建时间
     */
    private String createTime;

    /**
     * 函数更新时间
     */
    private String updateTime;

    /**
     * 函数状态，Pending, Failed, Active
     */
    private String status;



    /**
     * get 函数 ID
     *
     * @return
     */
    public String getFunctionId() {
        return functionId;
    }

    /**
     * set 函数 ID
     *
     * @param functionId
     */
    public void setFunctionId(String functionId) {
        this.functionId = functionId;
    }


    /**
     * get 函数 名称
     *
     * @return
     */
    public String getFunctionName() {
        return functionName;
    }

    /**
     * set 函数 名称
     *
     * @param functionName
     */
    public void setFunctionName(String functionName) {
        this.functionName = functionName;
    }


    /**
     * get 服务 ID
     *
     * @return
     */
    public String getServiceId() {
        return serviceId;
    }

    /**
     * set 服务 ID
     *
     * @param serviceId
     */
    public void setServiceId(String serviceId) {
        this.serviceId = serviceId;
    }


    /**
     * get 服务 名称
     *
     * @return
     */
    public String getServiceName() {
        return serviceName;
    }

    /**
     * set 服务 名称
     *
     * @param serviceName
     */
    public void setServiceName(String serviceName) {
        this.serviceName = serviceName;
    }


    /**
     * get 部署包的 sha256 hash
     *
     * @return
     */
    public String getCheckSum() {
        return checkSum;
    }

    /**
     * set 部署包的 sha256 hash
     *
     * @param checkSum
     */
    public void setCheckSum(String checkSum) {
        this.checkSum = checkSum;
    }


    /**
     * get 部署包的大小 Bytes
     *
     * @return
     */
    public Integer getCodeSize() {
        return codeSize;
    }

    /**
     * set 部署包的大小 Bytes
     *
     * @param codeSize
     */
    public void setCodeSize(Integer codeSize) {
        this.codeSize = codeSize;
    }


    /**
     * get 描述信息。
     *
     * @return
     */
    public String getDescription() {
        return description;
    }

    /**
     * set 描述信息。
     *
     * @param description
     */
    public void setDescription(String description) {
        this.description = description;
    }


    /**
    * get 环境变量配置。
    *
    * @return
    */
    public List<Environment> getEnvs() {
        return envs;
    }

    /**
    * set 环境变量配置。
    *
    * @param envs
    */
    public void setEnvs(List<Environment> envs) {
        this.envs = envs;
    }


    /**
     * get 函数运行的语言环境。
     *
     * @return
     */
    public String getRuntime() {
        return runtime;
    }

    /**
     * set 函数运行的语言环境。
     *
     * @param runtime
     */
    public void setRuntime(String runtime) {
        this.runtime = runtime;
    }


    /**
     * get 函数运行的超时时间，单位为秒。
     *
     * @return
     */
    public Integer getTimeout() {
        return timeout;
    }

    /**
     * set 函数运行的超时时间，单位为秒。
     *
     * @param timeout
     */
    public void setTimeout(Integer timeout) {
        this.timeout = timeout;
    }


    /**
     * get 函数执行的入口，具体格式和语言相关。
     *
     * @return
     */
    public String getHandler() {
        return handler;
    }

    /**
     * set 函数执行的入口，具体格式和语言相关。
     *
     * @param handler
     */
    public void setHandler(String handler) {
        this.handler = handler;
    }


    /**
     * get vCPU：单位为核。
     *
     * @return
     */
    public Number getCpu() {
        return cpu;
    }

    /**
     * set vCPU：单位为核。
     *
     * @param cpu
     */
    public void setCpu(Number cpu) {
        this.cpu = cpu;
    }


    /**
     * get 内存：单位为MB。
     *
     * @return
     */
    public Integer getMemorySize() {
        return memorySize;
    }

    /**
     * set 内存：单位为MB。
     *
     * @param memorySize
     */
    public void setMemorySize(Integer memorySize) {
        this.memorySize = memorySize;
    }


    /**
     * get 硬盘：单位为MB。
     *
     * @return
     */
    public Integer getDiskSize() {
        return diskSize;
    }

    /**
     * set 硬盘：单位为MB。
     *
     * @param diskSize
     */
    public void setDiskSize(Integer diskSize) {
        this.diskSize = diskSize;
    }


    /**
     * get 函数调用统计次数
     *
     * @return
     */
    public Integer getInvocationCount() {
        return invocationCount;
    }

    /**
     * set 函数调用统计次数
     *
     * @param invocationCount
     */
    public void setInvocationCount(Integer invocationCount) {
        this.invocationCount = invocationCount;
    }


    /**
     * get 函数创建时间
     *
     * @return
     */
    public String getCreateTime() {
        return createTime;
    }

    /**
     * set 函数创建时间
     *
     * @param createTime
     */
    public void setCreateTime(String createTime) {
        this.createTime = createTime;
    }


    /**
     * get 函数更新时间
     *
     * @return
     */
    public String getUpdateTime() {
        return updateTime;
    }

    /**
     * set 函数更新时间
     *
     * @param updateTime
     */
    public void setUpdateTime(String updateTime) {
        this.updateTime = updateTime;
    }


    /**
     * get 函数状态，Pending, Failed, Active
     *
     * @return
     */
    public String getStatus() {
        return status;
    }

    /**
     * set 函数状态，Pending, Failed, Active
     *
     * @param status
     */
    public void setStatus(String status) {
        this.status = status;
    }



    /**
     * set 函数 ID
     *
     * @param functionId
     */
    public Function functionId(String functionId) {
        this.functionId = functionId;
        return this;
    }


    /**
     * set 函数 名称
     *
     * @param functionName
     */
    public Function functionName(String functionName) {
        this.functionName = functionName;
        return this;
    }


    /**
     * set 服务 ID
     *
     * @param serviceId
     */
    public Function serviceId(String serviceId) {
        this.serviceId = serviceId;
        return this;
    }


    /**
     * set 服务 名称
     *
     * @param serviceName
     */
    public Function serviceName(String serviceName) {
        this.serviceName = serviceName;
        return this;
    }


    /**
     * set 部署包的 sha256 hash
     *
     * @param checkSum
     */
    public Function checkSum(String checkSum) {
        this.checkSum = checkSum;
        return this;
    }


    /**
     * set 部署包的大小 Bytes
     *
     * @param codeSize
     */
    public Function codeSize(Integer codeSize) {
        this.codeSize = codeSize;
        return this;
    }


    /**
     * set 描述信息。
     *
     * @param description
     */
    public Function description(String description) {
        this.description = description;
        return this;
    }


    /**
    * set 环境变量配置。
    *
    * @param envs
    */
    public Function envs(List<Environment> envs) {
        this.envs = envs;
        return this;
    }


    /**
     * set 函数运行的语言环境。
     *
     * @param runtime
     */
    public Function runtime(String runtime) {
        this.runtime = runtime;
        return this;
    }


    /**
     * set 函数运行的超时时间，单位为秒。
     *
     * @param timeout
     */
    public Function timeout(Integer timeout) {
        this.timeout = timeout;
        return this;
    }


    /**
     * set 函数执行的入口，具体格式和语言相关。
     *
     * @param handler
     */
    public Function handler(String handler) {
        this.handler = handler;
        return this;
    }


    /**
     * set vCPU：单位为核。
     *
     * @param cpu
     */
    public Function cpu(Number cpu) {
        this.cpu = cpu;
        return this;
    }


    /**
     * set 内存：单位为MB。
     *
     * @param memorySize
     */
    public Function memorySize(Integer memorySize) {
        this.memorySize = memorySize;
        return this;
    }


    /**
     * set 硬盘：单位为MB。
     *
     * @param diskSize
     */
    public Function diskSize(Integer diskSize) {
        this.diskSize = diskSize;
        return this;
    }


    /**
     * set 函数调用统计次数
     *
     * @param invocationCount
     */
    public Function invocationCount(Integer invocationCount) {
        this.invocationCount = invocationCount;
        return this;
    }


    /**
     * set 函数创建时间
     *
     * @param createTime
     */
    public Function createTime(String createTime) {
        this.createTime = createTime;
        return this;
    }


    /**
     * set 函数更新时间
     *
     * @param updateTime
     */
    public Function updateTime(String updateTime) {
        this.updateTime = updateTime;
        return this;
    }


    /**
     * set 函数状态，Pending, Failed, Active
     *
     * @param status
     */
    public Function status(String status) {
        this.status = status;
        return this;
    }



    /**
     * add item to 环境变量配置。
     *
     * @param env
     */
    public void addEnv(Environment env) {
        if (this.envs == null) {
            this.envs = new ArrayList<>();
        }
        this.envs.add(env);
    }
}