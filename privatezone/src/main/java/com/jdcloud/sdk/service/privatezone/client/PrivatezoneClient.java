/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 京东云私有域名解析OpenAPI接口
 * 京东云私有域名解析OpenAPI接口
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.privatezone.client;

import com.jdcloud.sdk.JdcloudSdkException;
import com.jdcloud.sdk.auth.CredentialsProvider;
import com.jdcloud.sdk.client.Environment;
import com.jdcloud.sdk.client.Jdcloud;
import com.jdcloud.sdk.client.JdcloudClient;
import com.jdcloud.sdk.client.JdcloudValidateException;
import com.jdcloud.sdk.http.HttpRequestConfig;
import com.jdcloud.sdk.service.privatezone.model.DescribeActionLogsRequest;
import com.jdcloud.sdk.service.privatezone.model.DescribeActionLogsResponse;
import com.jdcloud.sdk.service.privatezone.client.DescribeActionLogsExecutor;
import com.jdcloud.sdk.service.privatezone.model.ExportResourceRecordsRequest;
import com.jdcloud.sdk.service.privatezone.model.ExportResourceRecordsResponse;
import com.jdcloud.sdk.service.privatezone.client.ExportResourceRecordsExecutor;
import com.jdcloud.sdk.service.privatezone.model.ImportResourceRecordsRequest;
import com.jdcloud.sdk.service.privatezone.model.ImportResourceRecordsResponse;
import com.jdcloud.sdk.service.privatezone.client.ImportResourceRecordsExecutor;
import com.jdcloud.sdk.service.privatezone.model.ZoneResolveCountRequest;
import com.jdcloud.sdk.service.privatezone.model.ZoneResolveCountResponse;
import com.jdcloud.sdk.service.privatezone.client.ZoneResolveCountExecutor;
import com.jdcloud.sdk.service.privatezone.model.DescribeInstancesRequest;
import com.jdcloud.sdk.service.privatezone.model.DescribeInstancesResponse;
import com.jdcloud.sdk.service.privatezone.client.DescribeInstancesExecutor;
import com.jdcloud.sdk.service.privatezone.model.DescribeResourceRecordsRequest;
import com.jdcloud.sdk.service.privatezone.model.DescribeResourceRecordsResponse;
import com.jdcloud.sdk.service.privatezone.client.DescribeResourceRecordsExecutor;
import com.jdcloud.sdk.service.privatezone.model.DescribeZonesRequest;
import com.jdcloud.sdk.service.privatezone.model.DescribeZonesResponse;
import com.jdcloud.sdk.service.privatezone.client.DescribeZonesExecutor;
import com.jdcloud.sdk.service.privatezone.model.BindVpcRequest;
import com.jdcloud.sdk.service.privatezone.model.BindVpcResponse;
import com.jdcloud.sdk.service.privatezone.client.BindVpcExecutor;
import com.jdcloud.sdk.service.privatezone.model.CreateZoneRequest;
import com.jdcloud.sdk.service.privatezone.model.CreateZoneResponse;
import com.jdcloud.sdk.service.privatezone.client.CreateZoneExecutor;
import com.jdcloud.sdk.service.privatezone.model.DeleteZoneRequest;
import com.jdcloud.sdk.service.privatezone.model.DeleteZoneResponse;
import com.jdcloud.sdk.service.privatezone.client.DeleteZoneExecutor;
import com.jdcloud.sdk.service.privatezone.model.CreateResourceRecordRequest;
import com.jdcloud.sdk.service.privatezone.model.CreateResourceRecordResponse;
import com.jdcloud.sdk.service.privatezone.client.CreateResourceRecordExecutor;
import com.jdcloud.sdk.service.privatezone.model.RetryRecurseRequest;
import com.jdcloud.sdk.service.privatezone.model.RetryRecurseResponse;
import com.jdcloud.sdk.service.privatezone.client.RetryRecurseExecutor;
import com.jdcloud.sdk.service.privatezone.model.SetResourceRecordsStatusRequest;
import com.jdcloud.sdk.service.privatezone.model.SetResourceRecordsStatusResponse;
import com.jdcloud.sdk.service.privatezone.client.SetResourceRecordsStatusExecutor;
import com.jdcloud.sdk.service.privatezone.model.ModifyResourceRecordRequest;
import com.jdcloud.sdk.service.privatezone.model.ModifyResourceRecordResponse;
import com.jdcloud.sdk.service.privatezone.client.ModifyResourceRecordExecutor;
import com.jdcloud.sdk.service.privatezone.model.DeleteResourceRecordsRequest;
import com.jdcloud.sdk.service.privatezone.model.DeleteResourceRecordsResponse;
import com.jdcloud.sdk.service.privatezone.client.DeleteResourceRecordsExecutor;
import com.jdcloud.sdk.service.privatezone.model.ZoneFlowCountRequest;
import com.jdcloud.sdk.service.privatezone.model.ZoneFlowCountResponse;
import com.jdcloud.sdk.service.privatezone.client.ZoneFlowCountExecutor;

/**
 * privatezoneClient
 */
public class PrivatezoneClient extends JdcloudClient {

    public final static String ApiVersion = "v1";
    private final static String UserAgentPrefix = "JdcloudSdkJava";
    public final static String ClientVersion = "1.2.4";
    public final static String DefaultEndpoint = "privatezone.jdcloud-api.com";
    public final static String ServiceName = "privatezone";
    public final static String UserAgent = UserAgentPrefix + "/" + ClientVersion + " " + ServiceName + "/" + ApiVersion;

    CredentialsProvider credentialsProvider;
    HttpRequestConfig httpRequestConfig;
    Environment environment = new Environment.Builder().endpoint(DefaultEndpoint).build();

    public CredentialsProvider getCredentialsProvider() {
        return credentialsProvider;
    }

    public HttpRequestConfig getHttpRequestConfig() {
        return httpRequestConfig;
    }

    public Environment getEnvironment() {
        return environment;
    }

    public String getUserAgent() {
        return UserAgent;
    }

    public String getServiceName() {
        return ServiceName;
    }

    public String getVersion() {
        return ApiVersion;
    }

    private PrivatezoneClient() {

    }

    public static Builder builder() {
        return new DefaultBuilder();
    }


    /**
     * 查询操作日志

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeActionLogsResponse describeActionLogs(DescribeActionLogsRequest request) throws JdcloudSdkException {
        return new DescribeActionLogsExecutor().client(this).execute(request);
    }

    /**
     * 导出当前zone下所有解析记录，返回的数据是可以转换为csv文件格式的字符串

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ExportResourceRecordsResponse exportResourceRecords(ExportResourceRecordsRequest request) throws JdcloudSdkException {
        return new ExportResourceRecordsExecutor().client(this).execute(request);
    }

    /**
     * 批量导入解析记录，批量导入每次不可超过100条记录

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ImportResourceRecordsResponse importResourceRecords(ImportResourceRecordsRequest request) throws JdcloudSdkException {
        return new ImportResourceRecordsExecutor().client(this).execute(request);
    }

    /**
     * 统计zone的解析量

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ZoneResolveCountResponse zoneResolveCount(ZoneResolveCountRequest request) throws JdcloudSdkException {
        return new ZoneResolveCountExecutor().client(this).execute(request);
    }

    /**
     * 查询实例信息

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeInstancesResponse describeInstances(DescribeInstancesRequest request) throws JdcloudSdkException {
        return new DescribeInstancesExecutor().client(this).execute(request);
    }

    /**
     * 查询解析记录

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeResourceRecordsResponse describeResourceRecords(DescribeResourceRecordsRequest request) throws JdcloudSdkException {
        return new DescribeResourceRecordsExecutor().client(this).execute(request);
    }

    /**
     * 查询私有解析zone列表

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeZonesResponse describeZones(DescribeZonesRequest request) throws JdcloudSdkException {
        return new DescribeZonesExecutor().client(this).execute(request);
    }

    /**
     * 绑定vpc
- vpc信息为空时，会将之前的绑定关系全部解除
- 该接口为覆盖类的接口，请将需要的vpc全部进行绑定

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public BindVpcResponse bindVpc(BindVpcRequest request) throws JdcloudSdkException {
        return new BindVpcExecutor().client(this).execute(request);
    }

    /**
     * - 添加一个私有解析的zone，可添加以下三种类型的zone
- 云内全局zone：zone的后缀是指定的后缀，如：local。该域名在云内自动全局生效，不用关联vpc即可在vpc内解析，该类型全局唯一，不能重复添加
- 反向解析zone：zone的后缀是in-addr.arpa时，我们认为他是一个反向解析的zone，反向解析域名前缀目前支持10/172.16-31/192.168网段，如：10.in-addr.arpa、16.172.in-addr.arpa。反向解析的zone只能添加反向解析的记录
- 私有解析zone：该类型的zone可以时任意符合格式的域名，私有解析zone需要关联vpc后，在vpc内生效解析

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreateZoneResponse createZone(CreateZoneRequest request) throws JdcloudSdkException {
        return new CreateZoneExecutor().client(this).execute(request);
    }

    /**
     * 删除zone，该zone下的解析记录和绑定的vpc关联关系将会被删除

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteZoneResponse deleteZone(DeleteZoneRequest request) throws JdcloudSdkException {
        return new DeleteZoneExecutor().client(this).execute(request);
    }

    /**
     * 创建解析记录

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreateResourceRecordResponse createResourceRecord(CreateResourceRecordRequest request) throws JdcloudSdkException {
        return new CreateResourceRecordExecutor().client(this).execute(request);
    }

    /**
     * 解析失败后，尝试递归解析开关

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public RetryRecurseResponse retryRecurse(RetryRecurseRequest request) throws JdcloudSdkException {
        return new RetryRecurseExecutor().client(this).execute(request);
    }

    /**
     * 设置解析记录状态，STOP操作会将停止该记录的解析，直到再次START。批量设置时多个resourceRecordId用&quot;,&quot;分隔。批量设置时每次最多不超过100个记录

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public SetResourceRecordsStatusResponse setResourceRecordsStatus(SetResourceRecordsStatusRequest request) throws JdcloudSdkException {
        return new SetResourceRecordsStatusExecutor().client(this).execute(request);
    }

    /**
     * 修改解析记录

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ModifyResourceRecordResponse modifyResourceRecord(ModifyResourceRecordRequest request) throws JdcloudSdkException {
        return new ModifyResourceRecordExecutor().client(this).execute(request);
    }

    /**
     * 删除解析记录。批量删除时多个resourceRecordId用&quot;,&quot;分隔。批量删除每次最多不超过100个记录

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteResourceRecordsResponse deleteResourceRecords(DeleteResourceRecordsRequest request) throws JdcloudSdkException {
        return new DeleteResourceRecordsExecutor().client(this).execute(request);
    }

    /**
     * 统计zone的流量

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ZoneFlowCountResponse zoneFlowCount(ZoneFlowCountRequest request) throws JdcloudSdkException {
        return new ZoneFlowCountExecutor().client(this).execute(request);
    }


    public interface Builder {
        public Builder credentialsProvider(CredentialsProvider provider);
        public Builder environment(Environment environment);
        public Builder httpRequestConfig(HttpRequestConfig config);
        public PrivatezoneClient build() throws JdcloudSdkException;
    }

    private static class DefaultBuilder implements Builder {

        private PrivatezoneClient privatezoneClient;

        public DefaultBuilder() {
            privatezoneClient = new PrivatezoneClient();
        }

        public DefaultBuilder credentialsProvider(CredentialsProvider provider) {
            privatezoneClient.credentialsProvider = provider;
            return this;
        }

        public DefaultBuilder httpRequestConfig(HttpRequestConfig config) {
            privatezoneClient.httpRequestConfig = config;
            return this;
        }

        public PrivatezoneClient build() throws JdcloudSdkException {

            if (privatezoneClient.credentialsProvider == null) {
                //if credentialsProvider not set, try load jdcloud global default  credentials provider
                privatezoneClient.credentialsProvider = Jdcloud.defaultInstance().getCredentialsProvider();
                if (privatezoneClient.credentialsProvider == null) {
                    throw new JdcloudValidateException("PrivatezoneClient build error: jdcloud credentials provider not set");
                }
            }
            if (privatezoneClient.httpRequestConfig == null) {
                privatezoneClient.httpRequestConfig = Jdcloud.defaultInstance().getHttpRequestConfig();
                if (privatezoneClient.httpRequestConfig == null) {
                    throw new JdcloudValidateException("PrivatezoneClient build error: http request config not set");
                }
            }
            return privatezoneClient;
        }

        public Builder environment(Environment environment) {
            privatezoneClient.environment = environment;
            return this;
        }
    }
}
