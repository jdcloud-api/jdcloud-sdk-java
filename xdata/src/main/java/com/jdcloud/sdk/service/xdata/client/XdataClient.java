/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 数据计算服务API
 * 数据计算服务相关API
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.xdata.client;

import com.jdcloud.sdk.JdcloudSdkException;
import com.jdcloud.sdk.auth.CredentialsProvider;
import com.jdcloud.sdk.client.Environment;
import com.jdcloud.sdk.client.Jdcloud;
import com.jdcloud.sdk.client.JdcloudClient;
import com.jdcloud.sdk.client.JdcloudValidateException;
import com.jdcloud.sdk.http.HttpRequestConfig;
import com.jdcloud.sdk.service.xdata.model.ExecutePySparkQueryRequest;
import com.jdcloud.sdk.service.xdata.model.ExecutePySparkQueryResponse;
import com.jdcloud.sdk.service.xdata.client.ExecutePySparkQueryExecutor;
import com.jdcloud.sdk.service.xdata.model.ListTableInfoRequest;
import com.jdcloud.sdk.service.xdata.model.ListTableInfoResponse;
import com.jdcloud.sdk.service.xdata.client.ListTableInfoExecutor;
import com.jdcloud.sdk.service.xdata.model.ListDatabaseInfoRequest;
import com.jdcloud.sdk.service.xdata.model.ListDatabaseInfoResponse;
import com.jdcloud.sdk.service.xdata.client.ListDatabaseInfoExecutor;
import com.jdcloud.sdk.service.xdata.model.DeleteDatabaseRequest;
import com.jdcloud.sdk.service.xdata.model.DeleteDatabaseResponse;
import com.jdcloud.sdk.service.xdata.client.DeleteDatabaseExecutor;
import com.jdcloud.sdk.service.xdata.model.CreateDatabaseRequest;
import com.jdcloud.sdk.service.xdata.model.CreateDatabaseResponse;
import com.jdcloud.sdk.service.xdata.client.CreateDatabaseExecutor;
import com.jdcloud.sdk.service.xdata.model.GetPySparkExecuteResultRequest;
import com.jdcloud.sdk.service.xdata.model.GetPySparkExecuteResultResponse;
import com.jdcloud.sdk.service.xdata.client.GetPySparkExecuteResultExecutor;
import com.jdcloud.sdk.service.xdata.model.ListInstanceInfoRequest;
import com.jdcloud.sdk.service.xdata.model.ListInstanceInfoResponse;
import com.jdcloud.sdk.service.xdata.client.ListInstanceInfoExecutor;
import com.jdcloud.sdk.service.xdata.model.GetRasQueryLogRequest;
import com.jdcloud.sdk.service.xdata.model.GetRasQueryLogResponse;
import com.jdcloud.sdk.service.xdata.client.GetRasQueryLogExecutor;
import com.jdcloud.sdk.service.xdata.model.ExecuteRasQueryRequest;
import com.jdcloud.sdk.service.xdata.model.ExecuteRasQueryResponse;
import com.jdcloud.sdk.service.xdata.client.ExecuteRasQueryExecutor;
import com.jdcloud.sdk.service.xdata.model.GetTableInfoRequest;
import com.jdcloud.sdk.service.xdata.model.GetTableInfoResponse;
import com.jdcloud.sdk.service.xdata.client.GetTableInfoExecutor;
import com.jdcloud.sdk.service.xdata.model.DeleteTableRequest;
import com.jdcloud.sdk.service.xdata.model.DeleteTableResponse;
import com.jdcloud.sdk.service.xdata.client.DeleteTableExecutor;
import com.jdcloud.sdk.service.xdata.model.GetRasQueryResultRequest;
import com.jdcloud.sdk.service.xdata.model.GetRasQueryResultResponse;
import com.jdcloud.sdk.service.xdata.client.GetRasQueryResultExecutor;
import com.jdcloud.sdk.service.xdata.model.CancelPySparkJobRequest;
import com.jdcloud.sdk.service.xdata.model.CancelPySparkJobResponse;
import com.jdcloud.sdk.service.xdata.client.CancelPySparkJobExecutor;
import com.jdcloud.sdk.service.xdata.model.CancelRasQueryRequest;
import com.jdcloud.sdk.service.xdata.model.CancelRasQueryResponse;
import com.jdcloud.sdk.service.xdata.client.CancelRasQueryExecutor;
import com.jdcloud.sdk.service.xdata.model.GetPySparkExecuteStateRequest;
import com.jdcloud.sdk.service.xdata.model.GetPySparkExecuteStateResponse;
import com.jdcloud.sdk.service.xdata.client.GetPySparkExecuteStateExecutor;
import com.jdcloud.sdk.service.xdata.model.GetDatabaseInfoRequest;
import com.jdcloud.sdk.service.xdata.model.GetDatabaseInfoResponse;
import com.jdcloud.sdk.service.xdata.client.GetDatabaseInfoExecutor;
import com.jdcloud.sdk.service.xdata.model.CreateTableRequest;
import com.jdcloud.sdk.service.xdata.model.CreateTableResponse;
import com.jdcloud.sdk.service.xdata.client.CreateTableExecutor;
import com.jdcloud.sdk.service.xdata.model.GetRasQueryStateRequest;
import com.jdcloud.sdk.service.xdata.model.GetRasQueryStateResponse;
import com.jdcloud.sdk.service.xdata.client.GetRasQueryStateExecutor;

/**
 * xdataClient
 */
public class XdataClient extends JdcloudClient {

    public final static String ApiVersion = "v1";
    private final static String UserAgentPrefix = "JdcloudSdkJava";
    public final static String ClientVersion = "1.0.1";
    public final static String DefaultEndpoint = "xdata.jdcloud-api.com";
    public final static String ServiceName = "xdata";
    public final static String UserAgent = UserAgentPrefix + "/" + ClientVersion + " " + ServiceName + "/" + ApiVersion;

    CredentialsProvider credentialsProvider;
    HttpRequestConfig httpRequestConfig;
    Environment environment = new Environment.Builder().endpoint(DefaultEndpoint).build();

    public CredentialsProvider getCredentialsProvider() {
        return credentialsProvider;
    }

    public HttpRequestConfig getHttpRequestConfig() {
        return httpRequestConfig;
    }

    public Environment getEnvironment() {
        return environment;
    }

    public String getUserAgent() {
        return UserAgent;
    }

    public String getServiceName() {
        return ServiceName;
    }

    public String getVersion() {
        return ApiVersion;
    }

    private XdataClient() {

    }

    public static Builder builder() {
        return new DefaultBuilder();
    }


    /**
     * 执行PySpark脚本
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ExecutePySparkQueryResponse executePySparkQuery(ExecutePySparkQueryRequest request) throws JdcloudSdkException {
        return new ExecutePySparkQueryExecutor().client(this).execute(request);
    }

    /**
     * 查询指定数据库下所有数据表
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ListTableInfoResponse listTableInfo(ListTableInfoRequest request) throws JdcloudSdkException {
        return new ListTableInfoExecutor().client(this).execute(request);
    }

    /**
     * 查询数据库列表
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ListDatabaseInfoResponse listDatabaseInfo(ListDatabaseInfoRequest request) throws JdcloudSdkException {
        return new ListDatabaseInfoExecutor().client(this).execute(request);
    }

    /**
     * 删除数据库
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteDatabaseResponse deleteDatabase(DeleteDatabaseRequest request) throws JdcloudSdkException {
        return new DeleteDatabaseExecutor().client(this).execute(request);
    }

    /**
     * 创建数据库
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreateDatabaseResponse createDatabase(CreateDatabaseRequest request) throws JdcloudSdkException {
        return new CreateDatabaseExecutor().client(this).execute(request);
    }

    /**
     * 获取PySpark执行的结果
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetPySparkExecuteResultResponse getPySparkExecuteResult(GetPySparkExecuteResultRequest request) throws JdcloudSdkException {
        return new GetPySparkExecuteResultExecutor().client(this).execute(request);
    }

    /**
     * 查询实例列表
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ListInstanceInfoResponse listInstanceInfo(ListInstanceInfoRequest request) throws JdcloudSdkException {
        return new ListInstanceInfoExecutor().client(this).execute(request);
    }

    /**
     * 获取查询日志
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetRasQueryLogResponse getRasQueryLog(GetRasQueryLogRequest request) throws JdcloudSdkException {
        return new GetRasQueryLogExecutor().client(this).execute(request);
    }

    /**
     * 执行Spark SQL
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ExecuteRasQueryResponse executeRasQuery(ExecuteRasQueryRequest request) throws JdcloudSdkException {
        return new ExecuteRasQueryExecutor().client(this).execute(request);
    }

    /**
     * 查询数据表信息
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetTableInfoResponse getTableInfo(GetTableInfoRequest request) throws JdcloudSdkException {
        return new GetTableInfoExecutor().client(this).execute(request);
    }

    /**
     * 删除数据表
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteTableResponse deleteTable(DeleteTableRequest request) throws JdcloudSdkException {
        return new DeleteTableExecutor().client(this).execute(request);
    }

    /**
     * 获取查询的结果
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetRasQueryResultResponse getRasQueryResult(GetRasQueryResultRequest request) throws JdcloudSdkException {
        return new GetRasQueryResultExecutor().client(this).execute(request);
    }

    /**
     * 终止PySpark任务
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CancelPySparkJobResponse cancelPySparkJob(CancelPySparkJobRequest request) throws JdcloudSdkException {
        return new CancelPySparkJobExecutor().client(this).execute(request);
    }

    /**
     * 终止查询
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CancelRasQueryResponse cancelRasQuery(CancelRasQueryRequest request) throws JdcloudSdkException {
        return new CancelRasQueryExecutor().client(this).execute(request);
    }

    /**
     * 获取PySpark脚本的执行状态
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetPySparkExecuteStateResponse getPySparkExecuteState(GetPySparkExecuteStateRequest request) throws JdcloudSdkException {
        return new GetPySparkExecuteStateExecutor().client(this).execute(request);
    }

    /**
     * 查询数据库详情
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetDatabaseInfoResponse getDatabaseInfo(GetDatabaseInfoRequest request) throws JdcloudSdkException {
        return new GetDatabaseInfoExecutor().client(this).execute(request);
    }

    /**
     * 创建数据表
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreateTableResponse createTable(CreateTableRequest request) throws JdcloudSdkException {
        return new CreateTableExecutor().client(this).execute(request);
    }

    /**
     * 获取查询状态
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetRasQueryStateResponse getRasQueryState(GetRasQueryStateRequest request) throws JdcloudSdkException {
        return new GetRasQueryStateExecutor().client(this).execute(request);
    }


    public interface Builder {
        public Builder credentialsProvider(CredentialsProvider provider);
        public Builder environment(Environment environment);
        public Builder httpRequestConfig(HttpRequestConfig config);
        public XdataClient build() throws JdcloudSdkException;
    }

    private static class DefaultBuilder implements Builder {

        private XdataClient xdataClient;

        public DefaultBuilder() {
            xdataClient = new XdataClient();
        }

        public DefaultBuilder credentialsProvider(CredentialsProvider provider) {
            xdataClient.credentialsProvider = provider;
            return this;
        }

        public DefaultBuilder httpRequestConfig(HttpRequestConfig config) {
            xdataClient.httpRequestConfig = config;
            return this;
        }

        public XdataClient build() throws JdcloudSdkException {

            if (xdataClient.credentialsProvider == null) {
                //if credentialsProvider not set, try load jdcloud global default  credentials provider
                xdataClient.credentialsProvider = Jdcloud.defaultInstance().getCredentialsProvider();
                if (xdataClient.credentialsProvider == null) {
                    throw new JdcloudValidateException("XdataClient build error: jdcloud credentials provider not set");
                }
            }
            if (xdataClient.httpRequestConfig == null) {
                xdataClient.httpRequestConfig = Jdcloud.defaultInstance().getHttpRequestConfig();
                if (xdataClient.httpRequestConfig == null) {
                    throw new JdcloudValidateException("XdataClient build error: http request config not set");
                }
            }
            return xdataClient;
        }

        public Builder environment(Environment environment) {
            xdataClient.environment = environment;
            return this;
        }
    }
}
