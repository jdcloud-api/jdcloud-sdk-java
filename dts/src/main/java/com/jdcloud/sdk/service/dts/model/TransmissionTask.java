/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * 
 *
 * 
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.dts.model;

import java.util.List;
import java.util.ArrayList;
import com.jdcloud.sdk.service.charge.model.Charge;

/**
 * transmissionTask
 */
public class TransmissionTask  implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 数据传输任务所属PIN
     */
    private String pin;

    /**
     * 数据传输任务所属地域
     */
    private String region;

    /**
     * 数据传输任务ID
     */
    private String taskId;

    /**
     * 数据传输任务名称
     */
    private String taskName;

    /**
     * vpc
     */
    private String vpc;

    /**
     * subnet
     */
    private String subnet;

    /**
     * 实例类型，取值为：Sync：同步、Subscribe：订阅、Migration：迁移、DisasterRecovery 灾备
     */
    private String transmissionMethod;

    /**
     * 数据传输拓扑，支持：oneway - 单向数据传输、bidirectional - 双向数据传输，默认取值为：oneway
     */
    private String topology;

    /**
     * 数据传输实例规格，支持：dts.m1.medium、dts.m1.large、dts.m1.xlarge
     */
    private String instanceClass;

    /**
     * 数据传输任务所处阶段及描述
     */
    private Phase phase;

    /**
     * 计费配置
     */
    private Charge charge;

    /**
     * 创建时间
     */
    private String createTime;

    /**
     * Creating - 创建中 CreateFailed - 创建失败 NotStarted - 未启动 Modifying - 修改同步对象中 ModifyFailed - 修改同步对象失败 PreChecking - 预检查中 PreCheckFailed - 预检查失败 PreCheckSucceed - 预检查成功 Initializing - 任务初始化中 InitializeFailed - 任务初始化中失败 Running - 运行中 Failed - 同步失败 Suspending - 暂停 Retrying - 重试中 Expired - 锁定中 Finished - 结束 Deleting - 删除中 Deleted - 删除
     */
    private String status;

    /**
     * 源实例信息
     */
    private TransmissionEndpoint source;

    /**
     * 目标实例信息
     */
    private TransmissionEndpoint destination;

    /**
     * 标签信息
     */
    
    private List<Tag> tags;
    /**
     * 数据传输初始化类型
     */
    private TransmissionMode transmissionMode;



    /**
     * get 数据传输任务所属PIN
     *
     * @return
     */
    public String getPin() {
        return pin;
    }

    /**
     * set 数据传输任务所属PIN
     *
     * @param pin
     */
    public void setPin(String pin) {
        this.pin = pin;
    }


    /**
     * get 数据传输任务所属地域
     *
     * @return
     */
    public String getRegion() {
        return region;
    }

    /**
     * set 数据传输任务所属地域
     *
     * @param region
     */
    public void setRegion(String region) {
        this.region = region;
    }


    /**
     * get 数据传输任务ID
     *
     * @return
     */
    public String getTaskId() {
        return taskId;
    }

    /**
     * set 数据传输任务ID
     *
     * @param taskId
     */
    public void setTaskId(String taskId) {
        this.taskId = taskId;
    }


    /**
     * get 数据传输任务名称
     *
     * @return
     */
    public String getTaskName() {
        return taskName;
    }

    /**
     * set 数据传输任务名称
     *
     * @param taskName
     */
    public void setTaskName(String taskName) {
        this.taskName = taskName;
    }


    /**
     * get vpc
     *
     * @return
     */
    public String getVpc() {
        return vpc;
    }

    /**
     * set vpc
     *
     * @param vpc
     */
    public void setVpc(String vpc) {
        this.vpc = vpc;
    }


    /**
     * get subnet
     *
     * @return
     */
    public String getSubnet() {
        return subnet;
    }

    /**
     * set subnet
     *
     * @param subnet
     */
    public void setSubnet(String subnet) {
        this.subnet = subnet;
    }


    /**
     * get 实例类型，取值为：Sync：同步、Subscribe：订阅、Migration：迁移、DisasterRecovery 灾备
     *
     * @return
     */
    public String getTransmissionMethod() {
        return transmissionMethod;
    }

    /**
     * set 实例类型，取值为：Sync：同步、Subscribe：订阅、Migration：迁移、DisasterRecovery 灾备
     *
     * @param transmissionMethod
     */
    public void setTransmissionMethod(String transmissionMethod) {
        this.transmissionMethod = transmissionMethod;
    }


    /**
     * get 数据传输拓扑，支持：oneway - 单向数据传输、bidirectional - 双向数据传输，默认取值为：oneway
     *
     * @return
     */
    public String getTopology() {
        return topology;
    }

    /**
     * set 数据传输拓扑，支持：oneway - 单向数据传输、bidirectional - 双向数据传输，默认取值为：oneway
     *
     * @param topology
     */
    public void setTopology(String topology) {
        this.topology = topology;
    }


    /**
     * get 数据传输实例规格，支持：dts.m1.medium、dts.m1.large、dts.m1.xlarge
     *
     * @return
     */
    public String getInstanceClass() {
        return instanceClass;
    }

    /**
     * set 数据传输实例规格，支持：dts.m1.medium、dts.m1.large、dts.m1.xlarge
     *
     * @param instanceClass
     */
    public void setInstanceClass(String instanceClass) {
        this.instanceClass = instanceClass;
    }


    /**
     * get 数据传输任务所处阶段及描述
     *
     * @return
     */
    public Phase getPhase() {
        return phase;
    }

    /**
     * set 数据传输任务所处阶段及描述
     *
     * @param phase
     */
    public void setPhase(Phase phase) {
        this.phase = phase;
    }


    /**
     * get 计费配置
     *
     * @return
     */
    public Charge getCharge() {
        return charge;
    }

    /**
     * set 计费配置
     *
     * @param charge
     */
    public void setCharge(Charge charge) {
        this.charge = charge;
    }


    /**
     * get 创建时间
     *
     * @return
     */
    public String getCreateTime() {
        return createTime;
    }

    /**
     * set 创建时间
     *
     * @param createTime
     */
    public void setCreateTime(String createTime) {
        this.createTime = createTime;
    }


    /**
     * get Creating - 创建中 CreateFailed - 创建失败 NotStarted - 未启动 Modifying - 修改同步对象中 ModifyFailed - 修改同步对象失败 PreChecking - 预检查中 PreCheckFailed - 预检查失败 PreCheckSucceed - 预检查成功 Initializing - 任务初始化中 InitializeFailed - 任务初始化中失败 Running - 运行中 Failed - 同步失败 Suspending - 暂停 Retrying - 重试中 Expired - 锁定中 Finished - 结束 Deleting - 删除中 Deleted - 删除
     *
     * @return
     */
    public String getStatus() {
        return status;
    }

    /**
     * set Creating - 创建中 CreateFailed - 创建失败 NotStarted - 未启动 Modifying - 修改同步对象中 ModifyFailed - 修改同步对象失败 PreChecking - 预检查中 PreCheckFailed - 预检查失败 PreCheckSucceed - 预检查成功 Initializing - 任务初始化中 InitializeFailed - 任务初始化中失败 Running - 运行中 Failed - 同步失败 Suspending - 暂停 Retrying - 重试中 Expired - 锁定中 Finished - 结束 Deleting - 删除中 Deleted - 删除
     *
     * @param status
     */
    public void setStatus(String status) {
        this.status = status;
    }


    /**
     * get 源实例信息
     *
     * @return
     */
    public TransmissionEndpoint getSource() {
        return source;
    }

    /**
     * set 源实例信息
     *
     * @param source
     */
    public void setSource(TransmissionEndpoint source) {
        this.source = source;
    }


    /**
     * get 目标实例信息
     *
     * @return
     */
    public TransmissionEndpoint getDestination() {
        return destination;
    }

    /**
     * set 目标实例信息
     *
     * @param destination
     */
    public void setDestination(TransmissionEndpoint destination) {
        this.destination = destination;
    }


    /**
    * get 标签信息
    *
    * @return
    */
    public List<Tag> getTags() {
        return tags;
    }

    /**
    * set 标签信息
    *
    * @param tags
    */
    public void setTags(List<Tag> tags) {
        this.tags = tags;
    }


    /**
     * get 数据传输初始化类型
     *
     * @return
     */
    public TransmissionMode getTransmissionMode() {
        return transmissionMode;
    }

    /**
     * set 数据传输初始化类型
     *
     * @param transmissionMode
     */
    public void setTransmissionMode(TransmissionMode transmissionMode) {
        this.transmissionMode = transmissionMode;
    }



    /**
     * set 数据传输任务所属PIN
     *
     * @param pin
     */
    public TransmissionTask pin(String pin) {
        this.pin = pin;
        return this;
    }


    /**
     * set 数据传输任务所属地域
     *
     * @param region
     */
    public TransmissionTask region(String region) {
        this.region = region;
        return this;
    }


    /**
     * set 数据传输任务ID
     *
     * @param taskId
     */
    public TransmissionTask taskId(String taskId) {
        this.taskId = taskId;
        return this;
    }


    /**
     * set 数据传输任务名称
     *
     * @param taskName
     */
    public TransmissionTask taskName(String taskName) {
        this.taskName = taskName;
        return this;
    }


    /**
     * set vpc
     *
     * @param vpc
     */
    public TransmissionTask vpc(String vpc) {
        this.vpc = vpc;
        return this;
    }


    /**
     * set subnet
     *
     * @param subnet
     */
    public TransmissionTask subnet(String subnet) {
        this.subnet = subnet;
        return this;
    }


    /**
     * set 实例类型，取值为：Sync：同步、Subscribe：订阅、Migration：迁移、DisasterRecovery 灾备
     *
     * @param transmissionMethod
     */
    public TransmissionTask transmissionMethod(String transmissionMethod) {
        this.transmissionMethod = transmissionMethod;
        return this;
    }


    /**
     * set 数据传输拓扑，支持：oneway - 单向数据传输、bidirectional - 双向数据传输，默认取值为：oneway
     *
     * @param topology
     */
    public TransmissionTask topology(String topology) {
        this.topology = topology;
        return this;
    }


    /**
     * set 数据传输实例规格，支持：dts.m1.medium、dts.m1.large、dts.m1.xlarge
     *
     * @param instanceClass
     */
    public TransmissionTask instanceClass(String instanceClass) {
        this.instanceClass = instanceClass;
        return this;
    }


    /**
     * set 数据传输任务所处阶段及描述
     *
     * @param phase
     */
    public TransmissionTask phase(Phase phase) {
        this.phase = phase;
        return this;
    }


    /**
     * set 计费配置
     *
     * @param charge
     */
    public TransmissionTask charge(Charge charge) {
        this.charge = charge;
        return this;
    }


    /**
     * set 创建时间
     *
     * @param createTime
     */
    public TransmissionTask createTime(String createTime) {
        this.createTime = createTime;
        return this;
    }


    /**
     * set Creating - 创建中 CreateFailed - 创建失败 NotStarted - 未启动 Modifying - 修改同步对象中 ModifyFailed - 修改同步对象失败 PreChecking - 预检查中 PreCheckFailed - 预检查失败 PreCheckSucceed - 预检查成功 Initializing - 任务初始化中 InitializeFailed - 任务初始化中失败 Running - 运行中 Failed - 同步失败 Suspending - 暂停 Retrying - 重试中 Expired - 锁定中 Finished - 结束 Deleting - 删除中 Deleted - 删除
     *
     * @param status
     */
    public TransmissionTask status(String status) {
        this.status = status;
        return this;
    }


    /**
     * set 源实例信息
     *
     * @param source
     */
    public TransmissionTask source(TransmissionEndpoint source) {
        this.source = source;
        return this;
    }


    /**
     * set 目标实例信息
     *
     * @param destination
     */
    public TransmissionTask destination(TransmissionEndpoint destination) {
        this.destination = destination;
        return this;
    }


    /**
    * set 标签信息
    *
    * @param tags
    */
    public TransmissionTask tags(List<Tag> tags) {
        this.tags = tags;
        return this;
    }


    /**
     * set 数据传输初始化类型
     *
     * @param transmissionMode
     */
    public TransmissionTask transmissionMode(TransmissionMode transmissionMode) {
        this.transmissionMode = transmissionMode;
        return this;
    }



    /**
     * add item to 标签信息
     *
     * @param tag
     */
    public void addTag(Tag tag) {
        if (this.tags == null) {
            this.tags = new ArrayList<>();
        }
        this.tags.add(tag);
    }
}