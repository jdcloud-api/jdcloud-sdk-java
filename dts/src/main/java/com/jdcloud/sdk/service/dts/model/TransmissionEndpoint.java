/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * 
 *
 * 
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.dts.model;

import java.util.List;
import java.util.ArrayList;

/**
 * transmissionEndpoint
 */
public class TransmissionEndpoint  implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 实例所在地域，若为京东云资源，则必须传入该参数
     */
    private String region;

    /**
     * 实例类型：Replication（副本集）、Sharding（分片集）、Cluster（主从实例）、Readonly（只读实例）
     */
    private String type;

    /**
     * CloudInstance：RDS MySQL(MariaDB,Percona)、RDS SQL Server、RDS PostgreSQL、MongoDB、Kafka、Elasticsearch；ECS：云主机自建数据库；OTHER：有公网IP的自建数据库；EXPRESS：通过专线接入的数据库
     */
    private String instanceType;

    /**
     * 如果为云数据库实例，则传入云数据库实例ID；如果为ECS实例，则传入云主机ID
     */
    private String instanceId;

    /**
     * 数据库类型，支持MySQL、Percona、MariaDB、PostgreSQL、MongoDB、Kafka、Elasticsearch、Clickhouse
     */
    private String engine;

    /**
     * 数据库连接地址，域名或IP，InstanceType为OTHER时必填
     */
    private String host;

    /**
     * 数据库监听端口，InstanceType为OTHER时必填
     */
    private Integer port;

    /**
     * 数据库访问账号
     */
    private String userName;

    /**
     * 数据库访问密码
     */
    private String password;

    /**
     * Topic名称
     */
    private String topic;

    /**
     * 传输对象所属的数据库名称
     */
    private String databaseName;

    /**
     * 是否使用统一认证信息（若开启，mongos、mongoshards、configserver将使用相同的认证信息）
     */
    private Boolean unifiedAuth;

    /**
     * mongos
     */
    
    private List<MongoBase> mongos;
    /**
     * mongoShards
     */
    private List< List<MongoBase>> mongoShards;
    
    /**
     * configServer
     */
    
    private List<MongoBase> configServer;
    /**
     * other
     */
    private EndpointOther other;

    /**
     * 数据库连接串，Kafka、MongoDB实例可选
     */
    private String connectionStr;



    /**
     * get 实例所在地域，若为京东云资源，则必须传入该参数
     *
     * @return
     */
    public String getRegion() {
        return region;
    }

    /**
     * set 实例所在地域，若为京东云资源，则必须传入该参数
     *
     * @param region
     */
    public void setRegion(String region) {
        this.region = region;
    }


    /**
     * get 实例类型：Replication（副本集）、Sharding（分片集）、Cluster（主从实例）、Readonly（只读实例）
     *
     * @return
     */
    public String getType() {
        return type;
    }

    /**
     * set 实例类型：Replication（副本集）、Sharding（分片集）、Cluster（主从实例）、Readonly（只读实例）
     *
     * @param type
     */
    public void setType(String type) {
        this.type = type;
    }


    /**
     * get CloudInstance：RDS MySQL(MariaDB,Percona)、RDS SQL Server、RDS PostgreSQL、MongoDB、Kafka、Elasticsearch；ECS：云主机自建数据库；OTHER：有公网IP的自建数据库；EXPRESS：通过专线接入的数据库
     *
     * @return
     */
    public String getInstanceType() {
        return instanceType;
    }

    /**
     * set CloudInstance：RDS MySQL(MariaDB,Percona)、RDS SQL Server、RDS PostgreSQL、MongoDB、Kafka、Elasticsearch；ECS：云主机自建数据库；OTHER：有公网IP的自建数据库；EXPRESS：通过专线接入的数据库
     *
     * @param instanceType
     */
    public void setInstanceType(String instanceType) {
        this.instanceType = instanceType;
    }


    /**
     * get 如果为云数据库实例，则传入云数据库实例ID；如果为ECS实例，则传入云主机ID
     *
     * @return
     */
    public String getInstanceId() {
        return instanceId;
    }

    /**
     * set 如果为云数据库实例，则传入云数据库实例ID；如果为ECS实例，则传入云主机ID
     *
     * @param instanceId
     */
    public void setInstanceId(String instanceId) {
        this.instanceId = instanceId;
    }


    /**
     * get 数据库类型，支持MySQL、Percona、MariaDB、PostgreSQL、MongoDB、Kafka、Elasticsearch、Clickhouse
     *
     * @return
     */
    public String getEngine() {
        return engine;
    }

    /**
     * set 数据库类型，支持MySQL、Percona、MariaDB、PostgreSQL、MongoDB、Kafka、Elasticsearch、Clickhouse
     *
     * @param engine
     */
    public void setEngine(String engine) {
        this.engine = engine;
    }


    /**
     * get 数据库连接地址，域名或IP，InstanceType为OTHER时必填
     *
     * @return
     */
    public String getHost() {
        return host;
    }

    /**
     * set 数据库连接地址，域名或IP，InstanceType为OTHER时必填
     *
     * @param host
     */
    public void setHost(String host) {
        this.host = host;
    }


    /**
     * get 数据库监听端口，InstanceType为OTHER时必填
     *
     * @return
     */
    public Integer getPort() {
        return port;
    }

    /**
     * set 数据库监听端口，InstanceType为OTHER时必填
     *
     * @param port
     */
    public void setPort(Integer port) {
        this.port = port;
    }


    /**
     * get 数据库访问账号
     *
     * @return
     */
    public String getUserName() {
        return userName;
    }

    /**
     * set 数据库访问账号
     *
     * @param userName
     */
    public void setUserName(String userName) {
        this.userName = userName;
    }


    /**
     * get 数据库访问密码
     *
     * @return
     */
    public String getPassword() {
        return password;
    }

    /**
     * set 数据库访问密码
     *
     * @param password
     */
    public void setPassword(String password) {
        this.password = password;
    }


    /**
     * get Topic名称
     *
     * @return
     */
    public String getTopic() {
        return topic;
    }

    /**
     * set Topic名称
     *
     * @param topic
     */
    public void setTopic(String topic) {
        this.topic = topic;
    }


    /**
     * get 传输对象所属的数据库名称
     *
     * @return
     */
    public String getDatabaseName() {
        return databaseName;
    }

    /**
     * set 传输对象所属的数据库名称
     *
     * @param databaseName
     */
    public void setDatabaseName(String databaseName) {
        this.databaseName = databaseName;
    }


    /**
     * get 是否使用统一认证信息（若开启，mongos、mongoshards、configserver将使用相同的认证信息）
     *
     * @return
     */
    public Boolean getUnifiedAuth() {
        return unifiedAuth;
    }

    /**
     * set 是否使用统一认证信息（若开启，mongos、mongoshards、configserver将使用相同的认证信息）
     *
     * @param unifiedAuth
     */
    public void setUnifiedAuth(Boolean unifiedAuth) {
        this.unifiedAuth = unifiedAuth;
    }


    /**
    * get mongos
    *
    * @return
    */
    public List<MongoBase> getMongos() {
        return mongos;
    }

    /**
    * set mongos
    *
    * @param mongos
    */
    public void setMongos(List<MongoBase> mongos) {
        this.mongos = mongos;
    }

    /**
    * get mongoShards
    *
    * @return
    */
    public List< List<MongoBase>> getMongoShards() {
        return mongoShards;
    }

    /**
    * set mongoShards
    *
    * @param mongoShards
    */
    public void setMongoShards(List<List<MongoBase>> mongoShards) {
        this.mongoShards = mongoShards;
    }



    /**
    * get configServer
    *
    * @return
    */
    public List<MongoBase> getConfigServer() {
        return configServer;
    }

    /**
    * set configServer
    *
    * @param configServer
    */
    public void setConfigServer(List<MongoBase> configServer) {
        this.configServer = configServer;
    }


    /**
     * get other
     *
     * @return
     */
    public EndpointOther getOther() {
        return other;
    }

    /**
     * set other
     *
     * @param other
     */
    public void setOther(EndpointOther other) {
        this.other = other;
    }


    /**
     * get 数据库连接串，Kafka、MongoDB实例可选
     *
     * @return
     */
    public String getConnectionStr() {
        return connectionStr;
    }

    /**
     * set 数据库连接串，Kafka、MongoDB实例可选
     *
     * @param connectionStr
     */
    public void setConnectionStr(String connectionStr) {
        this.connectionStr = connectionStr;
    }



    /**
     * set 实例所在地域，若为京东云资源，则必须传入该参数
     *
     * @param region
     */
    public TransmissionEndpoint region(String region) {
        this.region = region;
        return this;
    }


    /**
     * set 实例类型：Replication（副本集）、Sharding（分片集）、Cluster（主从实例）、Readonly（只读实例）
     *
     * @param type
     */
    public TransmissionEndpoint type(String type) {
        this.type = type;
        return this;
    }


    /**
     * set CloudInstance：RDS MySQL(MariaDB,Percona)、RDS SQL Server、RDS PostgreSQL、MongoDB、Kafka、Elasticsearch；ECS：云主机自建数据库；OTHER：有公网IP的自建数据库；EXPRESS：通过专线接入的数据库
     *
     * @param instanceType
     */
    public TransmissionEndpoint instanceType(String instanceType) {
        this.instanceType = instanceType;
        return this;
    }


    /**
     * set 如果为云数据库实例，则传入云数据库实例ID；如果为ECS实例，则传入云主机ID
     *
     * @param instanceId
     */
    public TransmissionEndpoint instanceId(String instanceId) {
        this.instanceId = instanceId;
        return this;
    }


    /**
     * set 数据库类型，支持MySQL、Percona、MariaDB、PostgreSQL、MongoDB、Kafka、Elasticsearch、Clickhouse
     *
     * @param engine
     */
    public TransmissionEndpoint engine(String engine) {
        this.engine = engine;
        return this;
    }


    /**
     * set 数据库连接地址，域名或IP，InstanceType为OTHER时必填
     *
     * @param host
     */
    public TransmissionEndpoint host(String host) {
        this.host = host;
        return this;
    }


    /**
     * set 数据库监听端口，InstanceType为OTHER时必填
     *
     * @param port
     */
    public TransmissionEndpoint port(Integer port) {
        this.port = port;
        return this;
    }


    /**
     * set 数据库访问账号
     *
     * @param userName
     */
    public TransmissionEndpoint userName(String userName) {
        this.userName = userName;
        return this;
    }


    /**
     * set 数据库访问密码
     *
     * @param password
     */
    public TransmissionEndpoint password(String password) {
        this.password = password;
        return this;
    }


    /**
     * set Topic名称
     *
     * @param topic
     */
    public TransmissionEndpoint topic(String topic) {
        this.topic = topic;
        return this;
    }


    /**
     * set 传输对象所属的数据库名称
     *
     * @param databaseName
     */
    public TransmissionEndpoint databaseName(String databaseName) {
        this.databaseName = databaseName;
        return this;
    }


    /**
     * set 是否使用统一认证信息（若开启，mongos、mongoshards、configserver将使用相同的认证信息）
     *
     * @param unifiedAuth
     */
    public TransmissionEndpoint unifiedAuth(Boolean unifiedAuth) {
        this.unifiedAuth = unifiedAuth;
        return this;
    }


    /**
    * set mongos
    *
    * @param mongos
    */
    public TransmissionEndpoint mongos(List<MongoBase> mongos) {
        this.mongos = mongos;
        return this;
    }

    /**
    * set mongoShards
    *
    * @param mongoShards
    */
    public TransmissionEndpoint mongoShards(List<List<MongoBase>> mongoShards) {
        this.mongoShards = mongoShards;
        return this;
    }



    /**
    * set configServer
    *
    * @param configServer
    */
    public TransmissionEndpoint configServer(List<MongoBase> configServer) {
        this.configServer = configServer;
        return this;
    }


    /**
     * set other
     *
     * @param other
     */
    public TransmissionEndpoint other(EndpointOther other) {
        this.other = other;
        return this;
    }


    /**
     * set 数据库连接串，Kafka、MongoDB实例可选
     *
     * @param connectionStr
     */
    public TransmissionEndpoint connectionStr(String connectionStr) {
        this.connectionStr = connectionStr;
        return this;
    }



    /**
     * add item to mongos
     *
     * @param mongo
     */
    public void addMongo(MongoBase mongo) {
        if (this.mongos == null) {
            this.mongos = new ArrayList<>();
        }
        this.mongos.add(mongo);
    }
    /**
    * add item to mongoShards
    *
    * @param mongoShard
    */
    public void addMongoShard(List<MongoBase> mongoShardList) {
        if (this.mongoShards == null) {
            this.mongoShards = new ArrayList<>();
        }
        this.mongoShards.add(mongoShardList);
    }


    /**
     * add item to configServer
     *
     * @param configServer
     */
    public void addConfigServer(MongoBase configServer) {
        if (this.configServer == null) {
            this.configServer = new ArrayList<>();
        }
        this.configServer.add(configServer);
    }
}