/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * 
 *
 * 
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.dts.model;


/**
 * pipelineOptions
 */
public class PipelineOptions  implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 目标插入策略：MySQL（mysql-replace-engine：覆盖写入，conflict-detect-engine：冲突检测报错）Clickhouse（ck-replaceMergeTree-engine）
     */
    private String destExecutionStrategy;

    /**
     * Elasticsearch 索引命名规则：table：使用表名，schemaTable：使用库名+&#39;_&#39;+表名（同步至Elasticsearch时，可选）
     */
    private String indexNamingRule;

    /**
     * 目标Kafka的消息格式：canal-json|open-protocol|canal|avro|maxwell（TiDB同步至Kafka时，可选）
     */
    private String protocol;

    /**
     * 消息投递到Kafka的策略：default（有多个唯一索引（包括主键）时按照 table 模式分发；只有一个唯一索引（或主键）按照 index-value 模式分发；如果开启了 old value 特性，按照 table 分发）|ts（以行变更的 commitTs 做 Hash 计算并进行 event 分发）|index-value（以表的主键或者唯一索引的值做 Hash 计算并进行 event 分发）|table（以表的 schema 名和 table 名做 Hash 计算并进行 event 分发）|zero（投递到0号分区）
     */
    private String partition;



    /**
     * get 目标插入策略：MySQL（mysql-replace-engine：覆盖写入，conflict-detect-engine：冲突检测报错）Clickhouse（ck-replaceMergeTree-engine）
     *
     * @return
     */
    public String getDestExecutionStrategy() {
        return destExecutionStrategy;
    }

    /**
     * set 目标插入策略：MySQL（mysql-replace-engine：覆盖写入，conflict-detect-engine：冲突检测报错）Clickhouse（ck-replaceMergeTree-engine）
     *
     * @param destExecutionStrategy
     */
    public void setDestExecutionStrategy(String destExecutionStrategy) {
        this.destExecutionStrategy = destExecutionStrategy;
    }


    /**
     * get Elasticsearch 索引命名规则：table：使用表名，schemaTable：使用库名+&#39;_&#39;+表名（同步至Elasticsearch时，可选）
     *
     * @return
     */
    public String getIndexNamingRule() {
        return indexNamingRule;
    }

    /**
     * set Elasticsearch 索引命名规则：table：使用表名，schemaTable：使用库名+&#39;_&#39;+表名（同步至Elasticsearch时，可选）
     *
     * @param indexNamingRule
     */
    public void setIndexNamingRule(String indexNamingRule) {
        this.indexNamingRule = indexNamingRule;
    }


    /**
     * get 目标Kafka的消息格式：canal-json|open-protocol|canal|avro|maxwell（TiDB同步至Kafka时，可选）
     *
     * @return
     */
    public String getProtocol() {
        return protocol;
    }

    /**
     * set 目标Kafka的消息格式：canal-json|open-protocol|canal|avro|maxwell（TiDB同步至Kafka时，可选）
     *
     * @param protocol
     */
    public void setProtocol(String protocol) {
        this.protocol = protocol;
    }


    /**
     * get 消息投递到Kafka的策略：default（有多个唯一索引（包括主键）时按照 table 模式分发；只有一个唯一索引（或主键）按照 index-value 模式分发；如果开启了 old value 特性，按照 table 分发）|ts（以行变更的 commitTs 做 Hash 计算并进行 event 分发）|index-value（以表的主键或者唯一索引的值做 Hash 计算并进行 event 分发）|table（以表的 schema 名和 table 名做 Hash 计算并进行 event 分发）|zero（投递到0号分区）
     *
     * @return
     */
    public String getPartition() {
        return partition;
    }

    /**
     * set 消息投递到Kafka的策略：default（有多个唯一索引（包括主键）时按照 table 模式分发；只有一个唯一索引（或主键）按照 index-value 模式分发；如果开启了 old value 特性，按照 table 分发）|ts（以行变更的 commitTs 做 Hash 计算并进行 event 分发）|index-value（以表的主键或者唯一索引的值做 Hash 计算并进行 event 分发）|table（以表的 schema 名和 table 名做 Hash 计算并进行 event 分发）|zero（投递到0号分区）
     *
     * @param partition
     */
    public void setPartition(String partition) {
        this.partition = partition;
    }



    /**
     * set 目标插入策略：MySQL（mysql-replace-engine：覆盖写入，conflict-detect-engine：冲突检测报错）Clickhouse（ck-replaceMergeTree-engine）
     *
     * @param destExecutionStrategy
     */
    public PipelineOptions destExecutionStrategy(String destExecutionStrategy) {
        this.destExecutionStrategy = destExecutionStrategy;
        return this;
    }


    /**
     * set Elasticsearch 索引命名规则：table：使用表名，schemaTable：使用库名+&#39;_&#39;+表名（同步至Elasticsearch时，可选）
     *
     * @param indexNamingRule
     */
    public PipelineOptions indexNamingRule(String indexNamingRule) {
        this.indexNamingRule = indexNamingRule;
        return this;
    }


    /**
     * set 目标Kafka的消息格式：canal-json|open-protocol|canal|avro|maxwell（TiDB同步至Kafka时，可选）
     *
     * @param protocol
     */
    public PipelineOptions protocol(String protocol) {
        this.protocol = protocol;
        return this;
    }


    /**
     * set 消息投递到Kafka的策略：default（有多个唯一索引（包括主键）时按照 table 模式分发；只有一个唯一索引（或主键）按照 index-value 模式分发；如果开启了 old value 特性，按照 table 分发）|ts（以行变更的 commitTs 做 Hash 计算并进行 event 分发）|index-value（以表的主键或者唯一索引的值做 Hash 计算并进行 event 分发）|table（以表的 schema 名和 table 名做 Hash 计算并进行 event 分发）|zero（投递到0号分区）
     *
     * @param partition
     */
    public PipelineOptions partition(String partition) {
        this.partition = partition;
        return this;
    }


}