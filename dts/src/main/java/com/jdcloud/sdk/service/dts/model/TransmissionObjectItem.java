/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * 
 *
 * 
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.dts.model;

import java.util.List;
import java.util.ArrayList;

/**
 * transmissionObjectItem
 */
public class TransmissionObjectItem  implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 目标 Schema 名称
     */
    private String name;

    /**
     * 是否传输该 Scheam 下所有 Table
     */
    private Boolean all;

    /**
     * 传输的 DML 操作列表
     */
    
    private List<String> dmlOp;
    /**
     * 传输的 DDL 操作列表
     */
    
    private List<String> ddlOp;
    /**
     * tables
     */
    private Object tables;



    /**
     * get 目标 Schema 名称
     *
     * @return
     */
    public String getName() {
        return name;
    }

    /**
     * set 目标 Schema 名称
     *
     * @param name
     */
    public void setName(String name) {
        this.name = name;
    }


    /**
     * get 是否传输该 Scheam 下所有 Table
     *
     * @return
     */
    public Boolean getAll() {
        return all;
    }

    /**
     * set 是否传输该 Scheam 下所有 Table
     *
     * @param all
     */
    public void setAll(Boolean all) {
        this.all = all;
    }


    /**
    * get 传输的 DML 操作列表
    *
    * @return
    */
    public List<String> getDmlOp() {
        return dmlOp;
    }

    /**
    * set 传输的 DML 操作列表
    *
    * @param dmlOp
    */
    public void setDmlOp(List<String> dmlOp) {
        this.dmlOp = dmlOp;
    }


    /**
    * get 传输的 DDL 操作列表
    *
    * @return
    */
    public List<String> getDdlOp() {
        return ddlOp;
    }

    /**
    * set 传输的 DDL 操作列表
    *
    * @param ddlOp
    */
    public void setDdlOp(List<String> ddlOp) {
        this.ddlOp = ddlOp;
    }


    /**
     * get tables
     *
     * @return
     */
    public Object getTables() {
        return tables;
    }

    /**
     * set tables
     *
     * @param tables
     */
    public void setTables(Object tables) {
        this.tables = tables;
    }



    /**
     * set 目标 Schema 名称
     *
     * @param name
     */
    public TransmissionObjectItem name(String name) {
        this.name = name;
        return this;
    }


    /**
     * set 是否传输该 Scheam 下所有 Table
     *
     * @param all
     */
    public TransmissionObjectItem all(Boolean all) {
        this.all = all;
        return this;
    }


    /**
    * set 传输的 DML 操作列表
    *
    * @param dmlOp
    */
    public TransmissionObjectItem dmlOp(List<String> dmlOp) {
        this.dmlOp = dmlOp;
        return this;
    }


    /**
    * set 传输的 DDL 操作列表
    *
    * @param ddlOp
    */
    public TransmissionObjectItem ddlOp(List<String> ddlOp) {
        this.ddlOp = ddlOp;
        return this;
    }


    /**
     * set tables
     *
     * @param tables
     */
    public TransmissionObjectItem tables(Object tables) {
        this.tables = tables;
        return this;
    }



    /**
     * add item to 传输的 DML 操作列表
     *
     * @param dmlOp
     */
    public void addDmlOp(String dmlOp) {
        if (this.dmlOp == null) {
            this.dmlOp = new ArrayList<>();
        }
        this.dmlOp.add(dmlOp);
    }

    /**
     * add item to 传输的 DDL 操作列表
     *
     * @param ddlOp
     */
    public void addDdlOp(String ddlOp) {
        if (this.ddlOp == null) {
            this.ddlOp = new ArrayList<>();
        }
        this.ddlOp.add(ddlOp);
    }
}