/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 数据传输服务 DTS
 * 数据传输服务 DTS
 *
 * OpenAPI spec version: v2
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.dts.client;

import com.jdcloud.sdk.JdcloudSdkException;
import com.jdcloud.sdk.auth.CredentialsProvider;
import com.jdcloud.sdk.client.Environment;
import com.jdcloud.sdk.client.Jdcloud;
import com.jdcloud.sdk.client.JdcloudClient;
import com.jdcloud.sdk.client.JdcloudValidateException;
import com.jdcloud.sdk.http.HttpRequestConfig;
import com.jdcloud.sdk.service.dts.model.GetCloudInstanceRequest;
import com.jdcloud.sdk.service.dts.model.GetCloudInstanceResponse;
import com.jdcloud.sdk.service.dts.client.GetCloudInstanceExecutor;
import com.jdcloud.sdk.service.dts.model.ListTablesRequest;
import com.jdcloud.sdk.service.dts.model.ListTablesResponse;
import com.jdcloud.sdk.service.dts.client.ListTablesExecutor;
import com.jdcloud.sdk.service.dts.model.ListTaskProgressRequest;
import com.jdcloud.sdk.service.dts.model.ListTaskProgressResponse;
import com.jdcloud.sdk.service.dts.client.ListTaskProgressExecutor;
import com.jdcloud.sdk.service.dts.model.StopTransmissionTaskRequest;
import com.jdcloud.sdk.service.dts.model.StopTransmissionTaskResponse;
import com.jdcloud.sdk.service.dts.client.StopTransmissionTaskExecutor;
import com.jdcloud.sdk.service.dts.model.StartTransmissionTaskRequest;
import com.jdcloud.sdk.service.dts.model.StartTransmissionTaskResponse;
import com.jdcloud.sdk.service.dts.client.StartTransmissionTaskExecutor;
import com.jdcloud.sdk.service.dts.model.BatchOperateTasksRequest;
import com.jdcloud.sdk.service.dts.model.BatchOperateTasksResponse;
import com.jdcloud.sdk.service.dts.client.BatchOperateTasksExecutor;
import com.jdcloud.sdk.service.dts.model.DescribeTransmissionObjectRequest;
import com.jdcloud.sdk.service.dts.model.DescribeTransmissionObjectResponse;
import com.jdcloud.sdk.service.dts.client.DescribeTransmissionObjectExecutor;
import com.jdcloud.sdk.service.dts.model.ModifyTransmissionTaskNameRequest;
import com.jdcloud.sdk.service.dts.model.ModifyTransmissionTaskNameResponse;
import com.jdcloud.sdk.service.dts.client.ModifyTransmissionTaskNameExecutor;
import com.jdcloud.sdk.service.dts.model.ListTopicsRequest;
import com.jdcloud.sdk.service.dts.model.ListTopicsResponse;
import com.jdcloud.sdk.service.dts.client.ListTopicsExecutor;
import com.jdcloud.sdk.service.dts.model.DescribeTransmissionLogRequest;
import com.jdcloud.sdk.service.dts.model.DescribeTransmissionLogResponse;
import com.jdcloud.sdk.service.dts.client.DescribeTransmissionLogExecutor;
import com.jdcloud.sdk.service.dts.model.ListProcessesRequest;
import com.jdcloud.sdk.service.dts.model.ListProcessesResponse;
import com.jdcloud.sdk.service.dts.client.ListProcessesExecutor;
import com.jdcloud.sdk.service.dts.model.SkipPreCheckItemRequest;
import com.jdcloud.sdk.service.dts.model.SkipPreCheckItemResponse;
import com.jdcloud.sdk.service.dts.client.SkipPreCheckItemExecutor;
import com.jdcloud.sdk.service.dts.model.ResumeTransmissionTaskRequest;
import com.jdcloud.sdk.service.dts.model.ResumeTransmissionTaskResponse;
import com.jdcloud.sdk.service.dts.client.ResumeTransmissionTaskExecutor;
import com.jdcloud.sdk.service.dts.model.SuspendTransmissionTaskRequest;
import com.jdcloud.sdk.service.dts.model.SuspendTransmissionTaskResponse;
import com.jdcloud.sdk.service.dts.client.SuspendTransmissionTaskExecutor;
import com.jdcloud.sdk.service.dts.model.ConnectivityTestRequest;
import com.jdcloud.sdk.service.dts.model.ConnectivityTestResponse;
import com.jdcloud.sdk.service.dts.client.ConnectivityTestExecutor;
import com.jdcloud.sdk.service.dts.model.ListInstanceClassesRequest;
import com.jdcloud.sdk.service.dts.model.ListInstanceClassesResponse;
import com.jdcloud.sdk.service.dts.client.ListInstanceClassesExecutor;
import com.jdcloud.sdk.service.dts.model.GetTaskProgressRequest;
import com.jdcloud.sdk.service.dts.model.GetTaskProgressResponse;
import com.jdcloud.sdk.service.dts.client.GetTaskProgressExecutor;
import com.jdcloud.sdk.service.dts.model.ListSchemasRequest;
import com.jdcloud.sdk.service.dts.model.ListSchemasResponse;
import com.jdcloud.sdk.service.dts.client.ListSchemasExecutor;
import com.jdcloud.sdk.service.dts.model.PreCheckTransmissionTaskRequest;
import com.jdcloud.sdk.service.dts.model.PreCheckTransmissionTaskResponse;
import com.jdcloud.sdk.service.dts.client.PreCheckTransmissionTaskExecutor;
import com.jdcloud.sdk.service.dts.model.DescribeTransmissionTasksRequest;
import com.jdcloud.sdk.service.dts.model.DescribeTransmissionTasksResponse;
import com.jdcloud.sdk.service.dts.client.DescribeTransmissionTasksExecutor;
import com.jdcloud.sdk.service.dts.model.DescribePreCheckResultRequest;
import com.jdcloud.sdk.service.dts.model.DescribePreCheckResultResponse;
import com.jdcloud.sdk.service.dts.client.DescribePreCheckResultExecutor;
import com.jdcloud.sdk.service.dts.model.ListCloudInstancesRequest;
import com.jdcloud.sdk.service.dts.model.ListCloudInstancesResponse;
import com.jdcloud.sdk.service.dts.client.ListCloudInstancesExecutor;
import com.jdcloud.sdk.service.dts.model.ConfigureTransmissionTaskRequest;
import com.jdcloud.sdk.service.dts.model.ConfigureTransmissionTaskResponse;
import com.jdcloud.sdk.service.dts.client.ConfigureTransmissionTaskExecutor;
import com.jdcloud.sdk.service.dts.model.CreateTransmissionTaskRequest;
import com.jdcloud.sdk.service.dts.model.CreateTransmissionTaskResponse;
import com.jdcloud.sdk.service.dts.client.CreateTransmissionTaskExecutor;
import com.jdcloud.sdk.service.dts.model.DescribeTransmissionTaskAttributesRequest;
import com.jdcloud.sdk.service.dts.model.DescribeTransmissionTaskAttributesResponse;
import com.jdcloud.sdk.service.dts.client.DescribeTransmissionTaskAttributesExecutor;
import com.jdcloud.sdk.service.dts.model.GetTableRequest;
import com.jdcloud.sdk.service.dts.model.GetTableResponse;
import com.jdcloud.sdk.service.dts.client.GetTableExecutor;
import com.jdcloud.sdk.service.dts.model.DeleteTransmissionTaskRequest;
import com.jdcloud.sdk.service.dts.model.DeleteTransmissionTaskResponse;
import com.jdcloud.sdk.service.dts.client.DeleteTransmissionTaskExecutor;

/**
 * dtsClient
 */
public class DtsClient extends JdcloudClient {

    public final static String ApiVersion = "v2";
    private final static String UserAgentPrefix = "JdcloudSdkJava";
    public final static String ClientVersion = "1.2.11";
    public final static String DefaultEndpoint = "dts.jdcloud-api.com";
    public final static String ServiceName = "dts";
    public final static String UserAgent = UserAgentPrefix + "/" + ClientVersion + " " + ServiceName + "/" + ApiVersion;

    CredentialsProvider credentialsProvider;
    HttpRequestConfig httpRequestConfig;
    Environment environment = new Environment.Builder().endpoint(DefaultEndpoint).build();

    public CredentialsProvider getCredentialsProvider() {
        return credentialsProvider;
    }

    public HttpRequestConfig getHttpRequestConfig() {
        return httpRequestConfig;
    }

    public Environment getEnvironment() {
        return environment;
    }

    public String getUserAgent() {
        return UserAgent;
    }

    public String getServiceName() {
        return ServiceName;
    }

    public String getVersion() {
        return ApiVersion;
    }

    private DtsClient() {

    }

    public static Builder builder() {
        return new DefaultBuilder();
    }


    /**
     * 获取云实例详情
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetCloudInstanceResponse getCloudInstance(GetCloudInstanceRequest request) throws JdcloudSdkException {
        return new GetCloudInstanceExecutor().client(this).execute(request);
    }

    /**
     * 获取Table列表
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ListTablesResponse listTables(ListTablesRequest request) throws JdcloudSdkException {
        return new ListTablesExecutor().client(this).execute(request);
    }

    /**
     * 任务传输进度列表
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ListTaskProgressResponse listTaskProgress(ListTaskProgressRequest request) throws JdcloudSdkException {
        return new ListTaskProgressExecutor().client(this).execute(request);
    }

    /**
     * 停止数据传输任务
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public StopTransmissionTaskResponse stopTransmissionTask(StopTransmissionTaskRequest request) throws JdcloudSdkException {
        return new StopTransmissionTaskExecutor().client(this).execute(request);
    }

    /**
     * 启动数据传输任务
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public StartTransmissionTaskResponse startTransmissionTask(StartTransmissionTaskRequest request) throws JdcloudSdkException {
        return new StartTransmissionTaskExecutor().client(this).execute(request);
    }

    /**
     * 批量操作数据传输任务
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public BatchOperateTasksResponse batchOperateTasks(BatchOperateTasksRequest request) throws JdcloudSdkException {
        return new BatchOperateTasksExecutor().client(this).execute(request);
    }

    /**
     * 查询数据传输对象信息
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeTransmissionObjectResponse describeTransmissionObject(DescribeTransmissionObjectRequest request) throws JdcloudSdkException {
        return new DescribeTransmissionObjectExecutor().client(this).execute(request);
    }

    /**
     * 修改数据传输任务名称
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ModifyTransmissionTaskNameResponse modifyTransmissionTaskName(ModifyTransmissionTaskNameRequest request) throws JdcloudSdkException {
        return new ModifyTransmissionTaskNameExecutor().client(this).execute(request);
    }

    /**
     * 获取Topic列表
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ListTopicsResponse listTopics(ListTopicsRequest request) throws JdcloudSdkException {
        return new ListTopicsExecutor().client(this).execute(request);
    }

    /**
     * 查询数据传输日志信息
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeTransmissionLogResponse describeTransmissionLog(DescribeTransmissionLogRequest request) throws JdcloudSdkException {
        return new DescribeTransmissionLogExecutor().client(this).execute(request);
    }

    /**
     * 获取Process
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ListProcessesResponse listProcesses(ListProcessesRequest request) throws JdcloudSdkException {
        return new ListProcessesExecutor().client(this).execute(request);
    }

    /**
     * 跳过预检查项目
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public SkipPreCheckItemResponse skipPreCheckItem(SkipPreCheckItemRequest request) throws JdcloudSdkException {
        return new SkipPreCheckItemExecutor().client(this).execute(request);
    }

    /**
     * 继续数据传输任务
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ResumeTransmissionTaskResponse resumeTransmissionTask(ResumeTransmissionTaskRequest request) throws JdcloudSdkException {
        return new ResumeTransmissionTaskExecutor().client(this).execute(request);
    }

    /**
     * 暂停数据传输任务
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public SuspendTransmissionTaskResponse suspendTransmissionTask(SuspendTransmissionTaskRequest request) throws JdcloudSdkException {
        return new SuspendTransmissionTaskExecutor().client(this).execute(request);
    }

    /**
     * 测试连接
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ConnectivityTestResponse connectivityTest(ConnectivityTestRequest request) throws JdcloudSdkException {
        return new ConnectivityTestExecutor().client(this).execute(request);
    }

    /**
     * 实例规格列表。
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ListInstanceClassesResponse listInstanceClasses(ListInstanceClassesRequest request) throws JdcloudSdkException {
        return new ListInstanceClassesExecutor().client(this).execute(request);
    }

    /**
     * 任务传输进度详情
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetTaskProgressResponse getTaskProgress(GetTaskProgressRequest request) throws JdcloudSdkException {
        return new GetTaskProgressExecutor().client(this).execute(request);
    }

    /**
     * 获取Schema列表
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ListSchemasResponse listSchemas(ListSchemasRequest request) throws JdcloudSdkException {
        return new ListSchemasExecutor().client(this).execute(request);
    }

    /**
     * 预检查传输任务
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public PreCheckTransmissionTaskResponse preCheckTransmissionTask(PreCheckTransmissionTaskRequest request) throws JdcloudSdkException {
        return new PreCheckTransmissionTaskExecutor().client(this).execute(request);
    }

    /**
     * 查询数据传输任务信息
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeTransmissionTasksResponse describeTransmissionTasks(DescribeTransmissionTasksRequest request) throws JdcloudSdkException {
        return new DescribeTransmissionTasksExecutor().client(this).execute(request);
    }

    /**
     * 获取预检查结果
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribePreCheckResultResponse describePreCheckResult(DescribePreCheckResultRequest request) throws JdcloudSdkException {
        return new DescribePreCheckResultExecutor().client(this).execute(request);
    }

    /**
     * 获取云实例列表
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ListCloudInstancesResponse listCloudInstances(ListCloudInstancesRequest request) throws JdcloudSdkException {
        return new ListCloudInstancesExecutor().client(this).execute(request);
    }

    /**
     * 配置数据传输任务
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ConfigureTransmissionTaskResponse configureTransmissionTask(ConfigureTransmissionTaskRequest request) throws JdcloudSdkException {
        return new ConfigureTransmissionTaskExecutor().client(this).execute(request);
    }

    /**
     * 创建数据传输任务
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreateTransmissionTaskResponse createTransmissionTask(CreateTransmissionTaskRequest request) throws JdcloudSdkException {
        return new CreateTransmissionTaskExecutor().client(this).execute(request);
    }

    /**
     * 查询数据传输任务信息
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeTransmissionTaskAttributesResponse describeTransmissionTaskAttributes(DescribeTransmissionTaskAttributesRequest request) throws JdcloudSdkException {
        return new DescribeTransmissionTaskAttributesExecutor().client(this).execute(request);
    }

    /**
     * 获取Table详情
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetTableResponse getTable(GetTableRequest request) throws JdcloudSdkException {
        return new GetTableExecutor().client(this).execute(request);
    }

    /**
     * 删除数据传输任务
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteTransmissionTaskResponse deleteTransmissionTask(DeleteTransmissionTaskRequest request) throws JdcloudSdkException {
        return new DeleteTransmissionTaskExecutor().client(this).execute(request);
    }


    public interface Builder {
        public Builder credentialsProvider(CredentialsProvider provider);
        public Builder environment(Environment environment);
        public Builder httpRequestConfig(HttpRequestConfig config);
        public DtsClient build() throws JdcloudSdkException;
    }

    private static class DefaultBuilder implements Builder {

        private DtsClient dtsClient;

        public DefaultBuilder() {
            dtsClient = new DtsClient();
        }

        public DefaultBuilder credentialsProvider(CredentialsProvider provider) {
            dtsClient.credentialsProvider = provider;
            return this;
        }

        public DefaultBuilder httpRequestConfig(HttpRequestConfig config) {
            dtsClient.httpRequestConfig = config;
            return this;
        }

        public DtsClient build() throws JdcloudSdkException {

            if (dtsClient.credentialsProvider == null) {
                //if credentialsProvider not set, try load jdcloud global default  credentials provider
                dtsClient.credentialsProvider = Jdcloud.defaultInstance().getCredentialsProvider();
                if (dtsClient.credentialsProvider == null) {
                    throw new JdcloudValidateException("DtsClient build error: jdcloud credentials provider not set");
                }
            }
            if (dtsClient.httpRequestConfig == null) {
                dtsClient.httpRequestConfig = Jdcloud.defaultInstance().getHttpRequestConfig();
                if (dtsClient.httpRequestConfig == null) {
                    throw new JdcloudValidateException("DtsClient build error: http request config not set");
                }
            }
            return dtsClient;
        }

        public Builder environment(Environment environment) {
            dtsClient.environment = environment;
            return this;
        }
    }
}
