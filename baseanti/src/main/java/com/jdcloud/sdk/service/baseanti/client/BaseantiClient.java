/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Anti-DDoS Basic APIs
 * DDoS 基础防护防护 IP、攻击记录相关接口
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.baseanti.client;

import com.jdcloud.sdk.JdcloudSdkException;
import com.jdcloud.sdk.auth.CredentialsProvider;
import com.jdcloud.sdk.client.Environment;
import com.jdcloud.sdk.client.Jdcloud;
import com.jdcloud.sdk.client.JdcloudClient;
import com.jdcloud.sdk.client.JdcloudValidateException;
import com.jdcloud.sdk.http.HttpRequestConfig;
import com.jdcloud.sdk.service.baseanti.model.DescribeWafIpResourcesRequest;
import com.jdcloud.sdk.service.baseanti.model.DescribeWafIpResourcesResponse;
import com.jdcloud.sdk.service.baseanti.client.DescribeWafIpResourcesExecutor;
import com.jdcloud.sdk.service.baseanti.model.DescribeIpSafetyInfoRequest;
import com.jdcloud.sdk.service.baseanti.model.DescribeIpSafetyInfoResponse;
import com.jdcloud.sdk.service.baseanti.client.DescribeIpSafetyInfoExecutor;
import com.jdcloud.sdk.service.baseanti.model.SetIpCleanThresholdRequest;
import com.jdcloud.sdk.service.baseanti.model.SetIpCleanThresholdResponse;
import com.jdcloud.sdk.service.baseanti.client.SetIpCleanThresholdExecutor;
import com.jdcloud.sdk.service.baseanti.model.DescribeIpMonitorFlowRequest;
import com.jdcloud.sdk.service.baseanti.model.DescribeIpMonitorFlowResponse;
import com.jdcloud.sdk.service.baseanti.client.DescribeIpMonitorFlowExecutor;
import com.jdcloud.sdk.service.baseanti.model.DescribeIpResourcesRequest;
import com.jdcloud.sdk.service.baseanti.model.DescribeIpResourcesResponse;
import com.jdcloud.sdk.service.baseanti.client.DescribeIpResourcesExecutor;
import com.jdcloud.sdk.service.baseanti.model.DescribeAttackStatisticsRequest;
import com.jdcloud.sdk.service.baseanti.model.DescribeAttackStatisticsResponse;
import com.jdcloud.sdk.service.baseanti.client.DescribeAttackStatisticsExecutor;
import com.jdcloud.sdk.service.baseanti.model.DescribeElasticIpResourcesRequest;
import com.jdcloud.sdk.service.baseanti.model.DescribeElasticIpResourcesResponse;
import com.jdcloud.sdk.service.baseanti.client.DescribeElasticIpResourcesExecutor;
import com.jdcloud.sdk.service.baseanti.model.DescribeCcsIpResourcesRequest;
import com.jdcloud.sdk.service.baseanti.model.DescribeCcsIpResourcesResponse;
import com.jdcloud.sdk.service.baseanti.client.DescribeCcsIpResourcesExecutor;
import com.jdcloud.sdk.service.baseanti.model.DescribeIpCleanThresholdRangeRequest;
import com.jdcloud.sdk.service.baseanti.model.DescribeIpCleanThresholdRangeResponse;
import com.jdcloud.sdk.service.baseanti.client.DescribeIpCleanThresholdRangeExecutor;
import com.jdcloud.sdk.service.baseanti.model.DescribeAttackTypeCountRequest;
import com.jdcloud.sdk.service.baseanti.model.DescribeAttackTypeCountResponse;
import com.jdcloud.sdk.service.baseanti.client.DescribeAttackTypeCountExecutor;
import com.jdcloud.sdk.service.baseanti.model.DescribeIpResourceProtectInfoRequest;
import com.jdcloud.sdk.service.baseanti.model.DescribeIpResourceProtectInfoResponse;
import com.jdcloud.sdk.service.baseanti.client.DescribeIpResourceProtectInfoExecutor;
import com.jdcloud.sdk.service.baseanti.model.DescribeCpsIpResourcesRequest;
import com.jdcloud.sdk.service.baseanti.model.DescribeCpsIpResourcesResponse;
import com.jdcloud.sdk.service.baseanti.client.DescribeCpsIpResourcesExecutor;
import com.jdcloud.sdk.service.baseanti.model.SetCleanThresholdRequest;
import com.jdcloud.sdk.service.baseanti.model.SetCleanThresholdResponse;
import com.jdcloud.sdk.service.baseanti.client.SetCleanThresholdExecutor;
import com.jdcloud.sdk.service.baseanti.model.DescribeIpResourceFlowRequest;
import com.jdcloud.sdk.service.baseanti.model.DescribeIpResourceFlowResponse;
import com.jdcloud.sdk.service.baseanti.client.DescribeIpResourceFlowExecutor;
import com.jdcloud.sdk.service.baseanti.model.DescribeIpResourceInfoRequest;
import com.jdcloud.sdk.service.baseanti.model.DescribeIpResourceInfoResponse;
import com.jdcloud.sdk.service.baseanti.client.DescribeIpResourceInfoExecutor;
import com.jdcloud.sdk.service.baseanti.model.DescribeAttackLogsRequest;
import com.jdcloud.sdk.service.baseanti.model.DescribeAttackLogsResponse;
import com.jdcloud.sdk.service.baseanti.client.DescribeAttackLogsExecutor;

/**
 * baseantiClient
 */
public class BaseantiClient extends JdcloudClient {

    public final static String ApiVersion = "v1";
    private final static String UserAgentPrefix = "JdcloudSdkJava";
    public final static String ClientVersion = "1.2.4";
    public final static String DefaultEndpoint = "baseanti.jdcloud-api.com";
    public final static String ServiceName = "baseanti";
    public final static String UserAgent = UserAgentPrefix + "/" + ClientVersion + " " + ServiceName + "/" + ApiVersion;

    CredentialsProvider credentialsProvider;
    HttpRequestConfig httpRequestConfig;
    Environment environment = new Environment.Builder().endpoint(DefaultEndpoint).build();

    public CredentialsProvider getCredentialsProvider() {
        return credentialsProvider;
    }

    public HttpRequestConfig getHttpRequestConfig() {
        return httpRequestConfig;
    }

    public Environment getEnvironment() {
        return environment;
    }

    public String getUserAgent() {
        return UserAgent;
    }

    public String getServiceName() {
        return ServiceName;
    }

    public String getVersion() {
        return ApiVersion;
    }

    private BaseantiClient() {

    }

    public static Builder builder() {
        return new DefaultBuilder();
    }


    /**
     * 查询基础防护已防护的Web应用防火墙 IP 的安全信息
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeWafIpResourcesResponse describeWafIpResources(DescribeWafIpResourcesRequest request) throws JdcloudSdkException {
        return new DescribeWafIpResourcesExecutor().client(this).execute(request);
    }

    /**
     * 查询基础防护已防护公网 IP 安全信息, 支持 ipv4 和 ipv6
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeIpSafetyInfoResponse describeIpSafetyInfo(DescribeIpSafetyInfoRequest request) throws JdcloudSdkException {
        return new DescribeIpSafetyInfoExecutor().client(this).execute(request);
    }

    /**
     * 设置基础防护已防护公网 IP 的清洗阈值, 支持 ipv4 和 ipv6
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public SetIpCleanThresholdResponse setIpCleanThreshold(SetIpCleanThresholdRequest request) throws JdcloudSdkException {
        return new SetIpCleanThresholdExecutor().client(this).execute(request);
    }

    /**
     * 查询多个公网 IP 的监控流量, 支持 ipv4 和 ipv6
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeIpMonitorFlowResponse describeIpMonitorFlow(DescribeIpMonitorFlowRequest request) throws JdcloudSdkException {
        return new DescribeIpMonitorFlowExecutor().client(this).execute(request);
    }

    /**
     * 查询基础防护已防护的公网 IP 的安全信息列表. 包括私有网络的弹性公网 IP(运营商级 NAT 保留地址除外), 云物理服务器的公网 IP 和弹性公网 IP. (已废弃, 建议使用 &lt;a href&#x3D;&#39;http://docs.jdcloud.com/anti-ddos-basic/api/describeelasticipresources&#39;&gt;describeElasticIpResources&lt;/a&gt;, &lt;a href&#x3D;&#39;http://docs.jdcloud.com/anti-ddos-basic/api/describecpsipresources&#39;&gt;describeCpsIpResources&lt;/a&gt; 接口)
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeIpResourcesResponse describeIpResources(DescribeIpResourcesRequest request) throws JdcloudSdkException {
        return new DescribeIpResourcesExecutor().client(this).execute(request);
    }

    /**
     * 攻击情况统计
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeAttackStatisticsResponse describeAttackStatistics(DescribeAttackStatisticsRequest request) throws JdcloudSdkException {
        return new DescribeAttackStatisticsExecutor().client(this).execute(request);
    }

    /**
     * 查询基础防护已防护的私有网络的弹性公网 IP 的安全信息. 包括私有网络的弹性公网 IP(运营商级 NAT 保留地址除外)

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeElasticIpResourcesResponse describeElasticIpResources(DescribeElasticIpResourcesRequest request) throws JdcloudSdkException {
        return new DescribeElasticIpResourcesExecutor().client(this).execute(request);
    }

    /**
     * 查询基础防护已防护的托管区 IP 的安全信息
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeCcsIpResourcesResponse describeCcsIpResources(DescribeCcsIpResourcesRequest request) throws JdcloudSdkException {
        return new DescribeCcsIpResourcesExecutor().client(this).execute(request);
    }

    /**
     * 查询公网 IP 可设置清洗阈值范围, 支持 ipv4 和 ipv6
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeIpCleanThresholdRangeResponse describeIpCleanThresholdRange(DescribeIpCleanThresholdRangeRequest request) throws JdcloudSdkException {
        return new DescribeIpCleanThresholdRangeExecutor().client(this).execute(request);
    }

    /**
     * 查询各类型攻击次数
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeAttackTypeCountResponse describeAttackTypeCount(DescribeAttackTypeCountRequest request) throws JdcloudSdkException {
        return new DescribeAttackTypeCountExecutor().client(this).execute(request);
    }

    /**
     * 查询公网 IP 的攻击记录, 仅支持 ipv4. (已废弃, 建议使用 &lt;a href&#x3D;&#39;http://docs.jdcloud.com/anti-ddos-basic/api/describeattacklogs&#39;&gt;describeAttackLogs&lt;/a&gt; 接口)

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeIpResourceProtectInfoResponse describeIpResourceProtectInfo(DescribeIpResourceProtectInfoRequest request) throws JdcloudSdkException {
        return new DescribeIpResourceProtectInfoExecutor().client(this).execute(request);
    }

    /**
     * 查询基础防护已防护的云物理服务器公网 IP 的安全信息. 包括云物理服务器的公网 IP 和弹性公网 IP.

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeCpsIpResourcesResponse describeCpsIpResources(DescribeCpsIpResourcesRequest request) throws JdcloudSdkException {
        return new DescribeCpsIpResourcesExecutor().client(this).execute(request);
    }

    /**
     * 设置基础防护已防护公网 IP 的清洗阈值, 仅支持 ipv4. (已废弃, 建议使用 &lt;a href&#x3D;&#39;http://docs.jdcloud.com/anti-ddos-basic/api/setipcleanthreshold&#39;&gt;setIpCleanThreshold&lt;/a&gt; 接口)

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public SetCleanThresholdResponse setCleanThreshold(SetCleanThresholdRequest request) throws JdcloudSdkException {
        return new SetCleanThresholdExecutor().client(this).execute(request);
    }

    /**
     * 查询公网 IP 的 endTime 之前 15 分钟内监控流量, 仅支持 ipv4. (已废弃, 建议使用 &lt;a href&#x3D;&#39;http://docs.jdcloud.com/anti-ddos-basic/api/describeipmonitorflow&#39;&gt;describeIpMonitorFlow&lt;/a&gt; 接口)

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeIpResourceFlowResponse describeIpResourceFlow(DescribeIpResourceFlowRequest request) throws JdcloudSdkException {
        return new DescribeIpResourceFlowExecutor().client(this).execute(request);
    }

    /**
     * 查询公网 IP 安全信息, 仅支持 ipv4. (已废弃, 建议使用 &lt;a href&#x3D;&#39;http://docs.jdcloud.com/anti-ddos-basic/api/describeipsafetyinfo&#39;&gt;describeIpSafetyInfo&lt;/a&gt; 接口)

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeIpResourceInfoResponse describeIpResourceInfo(DescribeIpResourceInfoRequest request) throws JdcloudSdkException {
        return new DescribeIpResourceInfoExecutor().client(this).execute(request);
    }

    /**
     * 查询攻击记录
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeAttackLogsResponse describeAttackLogs(DescribeAttackLogsRequest request) throws JdcloudSdkException {
        return new DescribeAttackLogsExecutor().client(this).execute(request);
    }


    public interface Builder {
        public Builder credentialsProvider(CredentialsProvider provider);
        public Builder environment(Environment environment);
        public Builder httpRequestConfig(HttpRequestConfig config);
        public BaseantiClient build() throws JdcloudSdkException;
    }

    private static class DefaultBuilder implements Builder {

        private BaseantiClient baseantiClient;

        public DefaultBuilder() {
            baseantiClient = new BaseantiClient();
        }

        public DefaultBuilder credentialsProvider(CredentialsProvider provider) {
            baseantiClient.credentialsProvider = provider;
            return this;
        }

        public DefaultBuilder httpRequestConfig(HttpRequestConfig config) {
            baseantiClient.httpRequestConfig = config;
            return this;
        }

        public BaseantiClient build() throws JdcloudSdkException {

            if (baseantiClient.credentialsProvider == null) {
                //if credentialsProvider not set, try load jdcloud global default  credentials provider
                baseantiClient.credentialsProvider = Jdcloud.defaultInstance().getCredentialsProvider();
                if (baseantiClient.credentialsProvider == null) {
                    throw new JdcloudValidateException("BaseantiClient build error: jdcloud credentials provider not set");
                }
            }
            if (baseantiClient.httpRequestConfig == null) {
                baseantiClient.httpRequestConfig = Jdcloud.defaultInstance().getHttpRequestConfig();
                if (baseantiClient.httpRequestConfig == null) {
                    throw new JdcloudValidateException("BaseantiClient build error: http request config not set");
                }
            }
            return baseantiClient;
        }

        public Builder environment(Environment environment) {
            baseantiClient.environment = environment;
            return this;
        }
    }
}
