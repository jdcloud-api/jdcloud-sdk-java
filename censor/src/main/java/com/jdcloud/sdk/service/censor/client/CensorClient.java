/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 京东云内容安全-OpenAPI接口
 * 京东云内容安全-OpenAPI接口
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.censor.client;

import com.jdcloud.sdk.JdcloudSdkException;
import com.jdcloud.sdk.auth.CredentialsProvider;
import com.jdcloud.sdk.client.Environment;
import com.jdcloud.sdk.client.Jdcloud;
import com.jdcloud.sdk.client.JdcloudClient;
import com.jdcloud.sdk.client.JdcloudValidateException;
import com.jdcloud.sdk.http.HttpRequestConfig;
import com.jdcloud.sdk.service.censor.model.AudioResultsRequest;
import com.jdcloud.sdk.service.censor.model.AudioResultsResponse;
import com.jdcloud.sdk.service.censor.client.AudioResultsExecutor;
import com.jdcloud.sdk.service.censor.model.DeleteLimitRequest;
import com.jdcloud.sdk.service.censor.model.DeleteLimitResponse;
import com.jdcloud.sdk.service.censor.client.DeleteLimitExecutor;
import com.jdcloud.sdk.service.censor.model.AsyncAudioScanRequest;
import com.jdcloud.sdk.service.censor.model.AsyncAudioScanResponse;
import com.jdcloud.sdk.service.censor.client.AsyncAudioScanExecutor;
import com.jdcloud.sdk.service.censor.model.AsyncAudioScanV2Request;
import com.jdcloud.sdk.service.censor.model.AsyncAudioScanV2Response;
import com.jdcloud.sdk.service.censor.client.AsyncAudioScanV2Executor;
import com.jdcloud.sdk.service.censor.model.ImageResultsRequest;
import com.jdcloud.sdk.service.censor.model.ImageResultsResponse;
import com.jdcloud.sdk.service.censor.client.ImageResultsExecutor;
import com.jdcloud.sdk.service.censor.model.DeleteCensorLibRequest;
import com.jdcloud.sdk.service.censor.model.DeleteCensorLibResponse;
import com.jdcloud.sdk.service.censor.client.DeleteCensorLibExecutor;
import com.jdcloud.sdk.service.censor.model.TextScanRequest;
import com.jdcloud.sdk.service.censor.model.TextScanResponse;
import com.jdcloud.sdk.service.censor.client.TextScanExecutor;
import com.jdcloud.sdk.service.censor.model.TextResultsV2Request;
import com.jdcloud.sdk.service.censor.model.TextResultsV2Response;
import com.jdcloud.sdk.service.censor.client.TextResultsV2Executor;
import com.jdcloud.sdk.service.censor.model.DeleteCensorLibItemsRequest;
import com.jdcloud.sdk.service.censor.model.DeleteCensorLibItemsResponse;
import com.jdcloud.sdk.service.censor.client.DeleteCensorLibItemsExecutor;
import com.jdcloud.sdk.service.censor.model.AsyncImageScanRequest;
import com.jdcloud.sdk.service.censor.model.AsyncImageScanResponse;
import com.jdcloud.sdk.service.censor.client.AsyncImageScanExecutor;
import com.jdcloud.sdk.service.censor.model.VideoResultsV2Request;
import com.jdcloud.sdk.service.censor.model.VideoResultsV2Response;
import com.jdcloud.sdk.service.censor.client.VideoResultsV2Executor;
import com.jdcloud.sdk.service.censor.model.ImageScanRequest;
import com.jdcloud.sdk.service.censor.model.ImageScanResponse;
import com.jdcloud.sdk.service.censor.client.ImageScanExecutor;
import com.jdcloud.sdk.service.censor.model.AudioCallbackV2Request;
import com.jdcloud.sdk.service.censor.model.AudioCallbackV2Response;
import com.jdcloud.sdk.service.censor.client.AudioCallbackV2Executor;
import com.jdcloud.sdk.service.censor.model.InnerTextScanRequest;
import com.jdcloud.sdk.service.censor.model.InnerTextScanResponse;
import com.jdcloud.sdk.service.censor.client.InnerTextScanExecutor;
import com.jdcloud.sdk.service.censor.model.VideoResultsRequest;
import com.jdcloud.sdk.service.censor.model.VideoResultsResponse;
import com.jdcloud.sdk.service.censor.client.VideoResultsExecutor;
import com.jdcloud.sdk.service.censor.model.AsyncVideoScanRequest;
import com.jdcloud.sdk.service.censor.model.AsyncVideoScanResponse;
import com.jdcloud.sdk.service.censor.client.AsyncVideoScanExecutor;
import com.jdcloud.sdk.service.censor.model.VideoCallbackV2Request;
import com.jdcloud.sdk.service.censor.model.VideoCallbackV2Response;
import com.jdcloud.sdk.service.censor.client.VideoCallbackV2Executor;
import com.jdcloud.sdk.service.censor.model.AudioResultsV2Request;
import com.jdcloud.sdk.service.censor.model.AudioResultsV2Response;
import com.jdcloud.sdk.service.censor.client.AudioResultsV2Executor;
import com.jdcloud.sdk.service.censor.model.AsyncVideoScanV2Request;
import com.jdcloud.sdk.service.censor.model.AsyncVideoScanV2Response;
import com.jdcloud.sdk.service.censor.client.AsyncVideoScanV2Executor;
import com.jdcloud.sdk.service.censor.model.ImageScanV2Request;
import com.jdcloud.sdk.service.censor.model.ImageScanV2Response;
import com.jdcloud.sdk.service.censor.client.ImageScanV2Executor;
import com.jdcloud.sdk.service.censor.model.TextScanV2Request;
import com.jdcloud.sdk.service.censor.model.TextScanV2Response;
import com.jdcloud.sdk.service.censor.client.TextScanV2Executor;

/**
 * censorClient
 */
public class CensorClient extends JdcloudClient {

    public final static String ApiVersion = "v1";
    private final static String UserAgentPrefix = "JdcloudSdkJava";
    public final static String ClientVersion = "1.2.3";
    public final static String DefaultEndpoint = "censor.jdcloud-api.com";
    public final static String ServiceName = "censor";
    public final static String UserAgent = UserAgentPrefix + "/" + ClientVersion + " " + ServiceName + "/" + ApiVersion;

    CredentialsProvider credentialsProvider;
    HttpRequestConfig httpRequestConfig;
    Environment environment = new Environment.Builder().endpoint(DefaultEndpoint).build();

    public CredentialsProvider getCredentialsProvider() {
        return credentialsProvider;
    }

    public HttpRequestConfig getHttpRequestConfig() {
        return httpRequestConfig;
    }

    public Environment getEnvironment() {
        return environment;
    }

    public String getUserAgent() {
        return UserAgent;
    }

    public String getServiceName() {
        return ServiceName;
    }

    public String getVersion() {
        return ApiVersion;
    }

    private CensorClient() {

    }

    public static Builder builder() {
        return new DefaultBuilder();
    }


    /**
     * 查看音频异步检测结果
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public AudioResultsResponse audioResults(AudioResultsRequest request) throws JdcloudSdkException {
        return new AudioResultsExecutor().client(this).execute(request);
    }

    /**
     * 删除限制参数配置
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteLimitResponse deleteLimit(DeleteLimitRequest request) throws JdcloudSdkException {
        return new DeleteLimitExecutor().client(this).execute(request);
    }

    /**
     * 提交音频异步检测任务
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public AsyncAudioScanResponse asyncAudioScan(AsyncAudioScanRequest request) throws JdcloudSdkException {
        return new AsyncAudioScanExecutor().client(this).execute(request);
    }

    /**
     * 提交音频异步检测任务V2
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public AsyncAudioScanV2Response asyncAudioScanV2(AsyncAudioScanV2Request request) throws JdcloudSdkException {
        return new AsyncAudioScanV2Executor().client(this).execute(request);
    }

    /**
     * 查看图片异步检测结果
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ImageResultsResponse imageResults(ImageResultsRequest request) throws JdcloudSdkException {
        return new ImageResultsExecutor().client(this).execute(request);
    }

    /**
     * 删除敏感库
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteCensorLibResponse deleteCensorLib(DeleteCensorLibRequest request) throws JdcloudSdkException {
        return new DeleteCensorLibExecutor().client(this).execute(request);
    }

    /**
     * 文本同步检测-检测文本中是否包含违规信息
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public TextScanResponse textScan(TextScanRequest request) throws JdcloudSdkException {
        return new TextScanExecutor().client(this).execute(request);
    }

    /**
     * 查看文本疑似结果，小于10s/20次，请求频率过快服务器会拒绝处理
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public TextResultsV2Response textResultsV2(TextResultsV2Request request) throws JdcloudSdkException {
        return new TextResultsV2Executor().client(this).execute(request);
    }

    /**
     * 删除敏感库Item
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteCensorLibItemsResponse deleteCensorLibItems(DeleteCensorLibItemsRequest request) throws JdcloudSdkException {
        return new DeleteCensorLibItemsExecutor().client(this).execute(request);
    }

    /**
     * 提交图片异步检测任务
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public AsyncImageScanResponse asyncImageScan(AsyncImageScanRequest request) throws JdcloudSdkException {
        return new AsyncImageScanExecutor().client(this).execute(request);
    }

    /**
     * 根据taskid查询视频检测结果，小于10s/20次，请求频率过快服务器会拒绝处理
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public VideoResultsV2Response videoResultsV2(VideoResultsV2Request request) throws JdcloudSdkException {
        return new VideoResultsV2Executor().client(this).execute(request);
    }

    /**
     * 图片同步检测
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ImageScanResponse imageScan(ImageScanRequest request) throws JdcloudSdkException {
        return new ImageScanExecutor().client(this).execute(request);
    }

    /**
     * 语音检测结果获取接口，获取离线处理的数据后，下次调用，不会再次返回之前获取过的离线数据。小于10s/20次，请求频率过快服务器会拒绝处理
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public AudioCallbackV2Response audioCallbackV2(AudioCallbackV2Request request) throws JdcloudSdkException {
        return new AudioCallbackV2Executor().client(this).execute(request);
    }

    /**
     * 文本同步检测-检测文本中是否包含违规信息
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public InnerTextScanResponse innerTextScan(InnerTextScanRequest request) throws JdcloudSdkException {
        return new InnerTextScanExecutor().client(this).execute(request);
    }

    /**
     * 查看视频异步检测结果
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public VideoResultsResponse videoResults(VideoResultsRequest request) throws JdcloudSdkException {
        return new VideoResultsExecutor().client(this).execute(request);
    }

    /**
     * 提交视频异步检测任务
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public AsyncVideoScanResponse asyncVideoScan(AsyncVideoScanRequest request) throws JdcloudSdkException {
        return new AsyncVideoScanExecutor().client(this).execute(request);
    }

    /**
     * 视频检测结果获取接口，获取离线处理的数据后，下次调用，不会再次返回之前获取过的离线数据。小于10s/20次，请求频率过快服务器会拒绝处理
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public VideoCallbackV2Response videoCallbackV2(VideoCallbackV2Request request) throws JdcloudSdkException {
        return new VideoCallbackV2Executor().client(this).execute(request);
    }

    /**
     * 根据taskid查询语音检测结果，小于10s/20次，请求频率过快服务器会拒绝处理
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public AudioResultsV2Response audioResultsV2(AudioResultsV2Request request) throws JdcloudSdkException {
        return new AudioResultsV2Executor().client(this).execute(request);
    }

    /**
     * 提交视频异步检测任务V2
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public AsyncVideoScanV2Response asyncVideoScanV2(AsyncVideoScanV2Request request) throws JdcloudSdkException {
        return new AsyncVideoScanV2Executor().client(this).execute(request);
    }

    /**
     * 图片同步检测v2
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ImageScanV2Response imageScanV2(ImageScanV2Request request) throws JdcloudSdkException {
        return new ImageScanV2Executor().client(this).execute(request);
    }

    /**
     * 文本同步检测-检测文本中是否包含违规信息
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public TextScanV2Response textScanV2(TextScanV2Request request) throws JdcloudSdkException {
        return new TextScanV2Executor().client(this).execute(request);
    }


    public interface Builder {
        public Builder credentialsProvider(CredentialsProvider provider);
        public Builder environment(Environment environment);
        public Builder httpRequestConfig(HttpRequestConfig config);
        public CensorClient build() throws JdcloudSdkException;
    }

    private static class DefaultBuilder implements Builder {

        private CensorClient censorClient;

        public DefaultBuilder() {
            censorClient = new CensorClient();
        }

        public DefaultBuilder credentialsProvider(CredentialsProvider provider) {
            censorClient.credentialsProvider = provider;
            return this;
        }

        public DefaultBuilder httpRequestConfig(HttpRequestConfig config) {
            censorClient.httpRequestConfig = config;
            return this;
        }

        public CensorClient build() throws JdcloudSdkException {

            if (censorClient.credentialsProvider == null) {
                //if credentialsProvider not set, try load jdcloud global default  credentials provider
                censorClient.credentialsProvider = Jdcloud.defaultInstance().getCredentialsProvider();
                if (censorClient.credentialsProvider == null) {
                    throw new JdcloudValidateException("CensorClient build error: jdcloud credentials provider not set");
                }
            }
            if (censorClient.httpRequestConfig == null) {
                censorClient.httpRequestConfig = Jdcloud.defaultInstance().getHttpRequestConfig();
                if (censorClient.httpRequestConfig == null) {
                    throw new JdcloudValidateException("CensorClient build error: http request config not set");
                }
            }
            return censorClient;
        }

        public Builder environment(Environment environment) {
            censorClient.environment = environment;
            return this;
        }
    }
}
