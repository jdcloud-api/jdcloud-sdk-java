/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 视频检测相关接口
 * API related to video scan
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.censor.model;

import java.util.List;
import java.util.ArrayList;
import com.jdcloud.sdk.service.JdcloudRequest;

/**
 * 提交视频异步检测任务
 */
public class AsyncVideoScanRequest extends JdcloudRequest implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 机审策略，eg: default
     */
    private String bizType;

    /**
     * 是否直播。默认为false，表示为普通视频检测；若是直播检测，该值必须传入true。
     */
    private Boolean live;

    /**
     * 指定检测场景
     */
    private List<String> scenes;

    /**
     * 视频中语音的检测场景
     */
    private List<String> audioScenes;

    /**
     * 检测任务列表，包含一个或多个元素。每个元素是个结构体，最多可添加10个元素，每个元素的具体结构描述见videoTask。
     */
    private List<VideoTask> tasks;

    /**
     * 异步检测结果回调通知您的URL，支持HTTP/HTTPS。该字段为空时，您必须定时检索检测结果。
     */
    private String callback;

    /**
     * 随机字符串，该值用于回调通知请求中的签名。当使用callback时，该字段必须提供。
     */
    private String seed;


    /**
     * get 机审策略，eg: default
     *
     * @return
     */
    public String getBizType() {
        return bizType;
    }

    /**
     * set 机审策略，eg: default
     *
     * @param bizType
     */
    public void setBizType(String bizType) {
        this.bizType = bizType;
    }

    /**
     * get 是否直播。默认为false，表示为普通视频检测；若是直播检测，该值必须传入true。
     *
     * @return
     */
    public Boolean getLive() {
        return live;
    }

    /**
     * set 是否直播。默认为false，表示为普通视频检测；若是直播检测，该值必须传入true。
     *
     * @param live
     */
    public void setLive(Boolean live) {
        this.live = live;
    }

    /**
     * get 指定检测场景
     *
     * @return
     */
    public List<String> getScenes() {
        return scenes;
    }

    /**
     * set 指定检测场景
     *
     * @param scenes
     */
    public void setScenes(List<String> scenes) {
        this.scenes = scenes;
    }

    /**
     * get 视频中语音的检测场景
     *
     * @return
     */
    public List<String> getAudioScenes() {
        return audioScenes;
    }

    /**
     * set 视频中语音的检测场景
     *
     * @param audioScenes
     */
    public void setAudioScenes(List<String> audioScenes) {
        this.audioScenes = audioScenes;
    }

    /**
     * get 检测任务列表，包含一个或多个元素。每个元素是个结构体，最多可添加10个元素，每个元素的具体结构描述见videoTask。
     *
     * @return
     */
    public List<VideoTask> getTasks() {
        return tasks;
    }

    /**
     * set 检测任务列表，包含一个或多个元素。每个元素是个结构体，最多可添加10个元素，每个元素的具体结构描述见videoTask。
     *
     * @param tasks
     */
    public void setTasks(List<VideoTask> tasks) {
        this.tasks = tasks;
    }

    /**
     * get 异步检测结果回调通知您的URL，支持HTTP/HTTPS。该字段为空时，您必须定时检索检测结果。
     *
     * @return
     */
    public String getCallback() {
        return callback;
    }

    /**
     * set 异步检测结果回调通知您的URL，支持HTTP/HTTPS。该字段为空时，您必须定时检索检测结果。
     *
     * @param callback
     */
    public void setCallback(String callback) {
        this.callback = callback;
    }

    /**
     * get 随机字符串，该值用于回调通知请求中的签名。当使用callback时，该字段必须提供。
     *
     * @return
     */
    public String getSeed() {
        return seed;
    }

    /**
     * set 随机字符串，该值用于回调通知请求中的签名。当使用callback时，该字段必须提供。
     *
     * @param seed
     */
    public void setSeed(String seed) {
        this.seed = seed;
    }


    /**
     * set 机审策略，eg: default
     *
     * @param bizType
     */
    public AsyncVideoScanRequest bizType(String bizType) {
        this.bizType = bizType;
        return this;
    }

    /**
     * set 是否直播。默认为false，表示为普通视频检测；若是直播检测，该值必须传入true。
     *
     * @param live
     */
    public AsyncVideoScanRequest live(Boolean live) {
        this.live = live;
        return this;
    }

    /**
     * set 指定检测场景
     *
     * @param scenes
     */
    public AsyncVideoScanRequest scenes(List<String> scenes) {
        this.scenes = scenes;
        return this;
    }

    /**
     * set 视频中语音的检测场景
     *
     * @param audioScenes
     */
    public AsyncVideoScanRequest audioScenes(List<String> audioScenes) {
        this.audioScenes = audioScenes;
        return this;
    }

    /**
     * set 检测任务列表，包含一个或多个元素。每个元素是个结构体，最多可添加10个元素，每个元素的具体结构描述见videoTask。
     *
     * @param tasks
     */
    public AsyncVideoScanRequest tasks(List<VideoTask> tasks) {
        this.tasks = tasks;
        return this;
    }

    /**
     * set 异步检测结果回调通知您的URL，支持HTTP/HTTPS。该字段为空时，您必须定时检索检测结果。
     *
     * @param callback
     */
    public AsyncVideoScanRequest callback(String callback) {
        this.callback = callback;
        return this;
    }

    /**
     * set 随机字符串，该值用于回调通知请求中的签名。当使用callback时，该字段必须提供。
     *
     * @param seed
     */
    public AsyncVideoScanRequest seed(String seed) {
        this.seed = seed;
        return this;
    }


    /**
     * add item to 指定检测场景
     *
     * @param scene
     */
    public void addScene(String scene) {
        if (this.scenes == null) {
            this.scenes = new ArrayList<>();
        }
        this.scenes.add(scene);
    }

    /**
     * add item to 视频中语音的检测场景
     *
     * @param audioScene
     */
    public void addAudioScene(String audioScene) {
        if (this.audioScenes == null) {
            this.audioScenes = new ArrayList<>();
        }
        this.audioScenes.add(audioScene);
    }

    /**
     * add item to 检测任务列表，包含一个或多个元素。每个元素是个结构体，最多可添加10个元素，每个元素的具体结构描述见videoTask。
     *
     * @param task
     */
    public void addTask(VideoTask task) {
        if (this.tasks == null) {
            this.tasks = new ArrayList<>();
        }
        this.tasks.add(task);
    }

}