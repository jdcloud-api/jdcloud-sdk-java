/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 专有宿主机
 * 专有宿主机、专有宿主机池相关的接口
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.dh.client;

import com.jdcloud.sdk.JdcloudSdkException;
import com.jdcloud.sdk.auth.CredentialsProvider;
import com.jdcloud.sdk.client.Environment;
import com.jdcloud.sdk.client.Jdcloud;
import com.jdcloud.sdk.client.JdcloudClient;
import com.jdcloud.sdk.client.JdcloudValidateException;
import com.jdcloud.sdk.http.HttpRequestConfig;
import com.jdcloud.sdk.service.dh.model.DescribeDedicatedHostsRequest;
import com.jdcloud.sdk.service.dh.model.DescribeDedicatedHostsResponse;
import com.jdcloud.sdk.service.dh.client.DescribeDedicatedHostsExecutor;
import com.jdcloud.sdk.service.dh.model.DescribeDedicatedHostTypeRequest;
import com.jdcloud.sdk.service.dh.model.DescribeDedicatedHostTypeResponse;
import com.jdcloud.sdk.service.dh.client.DescribeDedicatedHostTypeExecutor;
import com.jdcloud.sdk.service.dh.model.AllocDedicatedPoolRequest;
import com.jdcloud.sdk.service.dh.model.AllocDedicatedPoolResponse;
import com.jdcloud.sdk.service.dh.client.AllocDedicatedPoolExecutor;
import com.jdcloud.sdk.service.dh.model.AllocDedicatedHostsRequest;
import com.jdcloud.sdk.service.dh.model.AllocDedicatedHostsResponse;
import com.jdcloud.sdk.service.dh.client.AllocDedicatedHostsExecutor;
import com.jdcloud.sdk.service.dh.model.ReleaseDedicatedHostRequest;
import com.jdcloud.sdk.service.dh.model.ReleaseDedicatedHostResponse;
import com.jdcloud.sdk.service.dh.client.ReleaseDedicatedHostExecutor;
import com.jdcloud.sdk.service.dh.model.ModifyDedicatedPoolAttributeRequest;
import com.jdcloud.sdk.service.dh.model.ModifyDedicatedPoolAttributeResponse;
import com.jdcloud.sdk.service.dh.client.ModifyDedicatedPoolAttributeExecutor;
import com.jdcloud.sdk.service.dh.model.DescribeQuotasRequest;
import com.jdcloud.sdk.service.dh.model.DescribeQuotasResponse;
import com.jdcloud.sdk.service.dh.client.DescribeQuotasExecutor;
import com.jdcloud.sdk.service.dh.model.ModifyDedicatedHostAttributeRequest;
import com.jdcloud.sdk.service.dh.model.ModifyDedicatedHostAttributeResponse;
import com.jdcloud.sdk.service.dh.client.ModifyDedicatedHostAttributeExecutor;
import com.jdcloud.sdk.service.dh.model.ReleaseDedicatedPoolRequest;
import com.jdcloud.sdk.service.dh.model.ReleaseDedicatedPoolResponse;
import com.jdcloud.sdk.service.dh.client.ReleaseDedicatedPoolExecutor;
import com.jdcloud.sdk.service.dh.model.DescribeDedicatedPoolsRequest;
import com.jdcloud.sdk.service.dh.model.DescribeDedicatedPoolsResponse;
import com.jdcloud.sdk.service.dh.client.DescribeDedicatedPoolsExecutor;

/**
 * dhClient
 */
public class DhClient extends JdcloudClient {

    public final static String ApiVersion = "v1";
    private final static String UserAgentPrefix = "JdcloudSdkJava";
    public final static String ClientVersion = "1.2.8";
    public final static String DefaultEndpoint = "dh.jdcloud-api.com";
    public final static String ServiceName = "dh";
    public final static String UserAgent = UserAgentPrefix + "/" + ClientVersion + " " + ServiceName + "/" + ApiVersion;

    CredentialsProvider credentialsProvider;
    HttpRequestConfig httpRequestConfig;
    Environment environment = new Environment.Builder().endpoint(DefaultEndpoint).build();

    public CredentialsProvider getCredentialsProvider() {
        return credentialsProvider;
    }

    public HttpRequestConfig getHttpRequestConfig() {
        return httpRequestConfig;
    }

    public Environment getEnvironment() {
        return environment;
    }

    public String getUserAgent() {
        return UserAgent;
    }

    public String getServiceName() {
        return ServiceName;
    }

    public String getVersion() {
        return ApiVersion;
    }

    private DhClient() {

    }

    public static Builder builder() {
        return new DefaultBuilder();
    }


    /**
     * 查询专有宿主机列表。&lt;br&gt;
此接口支持分页查询，默认每页20条。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeDedicatedHostsResponse describeDedicatedHosts(DescribeDedicatedHostsRequest request) throws JdcloudSdkException {
        return new DescribeDedicatedHostsExecutor().client(this).execute(request);
    }

    /**
     * 查询专有宿主机机型。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeDedicatedHostTypeResponse describeDedicatedHostType(DescribeDedicatedHostTypeRequest request) throws JdcloudSdkException {
        return new DescribeDedicatedHostTypeExecutor().client(this).execute(request);
    }

    /**
     * 申请专有宿主机池。&lt;br&gt;
专有宿主机池为专有宿主机的集合，为用户提供独享且跨机架的宿主机资源池，基于资源独享及故障隔离实现业务安全、高可用部署。&lt;br&gt;
申请宿主机池需要指定机器类型，目前每一个专有宿主机池只能指定一种机器类型。可供选用的机器类型有通用性，内存性，高频计算型及GPU型。&lt;br&gt;
deployPolicy表示是否强制池中专有宿主机在每个AZ内数量均衡。可选值为prefered和required，默认为prefered。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public AllocDedicatedPoolResponse allocDedicatedPool(AllocDedicatedPoolRequest request) throws JdcloudSdkException {
        return new AllocDedicatedPoolExecutor().client(this).execute(request);
    }

    /**
     * 创建一台或多台指定机型的专有宿主机。&lt;br&gt;
创建专有宿主机必须指定专有宿主机池。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public AllocDedicatedHostsResponse allocDedicatedHosts(AllocDedicatedHostsRequest request) throws JdcloudSdkException {
        return new AllocDedicatedHostsExecutor().client(this).execute(request);
    }

    /**
     * 释放按配置计费、或包年包月已到期的单个专有宿主机。不能释放没有计费信息的专有宿主机。&lt;br&gt;
专有宿主机状态必须为可用&lt;b&gt;available&lt;/b&gt;、不可用&lt;b&gt;unavailable&lt;/b&gt;、维护中&lt;b&gt;under-assessment&lt;/b&gt;，同时专有宿主机上必须没有云主机实例才可删除。&lt;br&gt;
 [MFA enabled]
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ReleaseDedicatedHostResponse releaseDedicatedHost(ReleaseDedicatedHostRequest request) throws JdcloudSdkException {
        return new ReleaseDedicatedHostExecutor().client(this).execute(request);
    }

    /**
     * 修改专有宿主机池属性，包括名称、描述和可用区。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ModifyDedicatedPoolAttributeResponse modifyDedicatedPoolAttribute(ModifyDedicatedPoolAttributeRequest request) throws JdcloudSdkException {
        return new ModifyDedicatedPoolAttributeExecutor().client(this).execute(request);
    }

    /**
     * 查询配额，支持的类型：专有宿主机、专有宿主机池。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeQuotasResponse describeQuotas(DescribeQuotasRequest request) throws JdcloudSdkException {
        return new DescribeQuotasExecutor().client(this).execute(request);
    }

    /**
     * 修改专有宿主机部分属性，包括名称、描述。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ModifyDedicatedHostAttributeResponse modifyDedicatedHostAttribute(ModifyDedicatedHostAttributeRequest request) throws JdcloudSdkException {
        return new ModifyDedicatedHostAttributeExecutor().client(this).execute(request);
    }

    /**
     * 释放单个专有宿主机池。&lt;br&gt;
专有宿主机池中必须没有专有宿主机时才可释放。
 [MFA enabled]
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ReleaseDedicatedPoolResponse releaseDedicatedPool(ReleaseDedicatedPoolRequest request) throws JdcloudSdkException {
        return new ReleaseDedicatedPoolExecutor().client(this).execute(request);
    }

    /**
     * 查询专有宿主机池列表

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeDedicatedPoolsResponse describeDedicatedPools(DescribeDedicatedPoolsRequest request) throws JdcloudSdkException {
        return new DescribeDedicatedPoolsExecutor().client(this).execute(request);
    }


    public interface Builder {
        public Builder credentialsProvider(CredentialsProvider provider);
        public Builder environment(Environment environment);
        public Builder httpRequestConfig(HttpRequestConfig config);
        public DhClient build() throws JdcloudSdkException;
    }

    private static class DefaultBuilder implements Builder {

        private DhClient dhClient;

        public DefaultBuilder() {
            dhClient = new DhClient();
        }

        public DefaultBuilder credentialsProvider(CredentialsProvider provider) {
            dhClient.credentialsProvider = provider;
            return this;
        }

        public DefaultBuilder httpRequestConfig(HttpRequestConfig config) {
            dhClient.httpRequestConfig = config;
            return this;
        }

        public DhClient build() throws JdcloudSdkException {

            if (dhClient.credentialsProvider == null) {
                //if credentialsProvider not set, try load jdcloud global default  credentials provider
                dhClient.credentialsProvider = Jdcloud.defaultInstance().getCredentialsProvider();
                if (dhClient.credentialsProvider == null) {
                    throw new JdcloudValidateException("DhClient build error: jdcloud credentials provider not set");
                }
            }
            if (dhClient.httpRequestConfig == null) {
                dhClient.httpRequestConfig = Jdcloud.defaultInstance().getHttpRequestConfig();
                if (dhClient.httpRequestConfig == null) {
                    throw new JdcloudValidateException("DhClient build error: http request config not set");
                }
            }
            return dhClient;
        }

        public Builder environment(Environment environment) {
            dhClient.environment = environment;
            return this;
        }
    }
}
