/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Dedicated-Host
 * 关于专有宿主机操作的相关接口
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.dh.model;

import com.jdcloud.sdk.annotation.Required;
import com.jdcloud.sdk.service.dh.model.DedicatedHostSpec;
import com.jdcloud.sdk.service.JdcloudRequest;

/**
 * 创建一台或多台指定机型的专有宿主机。&lt;br&gt;
创建专有宿主机必须指定专有宿主机池。

 */
public class AllocDedicatedHostsRequest extends JdcloudRequest implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 描述专有宿主机配置

     * Required:true
     */
    @Required
    private DedicatedHostSpec dedicatedHostSpec;

    /**
     * 是否支持AZ内专有宿主机强制均衡，默认为preferred--非强制，取值[preferred--非强制,required--强制]

     */
    private String deployPolicy;

    /**
     * 购买云主机的数量；取值范围：[1,100]，默认为1。

     */
    private Integer maxCount;

    /**
     * 用于保证请求的幂等性。由客户端生成，长度不能超过64个字符。

     */
    private String clientToken;

    /**
     * 是否开启cpu拓扑，true:开启，false:关闭，只有宿主机是非超卖模式，且没有资源的时候才能开启；开启后，该宿主机上的虚机可以配置cpu拓扑和NUMA映射等。

     */
    private Boolean enableCpuTopology;

    /**
     * 地域ID
     * Required:true
     */
    @Required
    private String regionId;



    /**
     * get 描述专有宿主机配置

     *
     * @return
     */
    public DedicatedHostSpec getDedicatedHostSpec() {
        return dedicatedHostSpec;
    }

    /**
     * set 描述专有宿主机配置

     *
     * @param dedicatedHostSpec
     */
    public void setDedicatedHostSpec(DedicatedHostSpec dedicatedHostSpec) {
        this.dedicatedHostSpec = dedicatedHostSpec;
    }


    /**
     * get 是否支持AZ内专有宿主机强制均衡，默认为preferred--非强制，取值[preferred--非强制,required--强制]

     *
     * @return
     */
    public String getDeployPolicy() {
        return deployPolicy;
    }

    /**
     * set 是否支持AZ内专有宿主机强制均衡，默认为preferred--非强制，取值[preferred--非强制,required--强制]

     *
     * @param deployPolicy
     */
    public void setDeployPolicy(String deployPolicy) {
        this.deployPolicy = deployPolicy;
    }


    /**
     * get 购买云主机的数量；取值范围：[1,100]，默认为1。

     *
     * @return
     */
    public Integer getMaxCount() {
        return maxCount;
    }

    /**
     * set 购买云主机的数量；取值范围：[1,100]，默认为1。

     *
     * @param maxCount
     */
    public void setMaxCount(Integer maxCount) {
        this.maxCount = maxCount;
    }


    /**
     * get 用于保证请求的幂等性。由客户端生成，长度不能超过64个字符。

     *
     * @return
     */
    public String getClientToken() {
        return clientToken;
    }

    /**
     * set 用于保证请求的幂等性。由客户端生成，长度不能超过64个字符。

     *
     * @param clientToken
     */
    public void setClientToken(String clientToken) {
        this.clientToken = clientToken;
    }


    /**
     * get 是否开启cpu拓扑，true:开启，false:关闭，只有宿主机是非超卖模式，且没有资源的时候才能开启；开启后，该宿主机上的虚机可以配置cpu拓扑和NUMA映射等。

     *
     * @return
     */
    public Boolean getEnableCpuTopology() {
        return enableCpuTopology;
    }

    /**
     * set 是否开启cpu拓扑，true:开启，false:关闭，只有宿主机是非超卖模式，且没有资源的时候才能开启；开启后，该宿主机上的虚机可以配置cpu拓扑和NUMA映射等。

     *
     * @param enableCpuTopology
     */
    public void setEnableCpuTopology(Boolean enableCpuTopology) {
        this.enableCpuTopology = enableCpuTopology;
    }


    /**
     * get 地域ID
     *
     * @return
     */
    public String getRegionId() {
        return regionId;
    }

    /**
     * set 地域ID
     *
     * @param regionId
     */
    public void setRegionId(String regionId) {
        this.regionId = regionId;
    }



    /**
     * set 描述专有宿主机配置

     *
     * @param dedicatedHostSpec
     */
    public AllocDedicatedHostsRequest dedicatedHostSpec(DedicatedHostSpec dedicatedHostSpec) {
        this.dedicatedHostSpec = dedicatedHostSpec;
        return this;
    }


    /**
     * set 是否支持AZ内专有宿主机强制均衡，默认为preferred--非强制，取值[preferred--非强制,required--强制]

     *
     * @param deployPolicy
     */
    public AllocDedicatedHostsRequest deployPolicy(String deployPolicy) {
        this.deployPolicy = deployPolicy;
        return this;
    }


    /**
     * set 购买云主机的数量；取值范围：[1,100]，默认为1。

     *
     * @param maxCount
     */
    public AllocDedicatedHostsRequest maxCount(Integer maxCount) {
        this.maxCount = maxCount;
        return this;
    }


    /**
     * set 用于保证请求的幂等性。由客户端生成，长度不能超过64个字符。

     *
     * @param clientToken
     */
    public AllocDedicatedHostsRequest clientToken(String clientToken) {
        this.clientToken = clientToken;
        return this;
    }


    /**
     * set 是否开启cpu拓扑，true:开启，false:关闭，只有宿主机是非超卖模式，且没有资源的时候才能开启；开启后，该宿主机上的虚机可以配置cpu拓扑和NUMA映射等。

     *
     * @param enableCpuTopology
     */
    public AllocDedicatedHostsRequest enableCpuTopology(Boolean enableCpuTopology) {
        this.enableCpuTopology = enableCpuTopology;
        return this;
    }


    /**
     * set 地域ID
     *
     * @param regionId
     */
    public AllocDedicatedHostsRequest regionId(String regionId) {
        this.regionId = regionId;
        return this;
    }


}