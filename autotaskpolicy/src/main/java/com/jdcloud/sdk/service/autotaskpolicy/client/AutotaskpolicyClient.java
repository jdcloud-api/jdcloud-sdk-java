/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Policy Scheduler
 * 策略调度
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.autotaskpolicy.client;

import com.jdcloud.sdk.JdcloudSdkException;
import com.jdcloud.sdk.auth.CredentialsProvider;
import com.jdcloud.sdk.client.Environment;
import com.jdcloud.sdk.client.Jdcloud;
import com.jdcloud.sdk.client.JdcloudClient;
import com.jdcloud.sdk.client.JdcloudValidateException;
import com.jdcloud.sdk.http.HttpRequestConfig;
import com.jdcloud.sdk.service.autotaskpolicy.model.CopyPolicyRequest;
import com.jdcloud.sdk.service.autotaskpolicy.model.CopyPolicyResponse;
import com.jdcloud.sdk.service.autotaskpolicy.client.CopyPolicyExecutor;
import com.jdcloud.sdk.service.autotaskpolicy.model.DescribePolicyRequest;
import com.jdcloud.sdk.service.autotaskpolicy.model.DescribePolicyResponse;
import com.jdcloud.sdk.service.autotaskpolicy.client.DescribePolicyExecutor;
import com.jdcloud.sdk.service.autotaskpolicy.model.EnablePolicyRequest;
import com.jdcloud.sdk.service.autotaskpolicy.model.EnablePolicyResponse;
import com.jdcloud.sdk.service.autotaskpolicy.client.EnablePolicyExecutor;
import com.jdcloud.sdk.service.autotaskpolicy.model.AssociateExecResourceRequest;
import com.jdcloud.sdk.service.autotaskpolicy.model.AssociateExecResourceResponse;
import com.jdcloud.sdk.service.autotaskpolicy.client.AssociateExecResourceExecutor;
import com.jdcloud.sdk.service.autotaskpolicy.model.CreatePolicyRequest;
import com.jdcloud.sdk.service.autotaskpolicy.model.CreatePolicyResponse;
import com.jdcloud.sdk.service.autotaskpolicy.client.CreatePolicyExecutor;
import com.jdcloud.sdk.service.autotaskpolicy.model.DisassociateExecResourceRequest;
import com.jdcloud.sdk.service.autotaskpolicy.model.DisassociateExecResourceResponse;
import com.jdcloud.sdk.service.autotaskpolicy.client.DisassociateExecResourceExecutor;
import com.jdcloud.sdk.service.autotaskpolicy.model.DescribePoliciesRequest;
import com.jdcloud.sdk.service.autotaskpolicy.model.DescribePoliciesResponse;
import com.jdcloud.sdk.service.autotaskpolicy.client.DescribePoliciesExecutor;
import com.jdcloud.sdk.service.autotaskpolicy.model.ModifyPolicyRequest;
import com.jdcloud.sdk.service.autotaskpolicy.model.ModifyPolicyResponse;
import com.jdcloud.sdk.service.autotaskpolicy.client.ModifyPolicyExecutor;
import com.jdcloud.sdk.service.autotaskpolicy.model.DeletePolicyRequest;
import com.jdcloud.sdk.service.autotaskpolicy.model.DeletePolicyResponse;
import com.jdcloud.sdk.service.autotaskpolicy.client.DeletePolicyExecutor;
import com.jdcloud.sdk.service.autotaskpolicy.model.DisablePolicyRequest;
import com.jdcloud.sdk.service.autotaskpolicy.model.DisablePolicyResponse;
import com.jdcloud.sdk.service.autotaskpolicy.client.DisablePolicyExecutor;

/**
 * autotaskpolicyClient
 */
public class AutotaskpolicyClient extends JdcloudClient {

    public final static String ApiVersion = "v1";
    private final static String UserAgentPrefix = "JdcloudSdkJava";
    public final static String ClientVersion = "1.2.9";
    public final static String DefaultEndpoint = "autotaskpolicy.jdcloud-api.com";
    public final static String ServiceName = "autotaskpolicy";
    public final static String UserAgent = UserAgentPrefix + "/" + ClientVersion + " " + ServiceName + "/" + ApiVersion;

    CredentialsProvider credentialsProvider;
    HttpRequestConfig httpRequestConfig;
    Environment environment = new Environment.Builder().endpoint(DefaultEndpoint).build();

    public CredentialsProvider getCredentialsProvider() {
        return credentialsProvider;
    }

    public HttpRequestConfig getHttpRequestConfig() {
        return httpRequestConfig;
    }

    public Environment getEnvironment() {
        return environment;
    }

    public String getUserAgent() {
        return UserAgent;
    }

    public String getServiceName() {
        return ServiceName;
    }

    public String getVersion() {
        return ApiVersion;
    }

    private AutotaskpolicyClient() {

    }

    public static Builder builder() {
        return new DefaultBuilder();
    }


    /**
     * 策略跨区复制。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CopyPolicyResponse copyPolicy(CopyPolicyRequest request) throws JdcloudSdkException {
        return new CopyPolicyExecutor().client(this).execute(request);
    }

    /**
     * 查询策略详情。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribePolicyResponse describePolicy(DescribePolicyRequest request) throws JdcloudSdkException {
        return new DescribePolicyExecutor().client(this).execute(request);
    }

    /**
     * 开启策略。
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public EnablePolicyResponse enablePolicy(EnablePolicyRequest request) throws JdcloudSdkException {
        return new EnablePolicyExecutor().client(this).execute(request);
    }

    /**
     * 关联资源。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public AssociateExecResourceResponse associateExecResource(AssociateExecResourceRequest request) throws JdcloudSdkException {
        return new AssociateExecResourceExecutor().client(this).execute(request);
    }

    /**
     * 创建策略，不同策略类型有不同的规则，具体如下。
- AutoImage: 自动创建镜像策略
    - fireCondition
        - 仅支持&quot;interval&quot;，执行周期仅支持&quot;小时/天/周&quot;，如: &quot;interval 7d&quot;
        - 两次执行时间间隔需要大于12小时
    - fireTime
        - 触发时间，首次创建时距离当前时间必须在30分钟以后至1年以内。
        - 若策略曾经执行过，再次修改该字段时必须满足距离上一次执行时间超过12小时
    - execResource
        - 哪些云主机需要制作镜像，可指定具体云主机ID列表，每个策略最多绑定100个。
        - 仅支持云盘系统盘的虚机
    - execConfig
        - 配置规则例子:
        - [{&quot;key&quot;:&quot;includeDeviceName&quot;,&quot;value&quot;:&quot;vdb,vdc&quot;},{&quot;key&quot;:&quot;imageLiveDays&quot;,&quot;10&quot;}]
        - includeDeviceName说明：云主机中的哪些云盘需要制作镜像，可指定具体盘符列表，或指定为&quot;all&quot;。云主机中的vda系统盘不可改变，一定要参与制作镜像。
        - imageLiveDays说明：镜像保留时间，以天为单位，范围1-36500。不指定则永久有效。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreatePolicyResponse createPolicy(CreatePolicyRequest request) throws JdcloudSdkException {
        return new CreatePolicyExecutor().client(this).execute(request);
    }

    /**
     * 取消关联资源。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DisassociateExecResourceResponse disassociateExecResource(DisassociateExecResourceRequest request) throws JdcloudSdkException {
        return new DisassociateExecResourceExecutor().client(this).execute(request);
    }

    /**
     * 查询策略列表。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribePoliciesResponse describePolicies(DescribePoliciesRequest request) throws JdcloudSdkException {
        return new DescribePoliciesExecutor().client(this).execute(request);
    }

    /**
     * 更新策略。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ModifyPolicyResponse modifyPolicy(ModifyPolicyRequest request) throws JdcloudSdkException {
        return new ModifyPolicyExecutor().client(this).execute(request);
    }

    /**
     * 删除策略。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeletePolicyResponse deletePolicy(DeletePolicyRequest request) throws JdcloudSdkException {
        return new DeletePolicyExecutor().client(this).execute(request);
    }

    /**
     * 关闭策略。
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DisablePolicyResponse disablePolicy(DisablePolicyRequest request) throws JdcloudSdkException {
        return new DisablePolicyExecutor().client(this).execute(request);
    }


    public interface Builder {
        public Builder credentialsProvider(CredentialsProvider provider);
        public Builder environment(Environment environment);
        public Builder httpRequestConfig(HttpRequestConfig config);
        public AutotaskpolicyClient build() throws JdcloudSdkException;
    }

    private static class DefaultBuilder implements Builder {

        private AutotaskpolicyClient autotaskpolicyClient;

        public DefaultBuilder() {
            autotaskpolicyClient = new AutotaskpolicyClient();
        }

        public DefaultBuilder credentialsProvider(CredentialsProvider provider) {
            autotaskpolicyClient.credentialsProvider = provider;
            return this;
        }

        public DefaultBuilder httpRequestConfig(HttpRequestConfig config) {
            autotaskpolicyClient.httpRequestConfig = config;
            return this;
        }

        public AutotaskpolicyClient build() throws JdcloudSdkException {

            if (autotaskpolicyClient.credentialsProvider == null) {
                //if credentialsProvider not set, try load jdcloud global default  credentials provider
                autotaskpolicyClient.credentialsProvider = Jdcloud.defaultInstance().getCredentialsProvider();
                if (autotaskpolicyClient.credentialsProvider == null) {
                    throw new JdcloudValidateException("AutotaskpolicyClient build error: jdcloud credentials provider not set");
                }
            }
            if (autotaskpolicyClient.httpRequestConfig == null) {
                autotaskpolicyClient.httpRequestConfig = Jdcloud.defaultInstance().getHttpRequestConfig();
                if (autotaskpolicyClient.httpRequestConfig == null) {
                    throw new JdcloudValidateException("AutotaskpolicyClient build error: http request config not set");
                }
            }
            return autotaskpolicyClient;
        }

        public Builder environment(Environment environment) {
            autotaskpolicyClient.environment = environment;
            return this;
        }
    }
}
