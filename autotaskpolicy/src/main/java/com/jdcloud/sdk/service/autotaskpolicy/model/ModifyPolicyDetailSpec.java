/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * 
 *
 * 
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.autotaskpolicy.model;

import java.util.List;
import java.util.ArrayList;

/**
 * modifyPolicyDetailSpec
 */
public class ModifyPolicyDetailSpec  implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 触发时间，针对开启的策略生效，格式&quot;yyyy-MM-dd HH24:mm:ss&quot;
     */
    private String fireTime;

    /**
     * 策略触发条件/周期，参考创建策略的规则
     */
    private String fireCondition;

    /**
     * 策略触发执行累计次数达到execNumLimit后，自动失效变为disable状态。该参数为-1时不生效，大于0时生效。
     */
    private Integer execNumLimit;

    /**
     * 增加该策略执行时的额外条件配置。如果与原有配置冲突，会执行覆盖操作。
     */
    
    private List<Config> addExecConfig;
    /**
     * 要删除的条件配置，需要指定配置key的列表
     */
    
    private List<String> delExecConfig;
    /**
     * 日志配置
     */
    private Log log;



    /**
     * get 触发时间，针对开启的策略生效，格式&quot;yyyy-MM-dd HH24:mm:ss&quot;
     *
     * @return
     */
    public String getFireTime() {
        return fireTime;
    }

    /**
     * set 触发时间，针对开启的策略生效，格式&quot;yyyy-MM-dd HH24:mm:ss&quot;
     *
     * @param fireTime
     */
    public void setFireTime(String fireTime) {
        this.fireTime = fireTime;
    }


    /**
     * get 策略触发条件/周期，参考创建策略的规则
     *
     * @return
     */
    public String getFireCondition() {
        return fireCondition;
    }

    /**
     * set 策略触发条件/周期，参考创建策略的规则
     *
     * @param fireCondition
     */
    public void setFireCondition(String fireCondition) {
        this.fireCondition = fireCondition;
    }


    /**
     * get 策略触发执行累计次数达到execNumLimit后，自动失效变为disable状态。该参数为-1时不生效，大于0时生效。
     *
     * @return
     */
    public Integer getExecNumLimit() {
        return execNumLimit;
    }

    /**
     * set 策略触发执行累计次数达到execNumLimit后，自动失效变为disable状态。该参数为-1时不生效，大于0时生效。
     *
     * @param execNumLimit
     */
    public void setExecNumLimit(Integer execNumLimit) {
        this.execNumLimit = execNumLimit;
    }


    /**
    * get 增加该策略执行时的额外条件配置。如果与原有配置冲突，会执行覆盖操作。
    *
    * @return
    */
    public List<Config> getAddExecConfig() {
        return addExecConfig;
    }

    /**
    * set 增加该策略执行时的额外条件配置。如果与原有配置冲突，会执行覆盖操作。
    *
    * @param addExecConfig
    */
    public void setAddExecConfig(List<Config> addExecConfig) {
        this.addExecConfig = addExecConfig;
    }


    /**
    * get 要删除的条件配置，需要指定配置key的列表
    *
    * @return
    */
    public List<String> getDelExecConfig() {
        return delExecConfig;
    }

    /**
    * set 要删除的条件配置，需要指定配置key的列表
    *
    * @param delExecConfig
    */
    public void setDelExecConfig(List<String> delExecConfig) {
        this.delExecConfig = delExecConfig;
    }


    /**
     * get 日志配置
     *
     * @return
     */
    public Log getLog() {
        return log;
    }

    /**
     * set 日志配置
     *
     * @param log
     */
    public void setLog(Log log) {
        this.log = log;
    }



    /**
     * set 触发时间，针对开启的策略生效，格式&quot;yyyy-MM-dd HH24:mm:ss&quot;
     *
     * @param fireTime
     */
    public ModifyPolicyDetailSpec fireTime(String fireTime) {
        this.fireTime = fireTime;
        return this;
    }


    /**
     * set 策略触发条件/周期，参考创建策略的规则
     *
     * @param fireCondition
     */
    public ModifyPolicyDetailSpec fireCondition(String fireCondition) {
        this.fireCondition = fireCondition;
        return this;
    }


    /**
     * set 策略触发执行累计次数达到execNumLimit后，自动失效变为disable状态。该参数为-1时不生效，大于0时生效。
     *
     * @param execNumLimit
     */
    public ModifyPolicyDetailSpec execNumLimit(Integer execNumLimit) {
        this.execNumLimit = execNumLimit;
        return this;
    }


    /**
    * set 增加该策略执行时的额外条件配置。如果与原有配置冲突，会执行覆盖操作。
    *
    * @param addExecConfig
    */
    public ModifyPolicyDetailSpec addExecConfig(List<Config> addExecConfig) {
        this.addExecConfig = addExecConfig;
        return this;
    }


    /**
    * set 要删除的条件配置，需要指定配置key的列表
    *
    * @param delExecConfig
    */
    public ModifyPolicyDetailSpec delExecConfig(List<String> delExecConfig) {
        this.delExecConfig = delExecConfig;
        return this;
    }


    /**
     * set 日志配置
     *
     * @param log
     */
    public ModifyPolicyDetailSpec log(Log log) {
        this.log = log;
        return this;
    }



    /**
     * add item to 增加该策略执行时的额外条件配置。如果与原有配置冲突，会执行覆盖操作。
     *
     * @param addExecConfig
     */
    public void addAddExecConfig(Config addExecConfig) {
        if (this.addExecConfig == null) {
            this.addExecConfig = new ArrayList<>();
        }
        this.addExecConfig.add(addExecConfig);
    }

    /**
     * add item to 要删除的条件配置，需要指定配置key的列表
     *
     * @param delExecConfig
     */
    public void addDelExecConfig(String delExecConfig) {
        if (this.delExecConfig == null) {
            this.delExecConfig = new ArrayList<>();
        }
        this.delExecConfig.add(delExecConfig);
    }
}