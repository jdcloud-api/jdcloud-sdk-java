/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * 
 *
 * 
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.dbs.model;

import java.util.List;
import java.util.ArrayList;

/**
 * dataSourceEntry
 */
public class DataSourceEntry  implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 引擎类型 MySQL5  MySQL8  MariaDB  Percona
     */
    private String sourceEngine;

    /**
     * 源数据库的网络类型 PublicAccess 和 RDS
     */
    private String networkType;

    /**
     * 源数据库的端口
     */
    private Integer port;

    /**
     * 数据库的账号
     */
    private List<String> accountNames;

    /**
     * 不同数据库引擎独有的配置参数
     */
    private EngineRelatedConfig engineRelatedConfig;


    /**
     * get 引擎类型 MySQL5  MySQL8  MariaDB  Percona
     *
     * @return
     */
    public String getSourceEngine() {
        return sourceEngine;
    }

    /**
     * set 引擎类型 MySQL5  MySQL8  MariaDB  Percona
     *
     * @param sourceEngine
     */
    public void setSourceEngine(String sourceEngine) {
        this.sourceEngine = sourceEngine;
    }

    /**
     * get 源数据库的网络类型 PublicAccess 和 RDS
     *
     * @return
     */
    public String getNetworkType() {
        return networkType;
    }

    /**
     * set 源数据库的网络类型 PublicAccess 和 RDS
     *
     * @param networkType
     */
    public void setNetworkType(String networkType) {
        this.networkType = networkType;
    }

    /**
     * get 源数据库的端口
     *
     * @return
     */
    public Integer getPort() {
        return port;
    }

    /**
     * set 源数据库的端口
     *
     * @param port
     */
    public void setPort(Integer port) {
        this.port = port;
    }

    /**
     * get 数据库的账号
     *
     * @return
     */
    public List<String> getAccountNames() {
        return accountNames;
    }

    /**
     * set 数据库的账号
     *
     * @param accountNames
     */
    public void setAccountNames(List<String> accountNames) {
        this.accountNames = accountNames;
    }

    /**
     * get 不同数据库引擎独有的配置参数
     *
     * @return
     */
    public EngineRelatedConfig getEngineRelatedConfig() {
        return engineRelatedConfig;
    }

    /**
     * set 不同数据库引擎独有的配置参数
     *
     * @param engineRelatedConfig
     */
    public void setEngineRelatedConfig(EngineRelatedConfig engineRelatedConfig) {
        this.engineRelatedConfig = engineRelatedConfig;
    }


    /**
     * set 引擎类型 MySQL5  MySQL8  MariaDB  Percona
     *
     * @param sourceEngine
     */
    public DataSourceEntry sourceEngine(String sourceEngine) {
        this.sourceEngine = sourceEngine;
        return this;
    }

    /**
     * set 源数据库的网络类型 PublicAccess 和 RDS
     *
     * @param networkType
     */
    public DataSourceEntry networkType(String networkType) {
        this.networkType = networkType;
        return this;
    }

    /**
     * set 源数据库的端口
     *
     * @param port
     */
    public DataSourceEntry port(Integer port) {
        this.port = port;
        return this;
    }

    /**
     * set 数据库的账号
     *
     * @param accountNames
     */
    public DataSourceEntry accountNames(List<String> accountNames) {
        this.accountNames = accountNames;
        return this;
    }

    /**
     * set 不同数据库引擎独有的配置参数
     *
     * @param engineRelatedConfig
     */
    public DataSourceEntry engineRelatedConfig(EngineRelatedConfig engineRelatedConfig) {
        this.engineRelatedConfig = engineRelatedConfig;
        return this;
    }


    /**
     * add item to 数据库的账号
     *
     * @param accountName
     */
    public void addAccountName(String accountName) {
        if (this.accountNames == null) {
            this.accountNames = new ArrayList<>();
        }
        this.accountNames.add(accountName);
    }

}