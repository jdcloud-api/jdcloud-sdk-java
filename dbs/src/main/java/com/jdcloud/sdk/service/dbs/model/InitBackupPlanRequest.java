/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 数据库备份服务
 * 数据库备份服务接口
 *
 * OpenAPI spec version: v2
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.dbs.model;

import com.jdcloud.sdk.annotation.Required;
import com.jdcloud.sdk.service.dbs.model.BackupSchedule;
import com.jdcloud.sdk.service.dbs.model.SourceEndpoint;
import com.jdcloud.sdk.service.dbs.model.BackupObjects;
import com.jdcloud.sdk.service.JdcloudRequest;

/**
 * 初始化备份策略
 */
public class InitBackupPlanRequest extends JdcloudRequest implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 引擎类型 MySQL5  MySQL8  MariaDB  Percona
     * Required:true
     */
    @Required
    private String sourceEngine;

    /**
     * 备份方式，支持物理备份或逻辑备份
     * Required:true
     */
    @Required
    private String backupType;

    /**
     * 是否开启日志备份；true：开启；false：关闭
     */
    private Boolean enableBackupLogs;

    /**
     * 日志备份保存天数，支持7-3650 天，默认7天
     */
    private Integer logBackupRetentionPeriod;

    /**
     * 全量备份保存天数，支持7-3650 天，默认7天
     */
    private Integer fullBackupRetentionPeriod;

    /**
     * 全量备份的备份周期
     * Required:true
     */
    @Required
    private BackupSchedule fullBackupSchedule;

    /**
     * 备份目标的详细信息
     * Required:true
     */
    @Required
    private SourceEndpoint sourceEndpoint;

    /**
     * 逻辑备份中要备份的对象的信息，物理备份无须该信息
     */
    private BackupObjects backupObjects;

    /**
     * 是否开启日志备份；true：开启；false：关闭
     * Required:true
     */
    @Required
    private Boolean createNewEndpoint;

    /**
     * 地域代码，取值范围参见[《各地域及可用区对照表》]
     * Required:true
     */
    @Required
    private String regionId;

    /**
     * 备份计划ID
     * Required:true
     */
    @Required
    private String backupPlanId;


    /**
     * get 引擎类型 MySQL5  MySQL8  MariaDB  Percona
     *
     * @return
     */
    public String getSourceEngine() {
        return sourceEngine;
    }

    /**
     * set 引擎类型 MySQL5  MySQL8  MariaDB  Percona
     *
     * @param sourceEngine
     */
    public void setSourceEngine(String sourceEngine) {
        this.sourceEngine = sourceEngine;
    }

    /**
     * get 备份方式，支持物理备份或逻辑备份
     *
     * @return
     */
    public String getBackupType() {
        return backupType;
    }

    /**
     * set 备份方式，支持物理备份或逻辑备份
     *
     * @param backupType
     */
    public void setBackupType(String backupType) {
        this.backupType = backupType;
    }

    /**
     * get 是否开启日志备份；true：开启；false：关闭
     *
     * @return
     */
    public Boolean getEnableBackupLogs() {
        return enableBackupLogs;
    }

    /**
     * set 是否开启日志备份；true：开启；false：关闭
     *
     * @param enableBackupLogs
     */
    public void setEnableBackupLogs(Boolean enableBackupLogs) {
        this.enableBackupLogs = enableBackupLogs;
    }

    /**
     * get 日志备份保存天数，支持7-3650 天，默认7天
     *
     * @return
     */
    public Integer getLogBackupRetentionPeriod() {
        return logBackupRetentionPeriod;
    }

    /**
     * set 日志备份保存天数，支持7-3650 天，默认7天
     *
     * @param logBackupRetentionPeriod
     */
    public void setLogBackupRetentionPeriod(Integer logBackupRetentionPeriod) {
        this.logBackupRetentionPeriod = logBackupRetentionPeriod;
    }

    /**
     * get 全量备份保存天数，支持7-3650 天，默认7天
     *
     * @return
     */
    public Integer getFullBackupRetentionPeriod() {
        return fullBackupRetentionPeriod;
    }

    /**
     * set 全量备份保存天数，支持7-3650 天，默认7天
     *
     * @param fullBackupRetentionPeriod
     */
    public void setFullBackupRetentionPeriod(Integer fullBackupRetentionPeriod) {
        this.fullBackupRetentionPeriod = fullBackupRetentionPeriod;
    }

    /**
     * get 全量备份的备份周期
     *
     * @return
     */
    public BackupSchedule getFullBackupSchedule() {
        return fullBackupSchedule;
    }

    /**
     * set 全量备份的备份周期
     *
     * @param fullBackupSchedule
     */
    public void setFullBackupSchedule(BackupSchedule fullBackupSchedule) {
        this.fullBackupSchedule = fullBackupSchedule;
    }

    /**
     * get 备份目标的详细信息
     *
     * @return
     */
    public SourceEndpoint getSourceEndpoint() {
        return sourceEndpoint;
    }

    /**
     * set 备份目标的详细信息
     *
     * @param sourceEndpoint
     */
    public void setSourceEndpoint(SourceEndpoint sourceEndpoint) {
        this.sourceEndpoint = sourceEndpoint;
    }

    /**
     * get 逻辑备份中要备份的对象的信息，物理备份无须该信息
     *
     * @return
     */
    public BackupObjects getBackupObjects() {
        return backupObjects;
    }

    /**
     * set 逻辑备份中要备份的对象的信息，物理备份无须该信息
     *
     * @param backupObjects
     */
    public void setBackupObjects(BackupObjects backupObjects) {
        this.backupObjects = backupObjects;
    }

    /**
     * get 是否开启日志备份；true：开启；false：关闭
     *
     * @return
     */
    public Boolean getCreateNewEndpoint() {
        return createNewEndpoint;
    }

    /**
     * set 是否开启日志备份；true：开启；false：关闭
     *
     * @param createNewEndpoint
     */
    public void setCreateNewEndpoint(Boolean createNewEndpoint) {
        this.createNewEndpoint = createNewEndpoint;
    }

    /**
     * get 地域代码，取值范围参见[《各地域及可用区对照表》]
     *
     * @return
     */
    public String getRegionId() {
        return regionId;
    }

    /**
     * set 地域代码，取值范围参见[《各地域及可用区对照表》]
     *
     * @param regionId
     */
    public void setRegionId(String regionId) {
        this.regionId = regionId;
    }

    /**
     * get 备份计划ID
     *
     * @return
     */
    public String getBackupPlanId() {
        return backupPlanId;
    }

    /**
     * set 备份计划ID
     *
     * @param backupPlanId
     */
    public void setBackupPlanId(String backupPlanId) {
        this.backupPlanId = backupPlanId;
    }


    /**
     * set 引擎类型 MySQL5  MySQL8  MariaDB  Percona
     *
     * @param sourceEngine
     */
    public InitBackupPlanRequest sourceEngine(String sourceEngine) {
        this.sourceEngine = sourceEngine;
        return this;
    }

    /**
     * set 备份方式，支持物理备份或逻辑备份
     *
     * @param backupType
     */
    public InitBackupPlanRequest backupType(String backupType) {
        this.backupType = backupType;
        return this;
    }

    /**
     * set 是否开启日志备份；true：开启；false：关闭
     *
     * @param enableBackupLogs
     */
    public InitBackupPlanRequest enableBackupLogs(Boolean enableBackupLogs) {
        this.enableBackupLogs = enableBackupLogs;
        return this;
    }

    /**
     * set 日志备份保存天数，支持7-3650 天，默认7天
     *
     * @param logBackupRetentionPeriod
     */
    public InitBackupPlanRequest logBackupRetentionPeriod(Integer logBackupRetentionPeriod) {
        this.logBackupRetentionPeriod = logBackupRetentionPeriod;
        return this;
    }

    /**
     * set 全量备份保存天数，支持7-3650 天，默认7天
     *
     * @param fullBackupRetentionPeriod
     */
    public InitBackupPlanRequest fullBackupRetentionPeriod(Integer fullBackupRetentionPeriod) {
        this.fullBackupRetentionPeriod = fullBackupRetentionPeriod;
        return this;
    }

    /**
     * set 全量备份的备份周期
     *
     * @param fullBackupSchedule
     */
    public InitBackupPlanRequest fullBackupSchedule(BackupSchedule fullBackupSchedule) {
        this.fullBackupSchedule = fullBackupSchedule;
        return this;
    }

    /**
     * set 备份目标的详细信息
     *
     * @param sourceEndpoint
     */
    public InitBackupPlanRequest sourceEndpoint(SourceEndpoint sourceEndpoint) {
        this.sourceEndpoint = sourceEndpoint;
        return this;
    }

    /**
     * set 逻辑备份中要备份的对象的信息，物理备份无须该信息
     *
     * @param backupObjects
     */
    public InitBackupPlanRequest backupObjects(BackupObjects backupObjects) {
        this.backupObjects = backupObjects;
        return this;
    }

    /**
     * set 是否开启日志备份；true：开启；false：关闭
     *
     * @param createNewEndpoint
     */
    public InitBackupPlanRequest createNewEndpoint(Boolean createNewEndpoint) {
        this.createNewEndpoint = createNewEndpoint;
        return this;
    }

    /**
     * set 地域代码，取值范围参见[《各地域及可用区对照表》]
     *
     * @param regionId
     */
    public InitBackupPlanRequest regionId(String regionId) {
        this.regionId = regionId;
        return this;
    }

    /**
     * set 备份计划ID
     *
     * @param backupPlanId
     */
    public InitBackupPlanRequest backupPlanId(String backupPlanId) {
        this.backupPlanId = backupPlanId;
        return this;
    }


}