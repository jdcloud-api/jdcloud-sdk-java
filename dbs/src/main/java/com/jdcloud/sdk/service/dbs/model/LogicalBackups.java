/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * 
 *
 * 
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.dbs.model;

import java.util.List;
import java.util.ArrayList;

/**
 * logicalBackups
 */
public class LogicalBackups  implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 全量备份ID
     */
    private String backupId;

    /**
     * 备份开始时间，UTC时间格式：YYYY-MM-DDTHH:mm:ssZ
     */
    private String backupStartTime;

    /**
     * 备份结束时间，UTC时间格式：YYYY-MM-DDTHH:mm:ssZ
     */
    private String backupEndTime;

    /**
     * 备份到期时间，UTC时间格式：YYYY-MM-DDTHH:mm:ssZ
     */
    private String backupExpiretime;

    /**
     * 要备份的对象名称, 如果不填、为空或为星号，表示对整个数据库进行备份
     */
    private String database;

    /**
     * 该全量备份中包含的备份对象，仅当备份为逻辑备份时返回
     */
    private List<String> objects;

    /**
     * 备份大小，单位：Byte
     */
    private Long sizeByte;

    /**
     * 是否手动触发的备份任务 0代表自动触发的备份 1代表手动触发的
     */
    private Integer isManual;

    /**
     * 备份状态 成功-COMPLETED  运行中-BUILDING  失败-ERROR
     */
    private String status;

    /**
     * 错误信息，仅sucess为false时返回
     */
    private String errorMessages;

    /**
     * 源数据库的连接地址，可以为IP或者域名
     */
    private String ip;

    /**
     * 源数据库的端口
     */
    private Integer port;


    /**
     * get 全量备份ID
     *
     * @return
     */
    public String getBackupId() {
        return backupId;
    }

    /**
     * set 全量备份ID
     *
     * @param backupId
     */
    public void setBackupId(String backupId) {
        this.backupId = backupId;
    }

    /**
     * get 备份开始时间，UTC时间格式：YYYY-MM-DDTHH:mm:ssZ
     *
     * @return
     */
    public String getBackupStartTime() {
        return backupStartTime;
    }

    /**
     * set 备份开始时间，UTC时间格式：YYYY-MM-DDTHH:mm:ssZ
     *
     * @param backupStartTime
     */
    public void setBackupStartTime(String backupStartTime) {
        this.backupStartTime = backupStartTime;
    }

    /**
     * get 备份结束时间，UTC时间格式：YYYY-MM-DDTHH:mm:ssZ
     *
     * @return
     */
    public String getBackupEndTime() {
        return backupEndTime;
    }

    /**
     * set 备份结束时间，UTC时间格式：YYYY-MM-DDTHH:mm:ssZ
     *
     * @param backupEndTime
     */
    public void setBackupEndTime(String backupEndTime) {
        this.backupEndTime = backupEndTime;
    }

    /**
     * get 备份到期时间，UTC时间格式：YYYY-MM-DDTHH:mm:ssZ
     *
     * @return
     */
    public String getBackupExpiretime() {
        return backupExpiretime;
    }

    /**
     * set 备份到期时间，UTC时间格式：YYYY-MM-DDTHH:mm:ssZ
     *
     * @param backupExpiretime
     */
    public void setBackupExpiretime(String backupExpiretime) {
        this.backupExpiretime = backupExpiretime;
    }

    /**
     * get 要备份的对象名称, 如果不填、为空或为星号，表示对整个数据库进行备份
     *
     * @return
     */
    public String getDatabase() {
        return database;
    }

    /**
     * set 要备份的对象名称, 如果不填、为空或为星号，表示对整个数据库进行备份
     *
     * @param database
     */
    public void setDatabase(String database) {
        this.database = database;
    }

    /**
     * get 该全量备份中包含的备份对象，仅当备份为逻辑备份时返回
     *
     * @return
     */
    public List<String> getObjects() {
        return objects;
    }

    /**
     * set 该全量备份中包含的备份对象，仅当备份为逻辑备份时返回
     *
     * @param objects
     */
    public void setObjects(List<String> objects) {
        this.objects = objects;
    }

    /**
     * get 备份大小，单位：Byte
     *
     * @return
     */
    public Long getSizeByte() {
        return sizeByte;
    }

    /**
     * set 备份大小，单位：Byte
     *
     * @param sizeByte
     */
    public void setSizeByte(Long sizeByte) {
        this.sizeByte = sizeByte;
    }

    /**
     * get 是否手动触发的备份任务 0代表自动触发的备份 1代表手动触发的
     *
     * @return
     */
    public Integer getIsManual() {
        return isManual;
    }

    /**
     * set 是否手动触发的备份任务 0代表自动触发的备份 1代表手动触发的
     *
     * @param isManual
     */
    public void setIsManual(Integer isManual) {
        this.isManual = isManual;
    }

    /**
     * get 备份状态 成功-COMPLETED  运行中-BUILDING  失败-ERROR
     *
     * @return
     */
    public String getStatus() {
        return status;
    }

    /**
     * set 备份状态 成功-COMPLETED  运行中-BUILDING  失败-ERROR
     *
     * @param status
     */
    public void setStatus(String status) {
        this.status = status;
    }

    /**
     * get 错误信息，仅sucess为false时返回
     *
     * @return
     */
    public String getErrorMessages() {
        return errorMessages;
    }

    /**
     * set 错误信息，仅sucess为false时返回
     *
     * @param errorMessages
     */
    public void setErrorMessages(String errorMessages) {
        this.errorMessages = errorMessages;
    }

    /**
     * get 源数据库的连接地址，可以为IP或者域名
     *
     * @return
     */
    public String getIp() {
        return ip;
    }

    /**
     * set 源数据库的连接地址，可以为IP或者域名
     *
     * @param ip
     */
    public void setIp(String ip) {
        this.ip = ip;
    }

    /**
     * get 源数据库的端口
     *
     * @return
     */
    public Integer getPort() {
        return port;
    }

    /**
     * set 源数据库的端口
     *
     * @param port
     */
    public void setPort(Integer port) {
        this.port = port;
    }


    /**
     * set 全量备份ID
     *
     * @param backupId
     */
    public LogicalBackups backupId(String backupId) {
        this.backupId = backupId;
        return this;
    }

    /**
     * set 备份开始时间，UTC时间格式：YYYY-MM-DDTHH:mm:ssZ
     *
     * @param backupStartTime
     */
    public LogicalBackups backupStartTime(String backupStartTime) {
        this.backupStartTime = backupStartTime;
        return this;
    }

    /**
     * set 备份结束时间，UTC时间格式：YYYY-MM-DDTHH:mm:ssZ
     *
     * @param backupEndTime
     */
    public LogicalBackups backupEndTime(String backupEndTime) {
        this.backupEndTime = backupEndTime;
        return this;
    }

    /**
     * set 备份到期时间，UTC时间格式：YYYY-MM-DDTHH:mm:ssZ
     *
     * @param backupExpiretime
     */
    public LogicalBackups backupExpiretime(String backupExpiretime) {
        this.backupExpiretime = backupExpiretime;
        return this;
    }

    /**
     * set 要备份的对象名称, 如果不填、为空或为星号，表示对整个数据库进行备份
     *
     * @param database
     */
    public LogicalBackups database(String database) {
        this.database = database;
        return this;
    }

    /**
     * set 该全量备份中包含的备份对象，仅当备份为逻辑备份时返回
     *
     * @param objects
     */
    public LogicalBackups objects(List<String> objects) {
        this.objects = objects;
        return this;
    }

    /**
     * set 备份大小，单位：Byte
     *
     * @param sizeByte
     */
    public LogicalBackups sizeByte(Long sizeByte) {
        this.sizeByte = sizeByte;
        return this;
    }

    /**
     * set 是否手动触发的备份任务 0代表自动触发的备份 1代表手动触发的
     *
     * @param isManual
     */
    public LogicalBackups isManual(Integer isManual) {
        this.isManual = isManual;
        return this;
    }

    /**
     * set 备份状态 成功-COMPLETED  运行中-BUILDING  失败-ERROR
     *
     * @param status
     */
    public LogicalBackups status(String status) {
        this.status = status;
        return this;
    }

    /**
     * set 错误信息，仅sucess为false时返回
     *
     * @param errorMessages
     */
    public LogicalBackups errorMessages(String errorMessages) {
        this.errorMessages = errorMessages;
        return this;
    }

    /**
     * set 源数据库的连接地址，可以为IP或者域名
     *
     * @param ip
     */
    public LogicalBackups ip(String ip) {
        this.ip = ip;
        return this;
    }

    /**
     * set 源数据库的端口
     *
     * @param port
     */
    public LogicalBackups port(Integer port) {
        this.port = port;
        return this;
    }


    /**
     * add item to 该全量备份中包含的备份对象，仅当备份为逻辑备份时返回
     *
     * @param object
     */
    public void addObject(String object) {
        if (this.objects == null) {
            this.objects = new ArrayList<>();
        }
        this.objects.add(object);
    }

}