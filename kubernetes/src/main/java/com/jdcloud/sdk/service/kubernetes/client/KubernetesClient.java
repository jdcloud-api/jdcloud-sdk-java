/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * kubernetes 集群
 * kubernetes 集群服务
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.kubernetes.client;

import com.jdcloud.sdk.JdcloudSdkException;
import com.jdcloud.sdk.auth.CredentialsProvider;
import com.jdcloud.sdk.client.Environment;
import com.jdcloud.sdk.client.Jdcloud;
import com.jdcloud.sdk.client.JdcloudClient;
import com.jdcloud.sdk.client.JdcloudValidateException;
import com.jdcloud.sdk.http.HttpRequestConfig;
import com.jdcloud.sdk.service.kubernetes.model.DeleteNodeGroupRequest;
import com.jdcloud.sdk.service.kubernetes.model.DeleteNodeGroupResponse;
import com.jdcloud.sdk.service.kubernetes.client.DeleteNodeGroupExecutor;
import com.jdcloud.sdk.service.kubernetes.model.DeleteNodeInstancesRequest;
import com.jdcloud.sdk.service.kubernetes.model.DeleteNodeInstancesResponse;
import com.jdcloud.sdk.service.kubernetes.client.DeleteNodeInstancesExecutor;
import com.jdcloud.sdk.service.kubernetes.model.DescribeServerlessVersionsRequest;
import com.jdcloud.sdk.service.kubernetes.model.DescribeServerlessVersionsResponse;
import com.jdcloud.sdk.service.kubernetes.client.DescribeServerlessVersionsExecutor;
import com.jdcloud.sdk.service.kubernetes.model.DescribeNodeGroupsRequest;
import com.jdcloud.sdk.service.kubernetes.model.DescribeNodeGroupsResponse;
import com.jdcloud.sdk.service.kubernetes.client.DescribeNodeGroupsExecutor;
import com.jdcloud.sdk.service.kubernetes.model.DescribeServerlessClustersRequest;
import com.jdcloud.sdk.service.kubernetes.model.DescribeServerlessClustersResponse;
import com.jdcloud.sdk.service.kubernetes.client.DescribeServerlessClustersExecutor;
import com.jdcloud.sdk.service.kubernetes.model.ModifyServerlessClusterRequest;
import com.jdcloud.sdk.service.kubernetes.model.ModifyServerlessClusterResponse;
import com.jdcloud.sdk.service.kubernetes.client.ModifyServerlessClusterExecutor;
import com.jdcloud.sdk.service.kubernetes.model.CreateNodeGroupRequest;
import com.jdcloud.sdk.service.kubernetes.model.CreateNodeGroupResponse;
import com.jdcloud.sdk.service.kubernetes.client.CreateNodeGroupExecutor;
import com.jdcloud.sdk.service.kubernetes.model.DeleteClusterRequest;
import com.jdcloud.sdk.service.kubernetes.model.DeleteClusterResponse;
import com.jdcloud.sdk.service.kubernetes.client.DeleteClusterExecutor;
import com.jdcloud.sdk.service.kubernetes.model.ModifyNodeGroupRequest;
import com.jdcloud.sdk.service.kubernetes.model.ModifyNodeGroupResponse;
import com.jdcloud.sdk.service.kubernetes.client.ModifyNodeGroupExecutor;
import com.jdcloud.sdk.service.kubernetes.model.DeleteServerlessClusterRequest;
import com.jdcloud.sdk.service.kubernetes.model.DeleteServerlessClusterResponse;
import com.jdcloud.sdk.service.kubernetes.client.DeleteServerlessClusterExecutor;
import com.jdcloud.sdk.service.kubernetes.model.CreateClusterRequest;
import com.jdcloud.sdk.service.kubernetes.model.CreateClusterResponse;
import com.jdcloud.sdk.service.kubernetes.client.CreateClusterExecutor;
import com.jdcloud.sdk.service.kubernetes.model.SetNodeGroupSizeRequest;
import com.jdcloud.sdk.service.kubernetes.model.SetNodeGroupSizeResponse;
import com.jdcloud.sdk.service.kubernetes.client.SetNodeGroupSizeExecutor;
import com.jdcloud.sdk.service.kubernetes.model.DescribeClusterRequest;
import com.jdcloud.sdk.service.kubernetes.model.DescribeClusterResponse;
import com.jdcloud.sdk.service.kubernetes.client.DescribeClusterExecutor;
import com.jdcloud.sdk.service.kubernetes.model.ModifyClusterRequest;
import com.jdcloud.sdk.service.kubernetes.model.ModifyClusterResponse;
import com.jdcloud.sdk.service.kubernetes.client.ModifyClusterExecutor;
import com.jdcloud.sdk.service.kubernetes.model.DescribeVersionsRequest;
import com.jdcloud.sdk.service.kubernetes.model.DescribeVersionsResponse;
import com.jdcloud.sdk.service.kubernetes.client.DescribeVersionsExecutor;
import com.jdcloud.sdk.service.kubernetes.model.SetNodeGroupCARequest;
import com.jdcloud.sdk.service.kubernetes.model.SetNodeGroupCAResponse;
import com.jdcloud.sdk.service.kubernetes.client.SetNodeGroupCAExecutor;
import com.jdcloud.sdk.service.kubernetes.model.DescribeQuotasRequest;
import com.jdcloud.sdk.service.kubernetes.model.DescribeQuotasResponse;
import com.jdcloud.sdk.service.kubernetes.client.DescribeQuotasExecutor;
import com.jdcloud.sdk.service.kubernetes.model.DescribeServerlessClusterRequest;
import com.jdcloud.sdk.service.kubernetes.model.DescribeServerlessClusterResponse;
import com.jdcloud.sdk.service.kubernetes.client.DescribeServerlessClusterExecutor;
import com.jdcloud.sdk.service.kubernetes.model.DescribeClustersRequest;
import com.jdcloud.sdk.service.kubernetes.model.DescribeClustersResponse;
import com.jdcloud.sdk.service.kubernetes.client.DescribeClustersExecutor;
import com.jdcloud.sdk.service.kubernetes.model.CreateServerlessClusterRequest;
import com.jdcloud.sdk.service.kubernetes.model.CreateServerlessClusterResponse;
import com.jdcloud.sdk.service.kubernetes.client.CreateServerlessClusterExecutor;
import com.jdcloud.sdk.service.kubernetes.model.DescribeNodeGroupRequest;
import com.jdcloud.sdk.service.kubernetes.model.DescribeNodeGroupResponse;
import com.jdcloud.sdk.service.kubernetes.client.DescribeNodeGroupExecutor;

/**
 * kubernetesClient
 */
public class KubernetesClient extends JdcloudClient {

    public final static String ApiVersion = "v1";
    private final static String UserAgentPrefix = "JdcloudSdkJava";
    public final static String ClientVersion = "1.2.9";
    public final static String DefaultEndpoint = "kubernetes.jdcloud-api.com";
    public final static String ServiceName = "kubernetes";
    public final static String UserAgent = UserAgentPrefix + "/" + ClientVersion + " " + ServiceName + "/" + ApiVersion;

    CredentialsProvider credentialsProvider;
    HttpRequestConfig httpRequestConfig;
    Environment environment = new Environment.Builder().endpoint(DefaultEndpoint).build();

    public CredentialsProvider getCredentialsProvider() {
        return credentialsProvider;
    }

    public HttpRequestConfig getHttpRequestConfig() {
        return httpRequestConfig;
    }

    public Environment getEnvironment() {
        return environment;
    }

    public String getUserAgent() {
        return UserAgent;
    }

    public String getServiceName() {
        return ServiceName;
    }

    public String getVersion() {
        return ApiVersion;
    }

    private KubernetesClient() {

    }

    public static Builder builder() {
        return new DefaultBuilder();
    }


    /**
     * 集群摘除工作节点组并删除工作节点组
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteNodeGroupResponse deleteNodeGroup(DeleteNodeGroupRequest request) throws JdcloudSdkException {
        return new DeleteNodeGroupExecutor().client(this).execute(request);
    }

    /**
     * 从工作节点组中删除指定实例
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteNodeInstancesResponse deleteNodeInstances(DeleteNodeInstancesRequest request) throws JdcloudSdkException {
        return new DeleteNodeInstancesExecutor().client(this).execute(request);
    }

    /**
     * 查询Serverless集群版本列表
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeServerlessVersionsResponse describeServerlessVersions(DescribeServerlessVersionsRequest request) throws JdcloudSdkException {
        return new DescribeServerlessVersionsExecutor().client(this).execute(request);
    }

    /**
     * 查询工作节点组列表
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeNodeGroupsResponse describeNodeGroups(DescribeNodeGroupsRequest request) throws JdcloudSdkException {
        return new DescribeNodeGroupsExecutor().client(this).execute(request);
    }

    /**
     * 查询Serverless集群列表
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeServerlessClustersResponse describeServerlessClusters(DescribeServerlessClustersRequest request) throws JdcloudSdkException {
        return new DescribeServerlessClustersExecutor().client(this).execute(request);
    }

    /**
     * 修改Serverless集群的 名称 和 描述。&lt;br&gt;集群 name 和 description 必须要指定一个
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ModifyServerlessClusterResponse modifyServerlessCluster(ModifyServerlessClusterRequest request) throws JdcloudSdkException {
        return new ModifyServerlessClusterExecutor().client(this).execute(request);
    }

    /**
     * 创建工作节点组&lt;br&gt;
- 要求集群状态为running

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreateNodeGroupResponse createNodeGroup(CreateNodeGroupRequest request) throws JdcloudSdkException {
        return new CreateNodeGroupExecutor().client(this).execute(request);
    }

    /**
     * 删除集群，以及集群的所有node节点，网络，云盘等所有资源。
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteClusterResponse deleteCluster(DeleteClusterRequest request) throws JdcloudSdkException {
        return new DeleteClusterExecutor().client(this).execute(request);
    }

    /**
     * 修改工作节点组的 名称 和 描述&lt;br&gt;name 和 description 必须要指定一个
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ModifyNodeGroupResponse modifyNodeGroup(ModifyNodeGroupRequest request) throws JdcloudSdkException {
        return new ModifyNodeGroupExecutor().client(this).execute(request);
    }

    /**
     * 删除Serverless集群，以及集群的所有网络，云盘等所有资源。
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteServerlessClusterResponse deleteServerlessCluster(DeleteServerlessClusterRequest request) throws JdcloudSdkException {
        return new DeleteServerlessClusterExecutor().client(this).execute(request);
    }

    /**
     * - 创建集群
- 证书
  - 关于kubernetes的证书，默认生成，不需要用户传入。
- nodegroup
  - cluster必须与nodeGroup进行绑定
  - cluster支持多nodegroup
  - 状态
    - pending,reconciling,deleting状态不可以操作更新接口
    - running，running_with_error状态可以操作nodegroup所有接口
    - error状态只可以查询，删除
    - delete状态的cluster在十五分钟内可以查询，十五分钟后无法查询到
- 状态限制
  - pending,reconciling,deleting状态不可以操作更新接口
  - running状态可以操作cluster所有接口
  - error状态只可以查询，删除
  - delete状态的cluster在十五分钟内可以查询，十五分钟后无法查询到

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreateClusterResponse createCluster(CreateClusterRequest request) throws JdcloudSdkException {
        return new CreateClusterExecutor().client(this).execute(request);
    }

    /**
     * 调整工作节点组实例数量
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public SetNodeGroupSizeResponse setNodeGroupSize(SetNodeGroupSizeRequest request) throws JdcloudSdkException {
        return new SetNodeGroupSizeExecutor().client(this).execute(request);
    }

    /**
     * 查询单个集群详情。
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeClusterResponse describeCluster(DescribeClusterRequest request) throws JdcloudSdkException {
        return new DescribeClusterExecutor().client(this).execute(request);
    }

    /**
     * 修改集群的 名称 和 描述。&lt;br&gt;集群 name 和 description 必须要指定一个
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ModifyClusterResponse modifyCluster(ModifyClusterRequest request) throws JdcloudSdkException {
        return new ModifyClusterExecutor().client(this).execute(request);
    }

    /**
     * 查询版本信息
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeVersionsResponse describeVersions(DescribeVersionsRequest request) throws JdcloudSdkException {
        return new DescribeVersionsExecutor().client(this).execute(request);
    }

    /**
     * 设置工作节点组自动扩容缩容
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public SetNodeGroupCAResponse setNodeGroupCA(SetNodeGroupCARequest request) throws JdcloudSdkException {
        return new SetNodeGroupCAExecutor().client(this).execute(request);
    }

    /**
     * 查询 kubernetes 集群配额
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeQuotasResponse describeQuotas(DescribeQuotasRequest request) throws JdcloudSdkException {
        return new DescribeQuotasExecutor().client(this).execute(request);
    }

    /**
     * 查询单个集群详情。
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeServerlessClusterResponse describeServerlessCluster(DescribeServerlessClusterRequest request) throws JdcloudSdkException {
        return new DescribeServerlessClusterExecutor().client(this).execute(request);
    }

    /**
     * 查询集群列表
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeClustersResponse describeClusters(DescribeClustersRequest request) throws JdcloudSdkException {
        return new DescribeClustersExecutor().client(this).execute(request);
    }

    /**
     * - 创建Serverless集群
- 证书
  - 关于kubernetes的证书，默认生成，不需要用户传入。
- 状态限制
  - pending,reconciling,deleting状态不可以操作更新接口
  - running状态可以操作cluster所有接口
  - error状态只可以查询，删除
  - delete状态的cluster在十五分钟内可以查询，十五分钟后无法查询到

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreateServerlessClusterResponse createServerlessCluster(CreateServerlessClusterRequest request) throws JdcloudSdkException {
        return new CreateServerlessClusterExecutor().client(this).execute(request);
    }

    /**
     * 查询单个工作节点组详情
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeNodeGroupResponse describeNodeGroup(DescribeNodeGroupRequest request) throws JdcloudSdkException {
        return new DescribeNodeGroupExecutor().client(this).execute(request);
    }


    public interface Builder {
        public Builder credentialsProvider(CredentialsProvider provider);
        public Builder environment(Environment environment);
        public Builder httpRequestConfig(HttpRequestConfig config);
        public KubernetesClient build() throws JdcloudSdkException;
    }

    private static class DefaultBuilder implements Builder {

        private KubernetesClient kubernetesClient;

        public DefaultBuilder() {
            kubernetesClient = new KubernetesClient();
        }

        public DefaultBuilder credentialsProvider(CredentialsProvider provider) {
            kubernetesClient.credentialsProvider = provider;
            return this;
        }

        public DefaultBuilder httpRequestConfig(HttpRequestConfig config) {
            kubernetesClient.httpRequestConfig = config;
            return this;
        }

        public KubernetesClient build() throws JdcloudSdkException {

            if (kubernetesClient.credentialsProvider == null) {
                //if credentialsProvider not set, try load jdcloud global default  credentials provider
                kubernetesClient.credentialsProvider = Jdcloud.defaultInstance().getCredentialsProvider();
                if (kubernetesClient.credentialsProvider == null) {
                    throw new JdcloudValidateException("KubernetesClient build error: jdcloud credentials provider not set");
                }
            }
            if (kubernetesClient.httpRequestConfig == null) {
                kubernetesClient.httpRequestConfig = Jdcloud.defaultInstance().getHttpRequestConfig();
                if (kubernetesClient.httpRequestConfig == null) {
                    throw new JdcloudValidateException("KubernetesClient build error: http request config not set");
                }
            }
            return kubernetesClient;
        }

        public Builder environment(Environment environment) {
            kubernetesClient.environment = environment;
            return this;
        }
    }
}
