/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * 
 *
 * 
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.kubernetes.model;

import com.jdcloud.sdk.annotation.Required;

/**
 * 自动网络模型下的集群的网络配置参数
 */
public class AutoClusterNetworkSpec  implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * kube-apiserver是否可公网访问，false则kube-apiserver不绑定公网地址，true绑定公网地址
     * Required:true
     */
    @Required
    private Boolean publicApiServer;

    /**
     * master网络的cidr
     * Required:true
     */
    @Required
    private String masterCidr;

    /**
     * node网络的cidr，自动切分
     * Required:true
     */
    @Required
    private String nodeNetworkCidr;

    /**
     * 用户侧承载node和pod的vpc id
     * Required:true
     */
    @Required
    private String vpcId;

    /**
     * 是否双栈支持，开启后，kube-apiserver将拥有ipv6地址，默认不开启
     */
    private Boolean dualStack;

    /**
     * 是否开启master访问公网的能力，如果需要引入公网OIDC认证时需要开启，默认不开启
     */
    private Boolean masterNatEnabled;

    /**
     * nat网关配置,如果clusterNetworkType为auto，当natGateway和nodeElasticIpSpec都为空时会自动创建nat虚机
     */
    private NatGatewaySpec natGateway;

    /**
     * 节点公网IP的配置，与nat网关配置互斥，不可同时设置
     */
    private NodeElasticIpSpec nodeElasticIpSpec;



    /**
     * get kube-apiserver是否可公网访问，false则kube-apiserver不绑定公网地址，true绑定公网地址
     *
     * @return
     */
    public Boolean getPublicApiServer() {
        return publicApiServer;
    }

    /**
     * set kube-apiserver是否可公网访问，false则kube-apiserver不绑定公网地址，true绑定公网地址
     *
     * @param publicApiServer
     */
    public void setPublicApiServer(Boolean publicApiServer) {
        this.publicApiServer = publicApiServer;
    }


    /**
     * get master网络的cidr
     *
     * @return
     */
    public String getMasterCidr() {
        return masterCidr;
    }

    /**
     * set master网络的cidr
     *
     * @param masterCidr
     */
    public void setMasterCidr(String masterCidr) {
        this.masterCidr = masterCidr;
    }


    /**
     * get node网络的cidr，自动切分
     *
     * @return
     */
    public String getNodeNetworkCidr() {
        return nodeNetworkCidr;
    }

    /**
     * set node网络的cidr，自动切分
     *
     * @param nodeNetworkCidr
     */
    public void setNodeNetworkCidr(String nodeNetworkCidr) {
        this.nodeNetworkCidr = nodeNetworkCidr;
    }


    /**
     * get 用户侧承载node和pod的vpc id
     *
     * @return
     */
    public String getVpcId() {
        return vpcId;
    }

    /**
     * set 用户侧承载node和pod的vpc id
     *
     * @param vpcId
     */
    public void setVpcId(String vpcId) {
        this.vpcId = vpcId;
    }


    /**
     * get 是否双栈支持，开启后，kube-apiserver将拥有ipv6地址，默认不开启
     *
     * @return
     */
    public Boolean getDualStack() {
        return dualStack;
    }

    /**
     * set 是否双栈支持，开启后，kube-apiserver将拥有ipv6地址，默认不开启
     *
     * @param dualStack
     */
    public void setDualStack(Boolean dualStack) {
        this.dualStack = dualStack;
    }


    /**
     * get 是否开启master访问公网的能力，如果需要引入公网OIDC认证时需要开启，默认不开启
     *
     * @return
     */
    public Boolean getMasterNatEnabled() {
        return masterNatEnabled;
    }

    /**
     * set 是否开启master访问公网的能力，如果需要引入公网OIDC认证时需要开启，默认不开启
     *
     * @param masterNatEnabled
     */
    public void setMasterNatEnabled(Boolean masterNatEnabled) {
        this.masterNatEnabled = masterNatEnabled;
    }


    /**
     * get nat网关配置,如果clusterNetworkType为auto，当natGateway和nodeElasticIpSpec都为空时会自动创建nat虚机
     *
     * @return
     */
    public NatGatewaySpec getNatGateway() {
        return natGateway;
    }

    /**
     * set nat网关配置,如果clusterNetworkType为auto，当natGateway和nodeElasticIpSpec都为空时会自动创建nat虚机
     *
     * @param natGateway
     */
    public void setNatGateway(NatGatewaySpec natGateway) {
        this.natGateway = natGateway;
    }


    /**
     * get 节点公网IP的配置，与nat网关配置互斥，不可同时设置
     *
     * @return
     */
    public NodeElasticIpSpec getNodeElasticIpSpec() {
        return nodeElasticIpSpec;
    }

    /**
     * set 节点公网IP的配置，与nat网关配置互斥，不可同时设置
     *
     * @param nodeElasticIpSpec
     */
    public void setNodeElasticIpSpec(NodeElasticIpSpec nodeElasticIpSpec) {
        this.nodeElasticIpSpec = nodeElasticIpSpec;
    }



    /**
     * set kube-apiserver是否可公网访问，false则kube-apiserver不绑定公网地址，true绑定公网地址
     *
     * @param publicApiServer
     */
    public AutoClusterNetworkSpec publicApiServer(Boolean publicApiServer) {
        this.publicApiServer = publicApiServer;
        return this;
    }


    /**
     * set master网络的cidr
     *
     * @param masterCidr
     */
    public AutoClusterNetworkSpec masterCidr(String masterCidr) {
        this.masterCidr = masterCidr;
        return this;
    }


    /**
     * set node网络的cidr，自动切分
     *
     * @param nodeNetworkCidr
     */
    public AutoClusterNetworkSpec nodeNetworkCidr(String nodeNetworkCidr) {
        this.nodeNetworkCidr = nodeNetworkCidr;
        return this;
    }


    /**
     * set 用户侧承载node和pod的vpc id
     *
     * @param vpcId
     */
    public AutoClusterNetworkSpec vpcId(String vpcId) {
        this.vpcId = vpcId;
        return this;
    }


    /**
     * set 是否双栈支持，开启后，kube-apiserver将拥有ipv6地址，默认不开启
     *
     * @param dualStack
     */
    public AutoClusterNetworkSpec dualStack(Boolean dualStack) {
        this.dualStack = dualStack;
        return this;
    }


    /**
     * set 是否开启master访问公网的能力，如果需要引入公网OIDC认证时需要开启，默认不开启
     *
     * @param masterNatEnabled
     */
    public AutoClusterNetworkSpec masterNatEnabled(Boolean masterNatEnabled) {
        this.masterNatEnabled = masterNatEnabled;
        return this;
    }


    /**
     * set nat网关配置,如果clusterNetworkType为auto，当natGateway和nodeElasticIpSpec都为空时会自动创建nat虚机
     *
     * @param natGateway
     */
    public AutoClusterNetworkSpec natGateway(NatGatewaySpec natGateway) {
        this.natGateway = natGateway;
        return this;
    }


    /**
     * set 节点公网IP的配置，与nat网关配置互斥，不可同时设置
     *
     * @param nodeElasticIpSpec
     */
    public AutoClusterNetworkSpec nodeElasticIpSpec(NodeElasticIpSpec nodeElasticIpSpec) {
        this.nodeElasticIpSpec = nodeElasticIpSpec;
        return this;
    }


}