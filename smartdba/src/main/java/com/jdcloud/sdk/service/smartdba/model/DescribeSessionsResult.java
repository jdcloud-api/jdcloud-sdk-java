/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Sessions
 * 会话统计、实时会话、事务锁、非事务锁、未提交事务等接口
 *
 * OpenAPI spec version: v2
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.smartdba.model;

import java.util.List;
import java.util.ArrayList;
import com.jdcloud.sdk.service.smartdba.model.Session;
import com.jdcloud.sdk.service.smartdba.model.UserStatistic;
import com.jdcloud.sdk.service.smartdba.model.HostStatistic;
import com.jdcloud.sdk.service.smartdba.model.DBStatistic;
import com.jdcloud.sdk.service.JdcloudResult;

/**
 * 获取当前实例的会话信息
 */
public class DescribeSessionsResult extends JdcloudResult implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 实例已运行时间，单位:s
     */
    private Integer upTime;

    /**
     * 运行中会话总数
     */
    private Integer activeSession;

    /**
     * 运行中会话最长时间
     */
    private Integer maxActiveTime;

    /**
     * 存在事务等待的会话
     */
    private Integer waitSession;

    /**
     * 会话总数
     */
    private Integer totalSession;

    /**
     * DMS（系统）会话总数
     */
    private Integer systemsSession;

    /**
     * 总数
     */
    private Integer totalCount;

    /**
     * 实时会话明细
     */
    private List<Session> sessions;

    /**
     * 按用户统计
     */
    private List<UserStatistic> userStatistics;

    /**
     * 按访问来源统计
     */
    private List<HostStatistic> hostStatistics;

    /**
     * 按数据库统计
     */
    private List<DBStatistic> dbStatistics;


    /**
     * get 实例已运行时间，单位:s
     *
     * @return
     */
    public Integer getUpTime() {
        return upTime;
    }

    /**
     * set 实例已运行时间，单位:s
     *
     * @param upTime
     */
    public void setUpTime(Integer upTime) {
        this.upTime = upTime;
    }

    /**
     * get 运行中会话总数
     *
     * @return
     */
    public Integer getActiveSession() {
        return activeSession;
    }

    /**
     * set 运行中会话总数
     *
     * @param activeSession
     */
    public void setActiveSession(Integer activeSession) {
        this.activeSession = activeSession;
    }

    /**
     * get 运行中会话最长时间
     *
     * @return
     */
    public Integer getMaxActiveTime() {
        return maxActiveTime;
    }

    /**
     * set 运行中会话最长时间
     *
     * @param maxActiveTime
     */
    public void setMaxActiveTime(Integer maxActiveTime) {
        this.maxActiveTime = maxActiveTime;
    }

    /**
     * get 存在事务等待的会话
     *
     * @return
     */
    public Integer getWaitSession() {
        return waitSession;
    }

    /**
     * set 存在事务等待的会话
     *
     * @param waitSession
     */
    public void setWaitSession(Integer waitSession) {
        this.waitSession = waitSession;
    }

    /**
     * get 会话总数
     *
     * @return
     */
    public Integer getTotalSession() {
        return totalSession;
    }

    /**
     * set 会话总数
     *
     * @param totalSession
     */
    public void setTotalSession(Integer totalSession) {
        this.totalSession = totalSession;
    }

    /**
     * get DMS（系统）会话总数
     *
     * @return
     */
    public Integer getSystemsSession() {
        return systemsSession;
    }

    /**
     * set DMS（系统）会话总数
     *
     * @param systemsSession
     */
    public void setSystemsSession(Integer systemsSession) {
        this.systemsSession = systemsSession;
    }

    /**
     * get 总数
     *
     * @return
     */
    public Integer getTotalCount() {
        return totalCount;
    }

    /**
     * set 总数
     *
     * @param totalCount
     */
    public void setTotalCount(Integer totalCount) {
        this.totalCount = totalCount;
    }

    /**
     * get 实时会话明细
     *
     * @return
     */
    public List<Session> getSessions() {
        return sessions;
    }

    /**
     * set 实时会话明细
     *
     * @param sessions
     */
    public void setSessions(List<Session> sessions) {
        this.sessions = sessions;
    }

    /**
     * get 按用户统计
     *
     * @return
     */
    public List<UserStatistic> getUserStatistics() {
        return userStatistics;
    }

    /**
     * set 按用户统计
     *
     * @param userStatistics
     */
    public void setUserStatistics(List<UserStatistic> userStatistics) {
        this.userStatistics = userStatistics;
    }

    /**
     * get 按访问来源统计
     *
     * @return
     */
    public List<HostStatistic> getHostStatistics() {
        return hostStatistics;
    }

    /**
     * set 按访问来源统计
     *
     * @param hostStatistics
     */
    public void setHostStatistics(List<HostStatistic> hostStatistics) {
        this.hostStatistics = hostStatistics;
    }

    /**
     * get 按数据库统计
     *
     * @return
     */
    public List<DBStatistic> getDbStatistics() {
        return dbStatistics;
    }

    /**
     * set 按数据库统计
     *
     * @param dbStatistics
     */
    public void setDbStatistics(List<DBStatistic> dbStatistics) {
        this.dbStatistics = dbStatistics;
    }


    /**
     * set 实例已运行时间，单位:s
     *
     * @param upTime
     */
    public DescribeSessionsResult upTime(Integer upTime) {
        this.upTime = upTime;
        return this;
    }

    /**
     * set 运行中会话总数
     *
     * @param activeSession
     */
    public DescribeSessionsResult activeSession(Integer activeSession) {
        this.activeSession = activeSession;
        return this;
    }

    /**
     * set 运行中会话最长时间
     *
     * @param maxActiveTime
     */
    public DescribeSessionsResult maxActiveTime(Integer maxActiveTime) {
        this.maxActiveTime = maxActiveTime;
        return this;
    }

    /**
     * set 存在事务等待的会话
     *
     * @param waitSession
     */
    public DescribeSessionsResult waitSession(Integer waitSession) {
        this.waitSession = waitSession;
        return this;
    }

    /**
     * set 会话总数
     *
     * @param totalSession
     */
    public DescribeSessionsResult totalSession(Integer totalSession) {
        this.totalSession = totalSession;
        return this;
    }

    /**
     * set DMS（系统）会话总数
     *
     * @param systemsSession
     */
    public DescribeSessionsResult systemsSession(Integer systemsSession) {
        this.systemsSession = systemsSession;
        return this;
    }

    /**
     * set 总数
     *
     * @param totalCount
     */
    public DescribeSessionsResult totalCount(Integer totalCount) {
        this.totalCount = totalCount;
        return this;
    }

    /**
     * set 实时会话明细
     *
     * @param sessions
     */
    public DescribeSessionsResult sessions(List<Session> sessions) {
        this.sessions = sessions;
        return this;
    }

    /**
     * set 按用户统计
     *
     * @param userStatistics
     */
    public DescribeSessionsResult userStatistics(List<UserStatistic> userStatistics) {
        this.userStatistics = userStatistics;
        return this;
    }

    /**
     * set 按访问来源统计
     *
     * @param hostStatistics
     */
    public DescribeSessionsResult hostStatistics(List<HostStatistic> hostStatistics) {
        this.hostStatistics = hostStatistics;
        return this;
    }

    /**
     * set 按数据库统计
     *
     * @param dbStatistics
     */
    public DescribeSessionsResult dbStatistics(List<DBStatistic> dbStatistics) {
        this.dbStatistics = dbStatistics;
        return this;
    }


    /**
     * add item to 实时会话明细
     *
     * @param session
     */
    public void addSession(Session session) {
        if (this.sessions == null) {
            this.sessions = new ArrayList<>();
        }
        this.sessions.add(session);
    }

    /**
     * add item to 按用户统计
     *
     * @param userStatistic
     */
    public void addUserStatistic(UserStatistic userStatistic) {
        if (this.userStatistics == null) {
            this.userStatistics = new ArrayList<>();
        }
        this.userStatistics.add(userStatistic);
    }

    /**
     * add item to 按访问来源统计
     *
     * @param hostStatistic
     */
    public void addHostStatistic(HostStatistic hostStatistic) {
        if (this.hostStatistics == null) {
            this.hostStatistics = new ArrayList<>();
        }
        this.hostStatistics.add(hostStatistic);
    }

    /**
     * add item to 按数据库统计
     *
     * @param dbStatistic
     */
    public void addDbStatistic(DBStatistic dbStatistic) {
        if (this.dbStatistics == null) {
            this.dbStatistics = new ArrayList<>();
        }
        this.dbStatistics.add(dbStatistic);
    }

}