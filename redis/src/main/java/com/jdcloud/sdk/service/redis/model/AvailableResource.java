/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * 
 *
 * 
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.redis.model;

import java.util.List;
import java.util.ArrayList;

/**
 * 信息
 */
public class AvailableResource  implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 架构类型，目前支持：master-slave（标准版）、cluster（代理集群版）、native-cluster（cluster集群版）
     */
    private String architectureType;

    /**
     * 架构类型名
     */
    private String architectureName;

    /**
     * 是否推荐
     */
    private Boolean recommended;

    /**
     * 是否售罄
     */
    private Boolean soldOut;

    /**
     * 支持的最大副本数
     */
    private Integer supportedMaxReplicas;

    /**
     * 支持的最小副本数
     */
    private Integer supportedMinReplicas;

    /**
     * 支持的AZ指定方式：SpecifyByReplicaGroup表示按副本组指定，SpecifyByCluster表示按整个集群指定
     */
    
    private List<String> supportedAzSpecifyType;
    /**
     * 按集群指定AZ时，需要指定的最小AZ个数
     */
    private Integer minAzLimitForCluster;

    /**
     * 支持的外部访问方式：NodePort、LoadBalancer
     */
    
    private List<String> supportedExposeType;
    /**
     * 是否支持SmartProxy
     */
    private Boolean supportSmartProxy;

    /**
     * 引擎版本列表
     */
    
    private List<AvailableEngineVersion> availableEngineVersions;


    /**
     * get 架构类型，目前支持：master-slave（标准版）、cluster（代理集群版）、native-cluster（cluster集群版）
     *
     * @return
     */
    public String getArchitectureType() {
        return architectureType;
    }

    /**
     * set 架构类型，目前支持：master-slave（标准版）、cluster（代理集群版）、native-cluster（cluster集群版）
     *
     * @param architectureType
     */
    public void setArchitectureType(String architectureType) {
        this.architectureType = architectureType;
    }


    /**
     * get 架构类型名
     *
     * @return
     */
    public String getArchitectureName() {
        return architectureName;
    }

    /**
     * set 架构类型名
     *
     * @param architectureName
     */
    public void setArchitectureName(String architectureName) {
        this.architectureName = architectureName;
    }


    /**
     * get 是否推荐
     *
     * @return
     */
    public Boolean getRecommended() {
        return recommended;
    }

    /**
     * set 是否推荐
     *
     * @param recommended
     */
    public void setRecommended(Boolean recommended) {
        this.recommended = recommended;
    }


    /**
     * get 是否售罄
     *
     * @return
     */
    public Boolean getSoldOut() {
        return soldOut;
    }

    /**
     * set 是否售罄
     *
     * @param soldOut
     */
    public void setSoldOut(Boolean soldOut) {
        this.soldOut = soldOut;
    }


    /**
     * get 支持的最大副本数
     *
     * @return
     */
    public Integer getSupportedMaxReplicas() {
        return supportedMaxReplicas;
    }

    /**
     * set 支持的最大副本数
     *
     * @param supportedMaxReplicas
     */
    public void setSupportedMaxReplicas(Integer supportedMaxReplicas) {
        this.supportedMaxReplicas = supportedMaxReplicas;
    }


    /**
     * get 支持的最小副本数
     *
     * @return
     */
    public Integer getSupportedMinReplicas() {
        return supportedMinReplicas;
    }

    /**
     * set 支持的最小副本数
     *
     * @param supportedMinReplicas
     */
    public void setSupportedMinReplicas(Integer supportedMinReplicas) {
        this.supportedMinReplicas = supportedMinReplicas;
    }


    /**
    * get 支持的AZ指定方式：SpecifyByReplicaGroup表示按副本组指定，SpecifyByCluster表示按整个集群指定
    *
    * @return
    */
    public List<String> getSupportedAzSpecifyType() {
        return supportedAzSpecifyType;
    }

    /**
    * set 支持的AZ指定方式：SpecifyByReplicaGroup表示按副本组指定，SpecifyByCluster表示按整个集群指定
    *
    * @param supportedAzSpecifyType
    */
    public void setSupportedAzSpecifyType(List<String> supportedAzSpecifyType) {
        this.supportedAzSpecifyType = supportedAzSpecifyType;
    }


    /**
     * get 按集群指定AZ时，需要指定的最小AZ个数
     *
     * @return
     */
    public Integer getMinAzLimitForCluster() {
        return minAzLimitForCluster;
    }

    /**
     * set 按集群指定AZ时，需要指定的最小AZ个数
     *
     * @param minAzLimitForCluster
     */
    public void setMinAzLimitForCluster(Integer minAzLimitForCluster) {
        this.minAzLimitForCluster = minAzLimitForCluster;
    }


    /**
    * get 支持的外部访问方式：NodePort、LoadBalancer
    *
    * @return
    */
    public List<String> getSupportedExposeType() {
        return supportedExposeType;
    }

    /**
    * set 支持的外部访问方式：NodePort、LoadBalancer
    *
    * @param supportedExposeType
    */
    public void setSupportedExposeType(List<String> supportedExposeType) {
        this.supportedExposeType = supportedExposeType;
    }


    /**
     * get 是否支持SmartProxy
     *
     * @return
     */
    public Boolean getSupportSmartProxy() {
        return supportSmartProxy;
    }

    /**
     * set 是否支持SmartProxy
     *
     * @param supportSmartProxy
     */
    public void setSupportSmartProxy(Boolean supportSmartProxy) {
        this.supportSmartProxy = supportSmartProxy;
    }


    /**
    * get 引擎版本列表
    *
    * @return
    */
    public List<AvailableEngineVersion> getAvailableEngineVersions() {
        return availableEngineVersions;
    }

    /**
    * set 引擎版本列表
    *
    * @param availableEngineVersions
    */
    public void setAvailableEngineVersions(List<AvailableEngineVersion> availableEngineVersions) {
        this.availableEngineVersions = availableEngineVersions;
    }



    /**
     * set 架构类型，目前支持：master-slave（标准版）、cluster（代理集群版）、native-cluster（cluster集群版）
     *
     * @param architectureType
     */
    public AvailableResource architectureType(String architectureType) {
        this.architectureType = architectureType;
        return this;
    }


    /**
     * set 架构类型名
     *
     * @param architectureName
     */
    public AvailableResource architectureName(String architectureName) {
        this.architectureName = architectureName;
        return this;
    }


    /**
     * set 是否推荐
     *
     * @param recommended
     */
    public AvailableResource recommended(Boolean recommended) {
        this.recommended = recommended;
        return this;
    }


    /**
     * set 是否售罄
     *
     * @param soldOut
     */
    public AvailableResource soldOut(Boolean soldOut) {
        this.soldOut = soldOut;
        return this;
    }


    /**
     * set 支持的最大副本数
     *
     * @param supportedMaxReplicas
     */
    public AvailableResource supportedMaxReplicas(Integer supportedMaxReplicas) {
        this.supportedMaxReplicas = supportedMaxReplicas;
        return this;
    }


    /**
     * set 支持的最小副本数
     *
     * @param supportedMinReplicas
     */
    public AvailableResource supportedMinReplicas(Integer supportedMinReplicas) {
        this.supportedMinReplicas = supportedMinReplicas;
        return this;
    }


    /**
    * set 支持的AZ指定方式：SpecifyByReplicaGroup表示按副本组指定，SpecifyByCluster表示按整个集群指定
    *
    * @param supportedAzSpecifyType
    */
    public AvailableResource supportedAzSpecifyType(List<String> supportedAzSpecifyType) {
        this.supportedAzSpecifyType = supportedAzSpecifyType;
        return this;
    }


    /**
     * set 按集群指定AZ时，需要指定的最小AZ个数
     *
     * @param minAzLimitForCluster
     */
    public AvailableResource minAzLimitForCluster(Integer minAzLimitForCluster) {
        this.minAzLimitForCluster = minAzLimitForCluster;
        return this;
    }


    /**
    * set 支持的外部访问方式：NodePort、LoadBalancer
    *
    * @param supportedExposeType
    */
    public AvailableResource supportedExposeType(List<String> supportedExposeType) {
        this.supportedExposeType = supportedExposeType;
        return this;
    }


    /**
     * set 是否支持SmartProxy
     *
     * @param supportSmartProxy
     */
    public AvailableResource supportSmartProxy(Boolean supportSmartProxy) {
        this.supportSmartProxy = supportSmartProxy;
        return this;
    }


    /**
    * set 引擎版本列表
    *
    * @param availableEngineVersions
    */
    public AvailableResource availableEngineVersions(List<AvailableEngineVersion> availableEngineVersions) {
        this.availableEngineVersions = availableEngineVersions;
        return this;
    }



    /**
     * add item to 支持的AZ指定方式：SpecifyByReplicaGroup表示按副本组指定，SpecifyByCluster表示按整个集群指定
     *
     * @param supportedAzSpecifyType
     */
    public void addSupportedAzSpecifyType(String supportedAzSpecifyType) {
        if (this.supportedAzSpecifyType == null) {
            this.supportedAzSpecifyType = new ArrayList<>();
        }
        this.supportedAzSpecifyType.add(supportedAzSpecifyType);
    }

    /**
     * add item to 支持的外部访问方式：NodePort、LoadBalancer
     *
     * @param supportedExposeType
     */
    public void addSupportedExposeType(String supportedExposeType) {
        if (this.supportedExposeType == null) {
            this.supportedExposeType = new ArrayList<>();
        }
        this.supportedExposeType.add(supportedExposeType);
    }

    /**
     * add item to 引擎版本列表
     *
     * @param availableEngineVersion
     */
    public void addAvailableEngineVersion(AvailableEngineVersion availableEngineVersion) {
        if (this.availableEngineVersions == null) {
            this.availableEngineVersions = new ArrayList<>();
        }
        this.availableEngineVersions.add(availableEngineVersion);
    }
}