/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * 
 *
 * 
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.redis.model;

import java.util.List;
import java.util.ArrayList;
import com.jdcloud.sdk.service.charge.model.Charge;

/**
 * 缓存Redis实例信息
 */
public class CacheInstance  implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 实例ID
     */
    private String cacheInstanceId;

    /**
     * 实例名称
     */
    private String cacheInstanceName;

    /**
     * 规格代码，2.8、4.0标准版是实例规格，4.0自定义分片集群版实例表示单分片规格
     */
    private String cacheInstanceClass;

    /**
     * 实例的总内存（MB），表示用户购买的可使用内存
     */
    private Integer cacheInstanceMemoryMB;

    /**
     * 实例状态：creating表示创建中，running表示运行中，error表示错误，changing表示变更规格中，deleting表示删除中，configuring表示修改参数中，restoring表示备份恢复中，upgrading表示升级中
     */
    private String cacheInstanceStatus;

    /**
     * 实例描述
     */
    private String cacheInstanceDescription;

    /**
     * 创建时间（ISO 8601标准的UTC时间，格式为：YYYY-MM-DDTHH:mm:ssZ）
     */
    private String createTime;

    /**
     * az信息
     */
    private AzId azId;

    /**
     * 实例所属VPC ID
     */
    private String vpcId;

    /**
     * 实例所属子网ID
     */
    private String subnetId;

    /**
     * 实例的访问域名
     */
    private String connectionDomain;

    /**
     * 实例的访问端口
     */
    private Integer port;

    /**
     * 实例的计费信息
     */
    private Charge charge;

    /**
     * 实例的详细版本号，形如x.x-x.x
     */
    private String instanceVersion;

    /**
     * 连接实例时，是否需要密码认证，false表示无密码
     */
    private Boolean auth;

    /**
     * 创建实例时选择的引擎版本：目前支持2.8和4.0
     */
    private String redisVersion;

    /**
     * 实例类型：master-slave（标准版）、cluster（代理集群版）、native-cluster（cluster集群版）
     */
    private String cacheInstanceType;

    /**
     * 是否支持IPv6，0表示不支持（只能用IPv4），1表示支持
     */
    private Integer ipv6On;

    /**
     * 标签信息
     */
    private List<Tag> tags;

    /**
     * 实例所属资源组ID
     */
    private String resourceGroupId;

    /**
     * 实例分片数，标准版固定为1，自定义分片集群版实例分片数由用户创建时选择，其他实例为固定分片数
     */
    private Integer shardNumber;

    /**
     * 单分片内存大小（MB）
     */
    private Integer memoryMBPerShard;

    /**
     * 扩展配置
     */
    private RespExtension extension;

    /**
     * 实例其他访问域名列表
     */
    private List<InstanceDomain> otherDomains;

    /**
     * 从节点aof开关
     */
    private String slaveAppendonly;

    /**
     * db数量
     */
    private String databaseNum;

    /**
     * 淘汰策略
     */
    private String maxmemoryPolicy;

    /**
     * 副本数，含主副本
     */
    private Integer replicaNumber;

    /**
     * 实例是否开启SmartProxy，当架构类型为native-cluster时才有效，1表示开启，0表示不开启
     */
    private Integer enableSmartProxy;

    /**
     * cpu架构类型:arm64、amd64
     */
    private String cpuArchType;


    /**
     * get 实例ID
     *
     * @return
     */
    public String getCacheInstanceId() {
        return cacheInstanceId;
    }

    /**
     * set 实例ID
     *
     * @param cacheInstanceId
     */
    public void setCacheInstanceId(String cacheInstanceId) {
        this.cacheInstanceId = cacheInstanceId;
    }

    /**
     * get 实例名称
     *
     * @return
     */
    public String getCacheInstanceName() {
        return cacheInstanceName;
    }

    /**
     * set 实例名称
     *
     * @param cacheInstanceName
     */
    public void setCacheInstanceName(String cacheInstanceName) {
        this.cacheInstanceName = cacheInstanceName;
    }

    /**
     * get 规格代码，2.8、4.0标准版是实例规格，4.0自定义分片集群版实例表示单分片规格
     *
     * @return
     */
    public String getCacheInstanceClass() {
        return cacheInstanceClass;
    }

    /**
     * set 规格代码，2.8、4.0标准版是实例规格，4.0自定义分片集群版实例表示单分片规格
     *
     * @param cacheInstanceClass
     */
    public void setCacheInstanceClass(String cacheInstanceClass) {
        this.cacheInstanceClass = cacheInstanceClass;
    }

    /**
     * get 实例的总内存（MB），表示用户购买的可使用内存
     *
     * @return
     */
    public Integer getCacheInstanceMemoryMB() {
        return cacheInstanceMemoryMB;
    }

    /**
     * set 实例的总内存（MB），表示用户购买的可使用内存
     *
     * @param cacheInstanceMemoryMB
     */
    public void setCacheInstanceMemoryMB(Integer cacheInstanceMemoryMB) {
        this.cacheInstanceMemoryMB = cacheInstanceMemoryMB;
    }

    /**
     * get 实例状态：creating表示创建中，running表示运行中，error表示错误，changing表示变更规格中，deleting表示删除中，configuring表示修改参数中，restoring表示备份恢复中，upgrading表示升级中
     *
     * @return
     */
    public String getCacheInstanceStatus() {
        return cacheInstanceStatus;
    }

    /**
     * set 实例状态：creating表示创建中，running表示运行中，error表示错误，changing表示变更规格中，deleting表示删除中，configuring表示修改参数中，restoring表示备份恢复中，upgrading表示升级中
     *
     * @param cacheInstanceStatus
     */
    public void setCacheInstanceStatus(String cacheInstanceStatus) {
        this.cacheInstanceStatus = cacheInstanceStatus;
    }

    /**
     * get 实例描述
     *
     * @return
     */
    public String getCacheInstanceDescription() {
        return cacheInstanceDescription;
    }

    /**
     * set 实例描述
     *
     * @param cacheInstanceDescription
     */
    public void setCacheInstanceDescription(String cacheInstanceDescription) {
        this.cacheInstanceDescription = cacheInstanceDescription;
    }

    /**
     * get 创建时间（ISO 8601标准的UTC时间，格式为：YYYY-MM-DDTHH:mm:ssZ）
     *
     * @return
     */
    public String getCreateTime() {
        return createTime;
    }

    /**
     * set 创建时间（ISO 8601标准的UTC时间，格式为：YYYY-MM-DDTHH:mm:ssZ）
     *
     * @param createTime
     */
    public void setCreateTime(String createTime) {
        this.createTime = createTime;
    }

    /**
     * get az信息
     *
     * @return
     */
    public AzId getAzId() {
        return azId;
    }

    /**
     * set az信息
     *
     * @param azId
     */
    public void setAzId(AzId azId) {
        this.azId = azId;
    }

    /**
     * get 实例所属VPC ID
     *
     * @return
     */
    public String getVpcId() {
        return vpcId;
    }

    /**
     * set 实例所属VPC ID
     *
     * @param vpcId
     */
    public void setVpcId(String vpcId) {
        this.vpcId = vpcId;
    }

    /**
     * get 实例所属子网ID
     *
     * @return
     */
    public String getSubnetId() {
        return subnetId;
    }

    /**
     * set 实例所属子网ID
     *
     * @param subnetId
     */
    public void setSubnetId(String subnetId) {
        this.subnetId = subnetId;
    }

    /**
     * get 实例的访问域名
     *
     * @return
     */
    public String getConnectionDomain() {
        return connectionDomain;
    }

    /**
     * set 实例的访问域名
     *
     * @param connectionDomain
     */
    public void setConnectionDomain(String connectionDomain) {
        this.connectionDomain = connectionDomain;
    }

    /**
     * get 实例的访问端口
     *
     * @return
     */
    public Integer getPort() {
        return port;
    }

    /**
     * set 实例的访问端口
     *
     * @param port
     */
    public void setPort(Integer port) {
        this.port = port;
    }

    /**
     * get 实例的计费信息
     *
     * @return
     */
    public Charge getCharge() {
        return charge;
    }

    /**
     * set 实例的计费信息
     *
     * @param charge
     */
    public void setCharge(Charge charge) {
        this.charge = charge;
    }

    /**
     * get 实例的详细版本号，形如x.x-x.x
     *
     * @return
     */
    public String getInstanceVersion() {
        return instanceVersion;
    }

    /**
     * set 实例的详细版本号，形如x.x-x.x
     *
     * @param instanceVersion
     */
    public void setInstanceVersion(String instanceVersion) {
        this.instanceVersion = instanceVersion;
    }

    /**
     * get 连接实例时，是否需要密码认证，false表示无密码
     *
     * @return
     */
    public Boolean getAuth() {
        return auth;
    }

    /**
     * set 连接实例时，是否需要密码认证，false表示无密码
     *
     * @param auth
     */
    public void setAuth(Boolean auth) {
        this.auth = auth;
    }

    /**
     * get 创建实例时选择的引擎版本：目前支持2.8和4.0
     *
     * @return
     */
    public String getRedisVersion() {
        return redisVersion;
    }

    /**
     * set 创建实例时选择的引擎版本：目前支持2.8和4.0
     *
     * @param redisVersion
     */
    public void setRedisVersion(String redisVersion) {
        this.redisVersion = redisVersion;
    }

    /**
     * get 实例类型：master-slave（标准版）、cluster（代理集群版）、native-cluster（cluster集群版）
     *
     * @return
     */
    public String getCacheInstanceType() {
        return cacheInstanceType;
    }

    /**
     * set 实例类型：master-slave（标准版）、cluster（代理集群版）、native-cluster（cluster集群版）
     *
     * @param cacheInstanceType
     */
    public void setCacheInstanceType(String cacheInstanceType) {
        this.cacheInstanceType = cacheInstanceType;
    }

    /**
     * get 是否支持IPv6，0表示不支持（只能用IPv4），1表示支持
     *
     * @return
     */
    public Integer getIpv6On() {
        return ipv6On;
    }

    /**
     * set 是否支持IPv6，0表示不支持（只能用IPv4），1表示支持
     *
     * @param ipv6On
     */
    public void setIpv6On(Integer ipv6On) {
        this.ipv6On = ipv6On;
    }

    /**
     * get 标签信息
     *
     * @return
     */
    public List<Tag> getTags() {
        return tags;
    }

    /**
     * set 标签信息
     *
     * @param tags
     */
    public void setTags(List<Tag> tags) {
        this.tags = tags;
    }

    /**
     * get 实例所属资源组ID
     *
     * @return
     */
    public String getResourceGroupId() {
        return resourceGroupId;
    }

    /**
     * set 实例所属资源组ID
     *
     * @param resourceGroupId
     */
    public void setResourceGroupId(String resourceGroupId) {
        this.resourceGroupId = resourceGroupId;
    }

    /**
     * get 实例分片数，标准版固定为1，自定义分片集群版实例分片数由用户创建时选择，其他实例为固定分片数
     *
     * @return
     */
    public Integer getShardNumber() {
        return shardNumber;
    }

    /**
     * set 实例分片数，标准版固定为1，自定义分片集群版实例分片数由用户创建时选择，其他实例为固定分片数
     *
     * @param shardNumber
     */
    public void setShardNumber(Integer shardNumber) {
        this.shardNumber = shardNumber;
    }

    /**
     * get 单分片内存大小（MB）
     *
     * @return
     */
    public Integer getMemoryMBPerShard() {
        return memoryMBPerShard;
    }

    /**
     * set 单分片内存大小（MB）
     *
     * @param memoryMBPerShard
     */
    public void setMemoryMBPerShard(Integer memoryMBPerShard) {
        this.memoryMBPerShard = memoryMBPerShard;
    }

    /**
     * get 扩展配置
     *
     * @return
     */
    public RespExtension getExtension() {
        return extension;
    }

    /**
     * set 扩展配置
     *
     * @param extension
     */
    public void setExtension(RespExtension extension) {
        this.extension = extension;
    }

    /**
     * get 实例其他访问域名列表
     *
     * @return
     */
    public List<InstanceDomain> getOtherDomains() {
        return otherDomains;
    }

    /**
     * set 实例其他访问域名列表
     *
     * @param otherDomains
     */
    public void setOtherDomains(List<InstanceDomain> otherDomains) {
        this.otherDomains = otherDomains;
    }

    /**
     * get 从节点aof开关
     *
     * @return
     */
    public String getSlaveAppendonly() {
        return slaveAppendonly;
    }

    /**
     * set 从节点aof开关
     *
     * @param slaveAppendonly
     */
    public void setSlaveAppendonly(String slaveAppendonly) {
        this.slaveAppendonly = slaveAppendonly;
    }

    /**
     * get db数量
     *
     * @return
     */
    public String getDatabaseNum() {
        return databaseNum;
    }

    /**
     * set db数量
     *
     * @param databaseNum
     */
    public void setDatabaseNum(String databaseNum) {
        this.databaseNum = databaseNum;
    }

    /**
     * get 淘汰策略
     *
     * @return
     */
    public String getMaxmemoryPolicy() {
        return maxmemoryPolicy;
    }

    /**
     * set 淘汰策略
     *
     * @param maxmemoryPolicy
     */
    public void setMaxmemoryPolicy(String maxmemoryPolicy) {
        this.maxmemoryPolicy = maxmemoryPolicy;
    }

    /**
     * get 副本数，含主副本
     *
     * @return
     */
    public Integer getReplicaNumber() {
        return replicaNumber;
    }

    /**
     * set 副本数，含主副本
     *
     * @param replicaNumber
     */
    public void setReplicaNumber(Integer replicaNumber) {
        this.replicaNumber = replicaNumber;
    }

    /**
     * get 实例是否开启SmartProxy，当架构类型为native-cluster时才有效，1表示开启，0表示不开启
     *
     * @return
     */
    public Integer getEnableSmartProxy() {
        return enableSmartProxy;
    }

    /**
     * set 实例是否开启SmartProxy，当架构类型为native-cluster时才有效，1表示开启，0表示不开启
     *
     * @param enableSmartProxy
     */
    public void setEnableSmartProxy(Integer enableSmartProxy) {
        this.enableSmartProxy = enableSmartProxy;
    }

    /**
     * get cpu架构类型:arm64、amd64
     *
     * @return
     */
    public String getCpuArchType() {
        return cpuArchType;
    }

    /**
     * set cpu架构类型:arm64、amd64
     *
     * @param cpuArchType
     */
    public void setCpuArchType(String cpuArchType) {
        this.cpuArchType = cpuArchType;
    }


    /**
     * set 实例ID
     *
     * @param cacheInstanceId
     */
    public CacheInstance cacheInstanceId(String cacheInstanceId) {
        this.cacheInstanceId = cacheInstanceId;
        return this;
    }

    /**
     * set 实例名称
     *
     * @param cacheInstanceName
     */
    public CacheInstance cacheInstanceName(String cacheInstanceName) {
        this.cacheInstanceName = cacheInstanceName;
        return this;
    }

    /**
     * set 规格代码，2.8、4.0标准版是实例规格，4.0自定义分片集群版实例表示单分片规格
     *
     * @param cacheInstanceClass
     */
    public CacheInstance cacheInstanceClass(String cacheInstanceClass) {
        this.cacheInstanceClass = cacheInstanceClass;
        return this;
    }

    /**
     * set 实例的总内存（MB），表示用户购买的可使用内存
     *
     * @param cacheInstanceMemoryMB
     */
    public CacheInstance cacheInstanceMemoryMB(Integer cacheInstanceMemoryMB) {
        this.cacheInstanceMemoryMB = cacheInstanceMemoryMB;
        return this;
    }

    /**
     * set 实例状态：creating表示创建中，running表示运行中，error表示错误，changing表示变更规格中，deleting表示删除中，configuring表示修改参数中，restoring表示备份恢复中，upgrading表示升级中
     *
     * @param cacheInstanceStatus
     */
    public CacheInstance cacheInstanceStatus(String cacheInstanceStatus) {
        this.cacheInstanceStatus = cacheInstanceStatus;
        return this;
    }

    /**
     * set 实例描述
     *
     * @param cacheInstanceDescription
     */
    public CacheInstance cacheInstanceDescription(String cacheInstanceDescription) {
        this.cacheInstanceDescription = cacheInstanceDescription;
        return this;
    }

    /**
     * set 创建时间（ISO 8601标准的UTC时间，格式为：YYYY-MM-DDTHH:mm:ssZ）
     *
     * @param createTime
     */
    public CacheInstance createTime(String createTime) {
        this.createTime = createTime;
        return this;
    }

    /**
     * set az信息
     *
     * @param azId
     */
    public CacheInstance azId(AzId azId) {
        this.azId = azId;
        return this;
    }

    /**
     * set 实例所属VPC ID
     *
     * @param vpcId
     */
    public CacheInstance vpcId(String vpcId) {
        this.vpcId = vpcId;
        return this;
    }

    /**
     * set 实例所属子网ID
     *
     * @param subnetId
     */
    public CacheInstance subnetId(String subnetId) {
        this.subnetId = subnetId;
        return this;
    }

    /**
     * set 实例的访问域名
     *
     * @param connectionDomain
     */
    public CacheInstance connectionDomain(String connectionDomain) {
        this.connectionDomain = connectionDomain;
        return this;
    }

    /**
     * set 实例的访问端口
     *
     * @param port
     */
    public CacheInstance port(Integer port) {
        this.port = port;
        return this;
    }

    /**
     * set 实例的计费信息
     *
     * @param charge
     */
    public CacheInstance charge(Charge charge) {
        this.charge = charge;
        return this;
    }

    /**
     * set 实例的详细版本号，形如x.x-x.x
     *
     * @param instanceVersion
     */
    public CacheInstance instanceVersion(String instanceVersion) {
        this.instanceVersion = instanceVersion;
        return this;
    }

    /**
     * set 连接实例时，是否需要密码认证，false表示无密码
     *
     * @param auth
     */
    public CacheInstance auth(Boolean auth) {
        this.auth = auth;
        return this;
    }

    /**
     * set 创建实例时选择的引擎版本：目前支持2.8和4.0
     *
     * @param redisVersion
     */
    public CacheInstance redisVersion(String redisVersion) {
        this.redisVersion = redisVersion;
        return this;
    }

    /**
     * set 实例类型：master-slave（标准版）、cluster（代理集群版）、native-cluster（cluster集群版）
     *
     * @param cacheInstanceType
     */
    public CacheInstance cacheInstanceType(String cacheInstanceType) {
        this.cacheInstanceType = cacheInstanceType;
        return this;
    }

    /**
     * set 是否支持IPv6，0表示不支持（只能用IPv4），1表示支持
     *
     * @param ipv6On
     */
    public CacheInstance ipv6On(Integer ipv6On) {
        this.ipv6On = ipv6On;
        return this;
    }

    /**
     * set 标签信息
     *
     * @param tags
     */
    public CacheInstance tags(List<Tag> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * set 实例所属资源组ID
     *
     * @param resourceGroupId
     */
    public CacheInstance resourceGroupId(String resourceGroupId) {
        this.resourceGroupId = resourceGroupId;
        return this;
    }

    /**
     * set 实例分片数，标准版固定为1，自定义分片集群版实例分片数由用户创建时选择，其他实例为固定分片数
     *
     * @param shardNumber
     */
    public CacheInstance shardNumber(Integer shardNumber) {
        this.shardNumber = shardNumber;
        return this;
    }

    /**
     * set 单分片内存大小（MB）
     *
     * @param memoryMBPerShard
     */
    public CacheInstance memoryMBPerShard(Integer memoryMBPerShard) {
        this.memoryMBPerShard = memoryMBPerShard;
        return this;
    }

    /**
     * set 扩展配置
     *
     * @param extension
     */
    public CacheInstance extension(RespExtension extension) {
        this.extension = extension;
        return this;
    }

    /**
     * set 实例其他访问域名列表
     *
     * @param otherDomains
     */
    public CacheInstance otherDomains(List<InstanceDomain> otherDomains) {
        this.otherDomains = otherDomains;
        return this;
    }

    /**
     * set 从节点aof开关
     *
     * @param slaveAppendonly
     */
    public CacheInstance slaveAppendonly(String slaveAppendonly) {
        this.slaveAppendonly = slaveAppendonly;
        return this;
    }

    /**
     * set db数量
     *
     * @param databaseNum
     */
    public CacheInstance databaseNum(String databaseNum) {
        this.databaseNum = databaseNum;
        return this;
    }

    /**
     * set 淘汰策略
     *
     * @param maxmemoryPolicy
     */
    public CacheInstance maxmemoryPolicy(String maxmemoryPolicy) {
        this.maxmemoryPolicy = maxmemoryPolicy;
        return this;
    }

    /**
     * set 副本数，含主副本
     *
     * @param replicaNumber
     */
    public CacheInstance replicaNumber(Integer replicaNumber) {
        this.replicaNumber = replicaNumber;
        return this;
    }

    /**
     * set 实例是否开启SmartProxy，当架构类型为native-cluster时才有效，1表示开启，0表示不开启
     *
     * @param enableSmartProxy
     */
    public CacheInstance enableSmartProxy(Integer enableSmartProxy) {
        this.enableSmartProxy = enableSmartProxy;
        return this;
    }

    /**
     * set cpu架构类型:arm64、amd64
     *
     * @param cpuArchType
     */
    public CacheInstance cpuArchType(String cpuArchType) {
        this.cpuArchType = cpuArchType;
        return this;
    }


    /**
     * add item to 标签信息
     *
     * @param tag
     */
    public void addTag(Tag tag) {
        if (this.tags == null) {
            this.tags = new ArrayList<>();
        }
        this.tags.add(tag);
    }

    /**
     * add item to 实例其他访问域名列表
     *
     * @param otherDomain
     */
    public void addOtherDomain(InstanceDomain otherDomain) {
        if (this.otherDomains == null) {
            this.otherDomains = new ArrayList<>();
        }
        this.otherDomains.add(otherDomain);
    }

}