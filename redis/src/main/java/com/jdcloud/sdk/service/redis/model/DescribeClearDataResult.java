/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Redis Instance API
 * 缓存Redis实例的创建、删除、修改基本信息、设置密码、变配、实例列表、备份、配置参数等接口
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.redis.model;

import java.util.List;
import java.util.ArrayList;
import com.jdcloud.sdk.service.redis.model.KeyFilter;
import com.jdcloud.sdk.service.JdcloudResult;

/**
 * 查询数据清理任务进度
 */
public class DescribeClearDataResult extends JdcloudResult implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 数据清理任务类型
     */
    private String clearType;

    /**
     * 匹配模式, 如: test*、*test、ab*cc*, 当节点为AllData、ExpiredData时可以忽略此参数
     */
    private String keyPattern;

    /**
     * key的过滤条件, 当节点为AllData、ExpiredData时可以忽略此参数
     */
    private List<KeyFilter> keyFilter;

    /**
     * 数据遍历的速率
     */
    private Integer qpsLimit;

    /**
     * 本次清理任务的完成进度
     */
    private Integer progress;

    /**
     * 本次清理任务已成功清理的key数量
     */
    private Integer effectKeys;

    /**
     * 本次清理任务的状态:running、success、failed
     */
    private String status;

    /**
     * 本次清理任务失败的原因
     */
    private String message;

    /**
     * 最近一次status转换的时间
     */
    private String lastTransitionTime;


    /**
     * get 数据清理任务类型
     *
     * @return
     */
    public String getClearType() {
        return clearType;
    }

    /**
     * set 数据清理任务类型
     *
     * @param clearType
     */
    public void setClearType(String clearType) {
        this.clearType = clearType;
    }

    /**
     * get 匹配模式, 如: test*、*test、ab*cc*, 当节点为AllData、ExpiredData时可以忽略此参数
     *
     * @return
     */
    public String getKeyPattern() {
        return keyPattern;
    }

    /**
     * set 匹配模式, 如: test*、*test、ab*cc*, 当节点为AllData、ExpiredData时可以忽略此参数
     *
     * @param keyPattern
     */
    public void setKeyPattern(String keyPattern) {
        this.keyPattern = keyPattern;
    }

    /**
     * get key的过滤条件, 当节点为AllData、ExpiredData时可以忽略此参数
     *
     * @return
     */
    public List<KeyFilter> getKeyFilter() {
        return keyFilter;
    }

    /**
     * set key的过滤条件, 当节点为AllData、ExpiredData时可以忽略此参数
     *
     * @param keyFilter
     */
    public void setKeyFilter(List<KeyFilter> keyFilter) {
        this.keyFilter = keyFilter;
    }

    /**
     * get 数据遍历的速率
     *
     * @return
     */
    public Integer getQpsLimit() {
        return qpsLimit;
    }

    /**
     * set 数据遍历的速率
     *
     * @param qpsLimit
     */
    public void setQpsLimit(Integer qpsLimit) {
        this.qpsLimit = qpsLimit;
    }

    /**
     * get 本次清理任务的完成进度
     *
     * @return
     */
    public Integer getProgress() {
        return progress;
    }

    /**
     * set 本次清理任务的完成进度
     *
     * @param progress
     */
    public void setProgress(Integer progress) {
        this.progress = progress;
    }

    /**
     * get 本次清理任务已成功清理的key数量
     *
     * @return
     */
    public Integer getEffectKeys() {
        return effectKeys;
    }

    /**
     * set 本次清理任务已成功清理的key数量
     *
     * @param effectKeys
     */
    public void setEffectKeys(Integer effectKeys) {
        this.effectKeys = effectKeys;
    }

    /**
     * get 本次清理任务的状态:running、success、failed
     *
     * @return
     */
    public String getStatus() {
        return status;
    }

    /**
     * set 本次清理任务的状态:running、success、failed
     *
     * @param status
     */
    public void setStatus(String status) {
        this.status = status;
    }

    /**
     * get 本次清理任务失败的原因
     *
     * @return
     */
    public String getMessage() {
        return message;
    }

    /**
     * set 本次清理任务失败的原因
     *
     * @param message
     */
    public void setMessage(String message) {
        this.message = message;
    }

    /**
     * get 最近一次status转换的时间
     *
     * @return
     */
    public String getLastTransitionTime() {
        return lastTransitionTime;
    }

    /**
     * set 最近一次status转换的时间
     *
     * @param lastTransitionTime
     */
    public void setLastTransitionTime(String lastTransitionTime) {
        this.lastTransitionTime = lastTransitionTime;
    }


    /**
     * set 数据清理任务类型
     *
     * @param clearType
     */
    public DescribeClearDataResult clearType(String clearType) {
        this.clearType = clearType;
        return this;
    }

    /**
     * set 匹配模式, 如: test*、*test、ab*cc*, 当节点为AllData、ExpiredData时可以忽略此参数
     *
     * @param keyPattern
     */
    public DescribeClearDataResult keyPattern(String keyPattern) {
        this.keyPattern = keyPattern;
        return this;
    }

    /**
     * set key的过滤条件, 当节点为AllData、ExpiredData时可以忽略此参数
     *
     * @param keyFilter
     */
    public DescribeClearDataResult keyFilter(List<KeyFilter> keyFilter) {
        this.keyFilter = keyFilter;
        return this;
    }

    /**
     * set 数据遍历的速率
     *
     * @param qpsLimit
     */
    public DescribeClearDataResult qpsLimit(Integer qpsLimit) {
        this.qpsLimit = qpsLimit;
        return this;
    }

    /**
     * set 本次清理任务的完成进度
     *
     * @param progress
     */
    public DescribeClearDataResult progress(Integer progress) {
        this.progress = progress;
        return this;
    }

    /**
     * set 本次清理任务已成功清理的key数量
     *
     * @param effectKeys
     */
    public DescribeClearDataResult effectKeys(Integer effectKeys) {
        this.effectKeys = effectKeys;
        return this;
    }

    /**
     * set 本次清理任务的状态:running、success、failed
     *
     * @param status
     */
    public DescribeClearDataResult status(String status) {
        this.status = status;
        return this;
    }

    /**
     * set 本次清理任务失败的原因
     *
     * @param message
     */
    public DescribeClearDataResult message(String message) {
        this.message = message;
        return this;
    }

    /**
     * set 最近一次status转换的时间
     *
     * @param lastTransitionTime
     */
    public DescribeClearDataResult lastTransitionTime(String lastTransitionTime) {
        this.lastTransitionTime = lastTransitionTime;
        return this;
    }


    /**
     * add item to key的过滤条件, 当节点为AllData、ExpiredData时可以忽略此参数
     *
     * @param keyFilter
     */
    public void addKeyFilter(KeyFilter keyFilter) {
        if (this.keyFilter == null) {
            this.keyFilter = new ArrayList<>();
        }
        this.keyFilter.add(keyFilter);
    }

}