/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * 
 *
 * 
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.redis.model;

import java.util.List;
import java.util.ArrayList;

/**
 * 单分片规格
 */
public class ShardSpec  implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 单分片规格代码，自定义分片集群实例才需要，标准版不需要
     */
    private String shardClass;

    /**
     * 单分片CPU核数
     */
    private Integer cpu;

    /**
     * 单分片内存大小（GB）
     */
    private Integer memoryGB;

    /**
     * 单分片磁盘大小（GB）
     */
    private Integer diskGB;

    /**
     * 单分片最大连接数
     */
    private Integer maxConnection;

    /**
     * 单分片带宽（Mbps）
     */
    private Integer bandwidthMbps;

    /**
     * 支持的分片数列表
     */
    
    private List<Integer> shardNumberList;


    /**
     * get 单分片规格代码，自定义分片集群实例才需要，标准版不需要
     *
     * @return
     */
    public String getShardClass() {
        return shardClass;
    }

    /**
     * set 单分片规格代码，自定义分片集群实例才需要，标准版不需要
     *
     * @param shardClass
     */
    public void setShardClass(String shardClass) {
        this.shardClass = shardClass;
    }


    /**
     * get 单分片CPU核数
     *
     * @return
     */
    public Integer getCpu() {
        return cpu;
    }

    /**
     * set 单分片CPU核数
     *
     * @param cpu
     */
    public void setCpu(Integer cpu) {
        this.cpu = cpu;
    }


    /**
     * get 单分片内存大小（GB）
     *
     * @return
     */
    public Integer getMemoryGB() {
        return memoryGB;
    }

    /**
     * set 单分片内存大小（GB）
     *
     * @param memoryGB
     */
    public void setMemoryGB(Integer memoryGB) {
        this.memoryGB = memoryGB;
    }


    /**
     * get 单分片磁盘大小（GB）
     *
     * @return
     */
    public Integer getDiskGB() {
        return diskGB;
    }

    /**
     * set 单分片磁盘大小（GB）
     *
     * @param diskGB
     */
    public void setDiskGB(Integer diskGB) {
        this.diskGB = diskGB;
    }


    /**
     * get 单分片最大连接数
     *
     * @return
     */
    public Integer getMaxConnection() {
        return maxConnection;
    }

    /**
     * set 单分片最大连接数
     *
     * @param maxConnection
     */
    public void setMaxConnection(Integer maxConnection) {
        this.maxConnection = maxConnection;
    }


    /**
     * get 单分片带宽（Mbps）
     *
     * @return
     */
    public Integer getBandwidthMbps() {
        return bandwidthMbps;
    }

    /**
     * set 单分片带宽（Mbps）
     *
     * @param bandwidthMbps
     */
    public void setBandwidthMbps(Integer bandwidthMbps) {
        this.bandwidthMbps = bandwidthMbps;
    }


    /**
    * get 支持的分片数列表
    *
    * @return
    */
    public List<Integer> getShardNumberList() {
        return shardNumberList;
    }

    /**
    * set 支持的分片数列表
    *
    * @param shardNumberList
    */
    public void setShardNumberList(List<Integer> shardNumberList) {
        this.shardNumberList = shardNumberList;
    }



    /**
     * set 单分片规格代码，自定义分片集群实例才需要，标准版不需要
     *
     * @param shardClass
     */
    public ShardSpec shardClass(String shardClass) {
        this.shardClass = shardClass;
        return this;
    }


    /**
     * set 单分片CPU核数
     *
     * @param cpu
     */
    public ShardSpec cpu(Integer cpu) {
        this.cpu = cpu;
        return this;
    }


    /**
     * set 单分片内存大小（GB）
     *
     * @param memoryGB
     */
    public ShardSpec memoryGB(Integer memoryGB) {
        this.memoryGB = memoryGB;
        return this;
    }


    /**
     * set 单分片磁盘大小（GB）
     *
     * @param diskGB
     */
    public ShardSpec diskGB(Integer diskGB) {
        this.diskGB = diskGB;
        return this;
    }


    /**
     * set 单分片最大连接数
     *
     * @param maxConnection
     */
    public ShardSpec maxConnection(Integer maxConnection) {
        this.maxConnection = maxConnection;
        return this;
    }


    /**
     * set 单分片带宽（Mbps）
     *
     * @param bandwidthMbps
     */
    public ShardSpec bandwidthMbps(Integer bandwidthMbps) {
        this.bandwidthMbps = bandwidthMbps;
        return this;
    }


    /**
    * set 支持的分片数列表
    *
    * @param shardNumberList
    */
    public ShardSpec shardNumberList(List<Integer> shardNumberList) {
        this.shardNumberList = shardNumberList;
        return this;
    }



    /**
     * add item to 支持的分片数列表
     *
     * @param shardNumberList
     */
    public void addShardNumberList(Integer shardNumberList) {
        if (this.shardNumberList == null) {
            this.shardNumberList = new ArrayList<>();
        }
        this.shardNumberList.add(shardNumberList);
    }
}