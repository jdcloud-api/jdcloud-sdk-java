/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * 
 *
 * 
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.redis.model;

import java.util.List;
import java.util.ArrayList;
import com.jdcloud.sdk.annotation.Required;

/**
 * 缓存Redis实例的配置参数
 */
public class ConfigItem  implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * configName目前只支持以下参数：
maxmemory-policy（redis 2.8和redis 4.0都支持，但配置值不相同）：内存剔除策略的最大使用内存限制
hash-max-ziplist-entries（redis 2.8和redis 4.0都支持）：用ziplist编码实现的哈希对象，ziplist中最多能存放entry个数的阈值
hash-max-ziplist-value（redis 2.8和redis 4.0都支持）：用ziplist编码实现的哈希对象，ziplist中能存放的value长度的最大值
list-max-ziplist-entries（只有redis 2.8支持）：用ziplist编码实现的列表对象，ziplist中最多能存放entry个数的阈值
list-max-ziplist-value（只有redis 2.8支持）：用ziplist编码实现的列表对象，ziplist中能存放的value长度的最大值
list-max-ziplist-size（只有redis 4.0支持）：用ziplist编码实现的列表对象，按照数据项个数或占用的字节数，限定ziplist的长度
list-compress-depth（只有redis 4.0支持）：用ziplist编码实现的列表对象，quicklist两端不被压缩的节点个数
set-max-intset-entries（redis 2.8和redis 4.0都支持）：用intset编码实现的集合对象，intset中最多能存放entry个数的阈值
zset-max-ziplist-entries（redis 2.8和redis 4.0都支持）：用ziplist编码实现的有序集合对象，ziplist中最多能存放entry个数的阈值
zset-max-ziplist-value（redis 2.8和redis 4.0都支持）：用ziplist编码实现的有序集合对象，ziplist中能存放的value长度的最大值
slowlog-log-slower-than（redis 2.8和redis 4.0都支持）：慢查询日志超时时间，单位微秒（1000000表示1秒），0表示记录所有的命令
notify-keyspace-events（只有redis 4.0支持）：事件通知

     * Required:true
     */
    @Required
    private String configName;

    /**
     * 参数的配置值，默认值、参考值如下：
maxmemory-policy（redis 2.8和redis 4.0的默认值都为volatile-lru）：redis 4.0 的参考值有[volatile-lru, allkeys-lru, volatile-lfu, allkeys-lfu, volatile-random, allkeys-random, volatile-ttl, noeviction]，redis 2.8的参考值有[volatile-lru , allkeys-lru , volatile-random , allkeys-random , volatile-ttl , noeviction]
hash-max-ziplist-entries（redis 2.8和redis 4.0的默认值都为512）：[0-10000]
hash-max-ziplist-value（redis 2.8和redis 4.0的默认值都为64）：[0-10000]
list-max-ziplist-entries（redis 2.8的默认值为512，redis 4.0不支持）：[0-10000]
list-max-ziplist-value（redis 2.8的默认值为64，redis 4.0不支持）：[0-10000]
list-max-ziplist-size（redis 4.0的默认值为-2，redis 2.8不支持）：[-5-10000]
list-compress-depth（redis 4.0的默认值为0，redis 2.8不支持）：[0-10000]
set-max-intset-entries（redis 2.8和redis 4.0的默认值都为512）：[0-10000]
zset-max-ziplist-entries（redis 2.8和redis 4.0的默认值都为128）：[0-10000]
zset-max-ziplist-value（redis 2.8和redis 4.0的默认值都为64）：[0-10000]
slowlog-log-slower-than（redis 2.8和redis 4.0的默认值都为10000）：[0-10000]
notify-keyspace-events（redis 4.0的默认值为空，redis 2.8不支持）：[K , E , g , $ , l , s , h , z , x , e , A]字母的组合，区分大小写，或为空

     * Required:true
     */
    @Required
    private String configValue;

    /**
     * 参数默认值
     */
    private String configDefaultValue;

    /**
     * 参数值类型，目前有int、string、outputBuffer、byteArray这四种
     */
    private String configValueType;

    /**
     * 参数值的最小值，在configValueType为int时有效
     */
    private Integer configValueMin;

    /**
     * 参数值的最大值，在configValueType为int时有效
     */
    private Integer configValueMax;

    /**
     * 参数值的可选值，在configValueType为string或byteArray时有效
     */
    private List<String> configValueOptional;

    /**
     * configValueType为outputBuffer时的参数值规则
     */
    private String configValueOutputBuffer;


    /**
     * get configName目前只支持以下参数：
maxmemory-policy（redis 2.8和redis 4.0都支持，但配置值不相同）：内存剔除策略的最大使用内存限制
hash-max-ziplist-entries（redis 2.8和redis 4.0都支持）：用ziplist编码实现的哈希对象，ziplist中最多能存放entry个数的阈值
hash-max-ziplist-value（redis 2.8和redis 4.0都支持）：用ziplist编码实现的哈希对象，ziplist中能存放的value长度的最大值
list-max-ziplist-entries（只有redis 2.8支持）：用ziplist编码实现的列表对象，ziplist中最多能存放entry个数的阈值
list-max-ziplist-value（只有redis 2.8支持）：用ziplist编码实现的列表对象，ziplist中能存放的value长度的最大值
list-max-ziplist-size（只有redis 4.0支持）：用ziplist编码实现的列表对象，按照数据项个数或占用的字节数，限定ziplist的长度
list-compress-depth（只有redis 4.0支持）：用ziplist编码实现的列表对象，quicklist两端不被压缩的节点个数
set-max-intset-entries（redis 2.8和redis 4.0都支持）：用intset编码实现的集合对象，intset中最多能存放entry个数的阈值
zset-max-ziplist-entries（redis 2.8和redis 4.0都支持）：用ziplist编码实现的有序集合对象，ziplist中最多能存放entry个数的阈值
zset-max-ziplist-value（redis 2.8和redis 4.0都支持）：用ziplist编码实现的有序集合对象，ziplist中能存放的value长度的最大值
slowlog-log-slower-than（redis 2.8和redis 4.0都支持）：慢查询日志超时时间，单位微秒（1000000表示1秒），0表示记录所有的命令
notify-keyspace-events（只有redis 4.0支持）：事件通知

     *
     * @return
     */
    public String getConfigName() {
        return configName;
    }

    /**
     * set configName目前只支持以下参数：
maxmemory-policy（redis 2.8和redis 4.0都支持，但配置值不相同）：内存剔除策略的最大使用内存限制
hash-max-ziplist-entries（redis 2.8和redis 4.0都支持）：用ziplist编码实现的哈希对象，ziplist中最多能存放entry个数的阈值
hash-max-ziplist-value（redis 2.8和redis 4.0都支持）：用ziplist编码实现的哈希对象，ziplist中能存放的value长度的最大值
list-max-ziplist-entries（只有redis 2.8支持）：用ziplist编码实现的列表对象，ziplist中最多能存放entry个数的阈值
list-max-ziplist-value（只有redis 2.8支持）：用ziplist编码实现的列表对象，ziplist中能存放的value长度的最大值
list-max-ziplist-size（只有redis 4.0支持）：用ziplist编码实现的列表对象，按照数据项个数或占用的字节数，限定ziplist的长度
list-compress-depth（只有redis 4.0支持）：用ziplist编码实现的列表对象，quicklist两端不被压缩的节点个数
set-max-intset-entries（redis 2.8和redis 4.0都支持）：用intset编码实现的集合对象，intset中最多能存放entry个数的阈值
zset-max-ziplist-entries（redis 2.8和redis 4.0都支持）：用ziplist编码实现的有序集合对象，ziplist中最多能存放entry个数的阈值
zset-max-ziplist-value（redis 2.8和redis 4.0都支持）：用ziplist编码实现的有序集合对象，ziplist中能存放的value长度的最大值
slowlog-log-slower-than（redis 2.8和redis 4.0都支持）：慢查询日志超时时间，单位微秒（1000000表示1秒），0表示记录所有的命令
notify-keyspace-events（只有redis 4.0支持）：事件通知

     *
     * @param configName
     */
    public void setConfigName(String configName) {
        this.configName = configName;
    }

    /**
     * get 参数的配置值，默认值、参考值如下：
maxmemory-policy（redis 2.8和redis 4.0的默认值都为volatile-lru）：redis 4.0 的参考值有[volatile-lru, allkeys-lru, volatile-lfu, allkeys-lfu, volatile-random, allkeys-random, volatile-ttl, noeviction]，redis 2.8的参考值有[volatile-lru , allkeys-lru , volatile-random , allkeys-random , volatile-ttl , noeviction]
hash-max-ziplist-entries（redis 2.8和redis 4.0的默认值都为512）：[0-10000]
hash-max-ziplist-value（redis 2.8和redis 4.0的默认值都为64）：[0-10000]
list-max-ziplist-entries（redis 2.8的默认值为512，redis 4.0不支持）：[0-10000]
list-max-ziplist-value（redis 2.8的默认值为64，redis 4.0不支持）：[0-10000]
list-max-ziplist-size（redis 4.0的默认值为-2，redis 2.8不支持）：[-5-10000]
list-compress-depth（redis 4.0的默认值为0，redis 2.8不支持）：[0-10000]
set-max-intset-entries（redis 2.8和redis 4.0的默认值都为512）：[0-10000]
zset-max-ziplist-entries（redis 2.8和redis 4.0的默认值都为128）：[0-10000]
zset-max-ziplist-value（redis 2.8和redis 4.0的默认值都为64）：[0-10000]
slowlog-log-slower-than（redis 2.8和redis 4.0的默认值都为10000）：[0-10000]
notify-keyspace-events（redis 4.0的默认值为空，redis 2.8不支持）：[K , E , g , $ , l , s , h , z , x , e , A]字母的组合，区分大小写，或为空

     *
     * @return
     */
    public String getConfigValue() {
        return configValue;
    }

    /**
     * set 参数的配置值，默认值、参考值如下：
maxmemory-policy（redis 2.8和redis 4.0的默认值都为volatile-lru）：redis 4.0 的参考值有[volatile-lru, allkeys-lru, volatile-lfu, allkeys-lfu, volatile-random, allkeys-random, volatile-ttl, noeviction]，redis 2.8的参考值有[volatile-lru , allkeys-lru , volatile-random , allkeys-random , volatile-ttl , noeviction]
hash-max-ziplist-entries（redis 2.8和redis 4.0的默认值都为512）：[0-10000]
hash-max-ziplist-value（redis 2.8和redis 4.0的默认值都为64）：[0-10000]
list-max-ziplist-entries（redis 2.8的默认值为512，redis 4.0不支持）：[0-10000]
list-max-ziplist-value（redis 2.8的默认值为64，redis 4.0不支持）：[0-10000]
list-max-ziplist-size（redis 4.0的默认值为-2，redis 2.8不支持）：[-5-10000]
list-compress-depth（redis 4.0的默认值为0，redis 2.8不支持）：[0-10000]
set-max-intset-entries（redis 2.8和redis 4.0的默认值都为512）：[0-10000]
zset-max-ziplist-entries（redis 2.8和redis 4.0的默认值都为128）：[0-10000]
zset-max-ziplist-value（redis 2.8和redis 4.0的默认值都为64）：[0-10000]
slowlog-log-slower-than（redis 2.8和redis 4.0的默认值都为10000）：[0-10000]
notify-keyspace-events（redis 4.0的默认值为空，redis 2.8不支持）：[K , E , g , $ , l , s , h , z , x , e , A]字母的组合，区分大小写，或为空

     *
     * @param configValue
     */
    public void setConfigValue(String configValue) {
        this.configValue = configValue;
    }

    /**
     * get 参数默认值
     *
     * @return
     */
    public String getConfigDefaultValue() {
        return configDefaultValue;
    }

    /**
     * set 参数默认值
     *
     * @param configDefaultValue
     */
    public void setConfigDefaultValue(String configDefaultValue) {
        this.configDefaultValue = configDefaultValue;
    }

    /**
     * get 参数值类型，目前有int、string、outputBuffer、byteArray这四种
     *
     * @return
     */
    public String getConfigValueType() {
        return configValueType;
    }

    /**
     * set 参数值类型，目前有int、string、outputBuffer、byteArray这四种
     *
     * @param configValueType
     */
    public void setConfigValueType(String configValueType) {
        this.configValueType = configValueType;
    }

    /**
     * get 参数值的最小值，在configValueType为int时有效
     *
     * @return
     */
    public Integer getConfigValueMin() {
        return configValueMin;
    }

    /**
     * set 参数值的最小值，在configValueType为int时有效
     *
     * @param configValueMin
     */
    public void setConfigValueMin(Integer configValueMin) {
        this.configValueMin = configValueMin;
    }

    /**
     * get 参数值的最大值，在configValueType为int时有效
     *
     * @return
     */
    public Integer getConfigValueMax() {
        return configValueMax;
    }

    /**
     * set 参数值的最大值，在configValueType为int时有效
     *
     * @param configValueMax
     */
    public void setConfigValueMax(Integer configValueMax) {
        this.configValueMax = configValueMax;
    }

    /**
     * get 参数值的可选值，在configValueType为string或byteArray时有效
     *
     * @return
     */
    public List<String> getConfigValueOptional() {
        return configValueOptional;
    }

    /**
     * set 参数值的可选值，在configValueType为string或byteArray时有效
     *
     * @param configValueOptional
     */
    public void setConfigValueOptional(List<String> configValueOptional) {
        this.configValueOptional = configValueOptional;
    }

    /**
     * get configValueType为outputBuffer时的参数值规则
     *
     * @return
     */
    public String getConfigValueOutputBuffer() {
        return configValueOutputBuffer;
    }

    /**
     * set configValueType为outputBuffer时的参数值规则
     *
     * @param configValueOutputBuffer
     */
    public void setConfigValueOutputBuffer(String configValueOutputBuffer) {
        this.configValueOutputBuffer = configValueOutputBuffer;
    }


    /**
     * set configName目前只支持以下参数：
maxmemory-policy（redis 2.8和redis 4.0都支持，但配置值不相同）：内存剔除策略的最大使用内存限制
hash-max-ziplist-entries（redis 2.8和redis 4.0都支持）：用ziplist编码实现的哈希对象，ziplist中最多能存放entry个数的阈值
hash-max-ziplist-value（redis 2.8和redis 4.0都支持）：用ziplist编码实现的哈希对象，ziplist中能存放的value长度的最大值
list-max-ziplist-entries（只有redis 2.8支持）：用ziplist编码实现的列表对象，ziplist中最多能存放entry个数的阈值
list-max-ziplist-value（只有redis 2.8支持）：用ziplist编码实现的列表对象，ziplist中能存放的value长度的最大值
list-max-ziplist-size（只有redis 4.0支持）：用ziplist编码实现的列表对象，按照数据项个数或占用的字节数，限定ziplist的长度
list-compress-depth（只有redis 4.0支持）：用ziplist编码实现的列表对象，quicklist两端不被压缩的节点个数
set-max-intset-entries（redis 2.8和redis 4.0都支持）：用intset编码实现的集合对象，intset中最多能存放entry个数的阈值
zset-max-ziplist-entries（redis 2.8和redis 4.0都支持）：用ziplist编码实现的有序集合对象，ziplist中最多能存放entry个数的阈值
zset-max-ziplist-value（redis 2.8和redis 4.0都支持）：用ziplist编码实现的有序集合对象，ziplist中能存放的value长度的最大值
slowlog-log-slower-than（redis 2.8和redis 4.0都支持）：慢查询日志超时时间，单位微秒（1000000表示1秒），0表示记录所有的命令
notify-keyspace-events（只有redis 4.0支持）：事件通知

     *
     * @param configName
     */
    public ConfigItem configName(String configName) {
        this.configName = configName;
        return this;
    }

    /**
     * set 参数的配置值，默认值、参考值如下：
maxmemory-policy（redis 2.8和redis 4.0的默认值都为volatile-lru）：redis 4.0 的参考值有[volatile-lru, allkeys-lru, volatile-lfu, allkeys-lfu, volatile-random, allkeys-random, volatile-ttl, noeviction]，redis 2.8的参考值有[volatile-lru , allkeys-lru , volatile-random , allkeys-random , volatile-ttl , noeviction]
hash-max-ziplist-entries（redis 2.8和redis 4.0的默认值都为512）：[0-10000]
hash-max-ziplist-value（redis 2.8和redis 4.0的默认值都为64）：[0-10000]
list-max-ziplist-entries（redis 2.8的默认值为512，redis 4.0不支持）：[0-10000]
list-max-ziplist-value（redis 2.8的默认值为64，redis 4.0不支持）：[0-10000]
list-max-ziplist-size（redis 4.0的默认值为-2，redis 2.8不支持）：[-5-10000]
list-compress-depth（redis 4.0的默认值为0，redis 2.8不支持）：[0-10000]
set-max-intset-entries（redis 2.8和redis 4.0的默认值都为512）：[0-10000]
zset-max-ziplist-entries（redis 2.8和redis 4.0的默认值都为128）：[0-10000]
zset-max-ziplist-value（redis 2.8和redis 4.0的默认值都为64）：[0-10000]
slowlog-log-slower-than（redis 2.8和redis 4.0的默认值都为10000）：[0-10000]
notify-keyspace-events（redis 4.0的默认值为空，redis 2.8不支持）：[K , E , g , $ , l , s , h , z , x , e , A]字母的组合，区分大小写，或为空

     *
     * @param configValue
     */
    public ConfigItem configValue(String configValue) {
        this.configValue = configValue;
        return this;
    }

    /**
     * set 参数默认值
     *
     * @param configDefaultValue
     */
    public ConfigItem configDefaultValue(String configDefaultValue) {
        this.configDefaultValue = configDefaultValue;
        return this;
    }

    /**
     * set 参数值类型，目前有int、string、outputBuffer、byteArray这四种
     *
     * @param configValueType
     */
    public ConfigItem configValueType(String configValueType) {
        this.configValueType = configValueType;
        return this;
    }

    /**
     * set 参数值的最小值，在configValueType为int时有效
     *
     * @param configValueMin
     */
    public ConfigItem configValueMin(Integer configValueMin) {
        this.configValueMin = configValueMin;
        return this;
    }

    /**
     * set 参数值的最大值，在configValueType为int时有效
     *
     * @param configValueMax
     */
    public ConfigItem configValueMax(Integer configValueMax) {
        this.configValueMax = configValueMax;
        return this;
    }

    /**
     * set 参数值的可选值，在configValueType为string或byteArray时有效
     *
     * @param configValueOptional
     */
    public ConfigItem configValueOptional(List<String> configValueOptional) {
        this.configValueOptional = configValueOptional;
        return this;
    }

    /**
     * set configValueType为outputBuffer时的参数值规则
     *
     * @param configValueOutputBuffer
     */
    public ConfigItem configValueOutputBuffer(String configValueOutputBuffer) {
        this.configValueOutputBuffer = configValueOutputBuffer;
        return this;
    }


    /**
     * add item to 参数值的可选值，在configValueType为string或byteArray时有效
     *
     * @param configValueOptional
     */
    public void addConfigValueOptional(String configValueOptional) {
        if (this.configValueOptional == null) {
            this.configValueOptional = new ArrayList<>();
        }
        this.configValueOptional.add(configValueOptional);
    }

}