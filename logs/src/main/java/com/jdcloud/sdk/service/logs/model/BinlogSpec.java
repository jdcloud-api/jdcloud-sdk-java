/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * 
 *
 * 
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.logs.model;

import com.jdcloud.sdk.annotation.Required;

/**
 * binlogSpec
 */
public class BinlogSpec  implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 地址
     */
    private String addr;

    /**
     * 首次采集的Binlog文件名。不设置时，默认从当前时间点开始采集。
     */
    private String binlogFile;

    /**
     * 首次采集的Binlog文件的偏移量，不设置时，默认为0。
     */
    private Integer binlogPos;

    /**
     * 字符集
     */
    private String charset;

    /**
     * 是否记录DDL事件
     */
    private Boolean enableDDL;

    /**
     * 是否记录删除事件
     */
    private Boolean enableDelete;

    /**
     * 是否记录insert事件
     */
    private Boolean enableInsert;

    /**
     * 是否记录更新事件
     */
    private Boolean enableUpdate;

    /**
     * 忽略的表名称（包括db，例如：my_db.my_table），可配置为正则表达式。如果某个表符合ExcludeTables中的任一条件则该表不会被采集。不设置时默认收集所有表。
     */
    private String excludeTables;

    /**
     * mysql
     */
    private String flavor;

    /**
     * 保序
     */
    private Boolean inOrder;

    /**
     * 包含的表名称（包括db，例如：my_db.my_table），可配置为正则表达式。如果某个表不符合IncludeTables中的任一条件则该表不会被采集。如果您希望采集所有表，请将此参数设置为.*\\..*。
     * Required:true
     */
    @Required
    private String includeTables;

    /**
     * 密码
     */
    private String pass;

    /**
     * 端口
     */
    private Long port;

    /**
     * 是否开启高级配置--内部字段，供前端使用。
     */
    private Boolean professionalMode;

    /**
     * agent伪装成的Mysql Slave的ID。不配置时，默认为125。
     */
    private Integer serverID;

    /**
     * 是否将text类型的数据转换成字符串。不设置时，默认为false，表示不转换。
     */
    private Boolean textToString;

    /**
     * 用户名
     */
    private String user;



    /**
     * get 地址
     *
     * @return
     */
    public String getAddr() {
        return addr;
    }

    /**
     * set 地址
     *
     * @param addr
     */
    public void setAddr(String addr) {
        this.addr = addr;
    }


    /**
     * get 首次采集的Binlog文件名。不设置时，默认从当前时间点开始采集。
     *
     * @return
     */
    public String getBinlogFile() {
        return binlogFile;
    }

    /**
     * set 首次采集的Binlog文件名。不设置时，默认从当前时间点开始采集。
     *
     * @param binlogFile
     */
    public void setBinlogFile(String binlogFile) {
        this.binlogFile = binlogFile;
    }


    /**
     * get 首次采集的Binlog文件的偏移量，不设置时，默认为0。
     *
     * @return
     */
    public Integer getBinlogPos() {
        return binlogPos;
    }

    /**
     * set 首次采集的Binlog文件的偏移量，不设置时，默认为0。
     *
     * @param binlogPos
     */
    public void setBinlogPos(Integer binlogPos) {
        this.binlogPos = binlogPos;
    }


    /**
     * get 字符集
     *
     * @return
     */
    public String getCharset() {
        return charset;
    }

    /**
     * set 字符集
     *
     * @param charset
     */
    public void setCharset(String charset) {
        this.charset = charset;
    }


    /**
     * get 是否记录DDL事件
     *
     * @return
     */
    public Boolean getEnableDDL() {
        return enableDDL;
    }

    /**
     * set 是否记录DDL事件
     *
     * @param enableDDL
     */
    public void setEnableDDL(Boolean enableDDL) {
        this.enableDDL = enableDDL;
    }


    /**
     * get 是否记录删除事件
     *
     * @return
     */
    public Boolean getEnableDelete() {
        return enableDelete;
    }

    /**
     * set 是否记录删除事件
     *
     * @param enableDelete
     */
    public void setEnableDelete(Boolean enableDelete) {
        this.enableDelete = enableDelete;
    }


    /**
     * get 是否记录insert事件
     *
     * @return
     */
    public Boolean getEnableInsert() {
        return enableInsert;
    }

    /**
     * set 是否记录insert事件
     *
     * @param enableInsert
     */
    public void setEnableInsert(Boolean enableInsert) {
        this.enableInsert = enableInsert;
    }


    /**
     * get 是否记录更新事件
     *
     * @return
     */
    public Boolean getEnableUpdate() {
        return enableUpdate;
    }

    /**
     * set 是否记录更新事件
     *
     * @param enableUpdate
     */
    public void setEnableUpdate(Boolean enableUpdate) {
        this.enableUpdate = enableUpdate;
    }


    /**
     * get 忽略的表名称（包括db，例如：my_db.my_table），可配置为正则表达式。如果某个表符合ExcludeTables中的任一条件则该表不会被采集。不设置时默认收集所有表。
     *
     * @return
     */
    public String getExcludeTables() {
        return excludeTables;
    }

    /**
     * set 忽略的表名称（包括db，例如：my_db.my_table），可配置为正则表达式。如果某个表符合ExcludeTables中的任一条件则该表不会被采集。不设置时默认收集所有表。
     *
     * @param excludeTables
     */
    public void setExcludeTables(String excludeTables) {
        this.excludeTables = excludeTables;
    }


    /**
     * get mysql
     *
     * @return
     */
    public String getFlavor() {
        return flavor;
    }

    /**
     * set mysql
     *
     * @param flavor
     */
    public void setFlavor(String flavor) {
        this.flavor = flavor;
    }


    /**
     * get 保序
     *
     * @return
     */
    public Boolean getInOrder() {
        return inOrder;
    }

    /**
     * set 保序
     *
     * @param inOrder
     */
    public void setInOrder(Boolean inOrder) {
        this.inOrder = inOrder;
    }


    /**
     * get 包含的表名称（包括db，例如：my_db.my_table），可配置为正则表达式。如果某个表不符合IncludeTables中的任一条件则该表不会被采集。如果您希望采集所有表，请将此参数设置为.*\\..*。
     *
     * @return
     */
    public String getIncludeTables() {
        return includeTables;
    }

    /**
     * set 包含的表名称（包括db，例如：my_db.my_table），可配置为正则表达式。如果某个表不符合IncludeTables中的任一条件则该表不会被采集。如果您希望采集所有表，请将此参数设置为.*\\..*。
     *
     * @param includeTables
     */
    public void setIncludeTables(String includeTables) {
        this.includeTables = includeTables;
    }


    /**
     * get 密码
     *
     * @return
     */
    public String getPass() {
        return pass;
    }

    /**
     * set 密码
     *
     * @param pass
     */
    public void setPass(String pass) {
        this.pass = pass;
    }


    /**
     * get 端口
     *
     * @return
     */
    public Long getPort() {
        return port;
    }

    /**
     * set 端口
     *
     * @param port
     */
    public void setPort(Long port) {
        this.port = port;
    }


    /**
     * get 是否开启高级配置--内部字段，供前端使用。
     *
     * @return
     */
    public Boolean getProfessionalMode() {
        return professionalMode;
    }

    /**
     * set 是否开启高级配置--内部字段，供前端使用。
     *
     * @param professionalMode
     */
    public void setProfessionalMode(Boolean professionalMode) {
        this.professionalMode = professionalMode;
    }


    /**
     * get agent伪装成的Mysql Slave的ID。不配置时，默认为125。
     *
     * @return
     */
    public Integer getServerID() {
        return serverID;
    }

    /**
     * set agent伪装成的Mysql Slave的ID。不配置时，默认为125。
     *
     * @param serverID
     */
    public void setServerID(Integer serverID) {
        this.serverID = serverID;
    }


    /**
     * get 是否将text类型的数据转换成字符串。不设置时，默认为false，表示不转换。
     *
     * @return
     */
    public Boolean getTextToString() {
        return textToString;
    }

    /**
     * set 是否将text类型的数据转换成字符串。不设置时，默认为false，表示不转换。
     *
     * @param textToString
     */
    public void setTextToString(Boolean textToString) {
        this.textToString = textToString;
    }


    /**
     * get 用户名
     *
     * @return
     */
    public String getUser() {
        return user;
    }

    /**
     * set 用户名
     *
     * @param user
     */
    public void setUser(String user) {
        this.user = user;
    }



    /**
     * set 地址
     *
     * @param addr
     */
    public BinlogSpec addr(String addr) {
        this.addr = addr;
        return this;
    }


    /**
     * set 首次采集的Binlog文件名。不设置时，默认从当前时间点开始采集。
     *
     * @param binlogFile
     */
    public BinlogSpec binlogFile(String binlogFile) {
        this.binlogFile = binlogFile;
        return this;
    }


    /**
     * set 首次采集的Binlog文件的偏移量，不设置时，默认为0。
     *
     * @param binlogPos
     */
    public BinlogSpec binlogPos(Integer binlogPos) {
        this.binlogPos = binlogPos;
        return this;
    }


    /**
     * set 字符集
     *
     * @param charset
     */
    public BinlogSpec charset(String charset) {
        this.charset = charset;
        return this;
    }


    /**
     * set 是否记录DDL事件
     *
     * @param enableDDL
     */
    public BinlogSpec enableDDL(Boolean enableDDL) {
        this.enableDDL = enableDDL;
        return this;
    }


    /**
     * set 是否记录删除事件
     *
     * @param enableDelete
     */
    public BinlogSpec enableDelete(Boolean enableDelete) {
        this.enableDelete = enableDelete;
        return this;
    }


    /**
     * set 是否记录insert事件
     *
     * @param enableInsert
     */
    public BinlogSpec enableInsert(Boolean enableInsert) {
        this.enableInsert = enableInsert;
        return this;
    }


    /**
     * set 是否记录更新事件
     *
     * @param enableUpdate
     */
    public BinlogSpec enableUpdate(Boolean enableUpdate) {
        this.enableUpdate = enableUpdate;
        return this;
    }


    /**
     * set 忽略的表名称（包括db，例如：my_db.my_table），可配置为正则表达式。如果某个表符合ExcludeTables中的任一条件则该表不会被采集。不设置时默认收集所有表。
     *
     * @param excludeTables
     */
    public BinlogSpec excludeTables(String excludeTables) {
        this.excludeTables = excludeTables;
        return this;
    }


    /**
     * set mysql
     *
     * @param flavor
     */
    public BinlogSpec flavor(String flavor) {
        this.flavor = flavor;
        return this;
    }


    /**
     * set 保序
     *
     * @param inOrder
     */
    public BinlogSpec inOrder(Boolean inOrder) {
        this.inOrder = inOrder;
        return this;
    }


    /**
     * set 包含的表名称（包括db，例如：my_db.my_table），可配置为正则表达式。如果某个表不符合IncludeTables中的任一条件则该表不会被采集。如果您希望采集所有表，请将此参数设置为.*\\..*。
     *
     * @param includeTables
     */
    public BinlogSpec includeTables(String includeTables) {
        this.includeTables = includeTables;
        return this;
    }


    /**
     * set 密码
     *
     * @param pass
     */
    public BinlogSpec pass(String pass) {
        this.pass = pass;
        return this;
    }


    /**
     * set 端口
     *
     * @param port
     */
    public BinlogSpec port(Long port) {
        this.port = port;
        return this;
    }


    /**
     * set 是否开启高级配置--内部字段，供前端使用。
     *
     * @param professionalMode
     */
    public BinlogSpec professionalMode(Boolean professionalMode) {
        this.professionalMode = professionalMode;
        return this;
    }


    /**
     * set agent伪装成的Mysql Slave的ID。不配置时，默认为125。
     *
     * @param serverID
     */
    public BinlogSpec serverID(Integer serverID) {
        this.serverID = serverID;
        return this;
    }


    /**
     * set 是否将text类型的数据转换成字符串。不设置时，默认为false，表示不转换。
     *
     * @param textToString
     */
    public BinlogSpec textToString(Boolean textToString) {
        this.textToString = textToString;
        return this;
    }


    /**
     * set 用户名
     *
     * @param user
     */
    public BinlogSpec user(String user) {
        this.user = user;
        return this;
    }


}