/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Logtopic APIs
 * 日志服务日志主题相关的管理控制接口
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.logs.model;

import java.util.List;
import java.util.ArrayList;
import com.jdcloud.sdk.service.logs.model.Filter;
import com.jdcloud.sdk.service.logs.model.TagFilter;
import com.jdcloud.sdk.annotation.Required;
import com.jdcloud.sdk.service.JdcloudRequest;

/**
 * 查询日志主题列表，支持按照名称模糊查询。
 */
public class DescribeLogtopicsGlobalRequest extends JdcloudRequest implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 过滤条件，key，Values， 合法的key：logtopicName， logtopicUID， logsetName， logsetUID
     */
    
    private List<Filter> filters;
    /**
     * 过滤条件，key，Values
     */
    
    private List<TagFilter> tags;
    /**
     * 日志主题采集的日志类型
     */
    private String appName;

    /**
     * 地域 Id
     * Required:true
     */
    @Required
    private String regionId;



    /**
    * get 过滤条件，key，Values， 合法的key：logtopicName， logtopicUID， logsetName， logsetUID
    *
    * @return
    */
    public List<Filter> getFilters() {
        return filters;
    }

    /**
    * set 过滤条件，key，Values， 合法的key：logtopicName， logtopicUID， logsetName， logsetUID
    *
    * @param filters
    */
    public void setFilters(List<Filter> filters) {
        this.filters = filters;
    }


    /**
    * get 过滤条件，key，Values
    *
    * @return
    */
    public List<TagFilter> getTags() {
        return tags;
    }

    /**
    * set 过滤条件，key，Values
    *
    * @param tags
    */
    public void setTags(List<TagFilter> tags) {
        this.tags = tags;
    }


    /**
     * get 日志主题采集的日志类型
     *
     * @return
     */
    public String getAppName() {
        return appName;
    }

    /**
     * set 日志主题采集的日志类型
     *
     * @param appName
     */
    public void setAppName(String appName) {
        this.appName = appName;
    }


    /**
     * get 地域 Id
     *
     * @return
     */
    public String getRegionId() {
        return regionId;
    }

    /**
     * set 地域 Id
     *
     * @param regionId
     */
    public void setRegionId(String regionId) {
        this.regionId = regionId;
    }



    /**
    * set 过滤条件，key，Values， 合法的key：logtopicName， logtopicUID， logsetName， logsetUID
    *
    * @param filters
    */
    public DescribeLogtopicsGlobalRequest filters(List<Filter> filters) {
        this.filters = filters;
        return this;
    }


    /**
    * set 过滤条件，key，Values
    *
    * @param tags
    */
    public DescribeLogtopicsGlobalRequest tags(List<TagFilter> tags) {
        this.tags = tags;
        return this;
    }


    /**
     * set 日志主题采集的日志类型
     *
     * @param appName
     */
    public DescribeLogtopicsGlobalRequest appName(String appName) {
        this.appName = appName;
        return this;
    }


    /**
     * set 地域 Id
     *
     * @param regionId
     */
    public DescribeLogtopicsGlobalRequest regionId(String regionId) {
        this.regionId = regionId;
        return this;
    }



    /**
     * add item to 过滤条件，key，Values， 合法的key：logtopicName， logtopicUID， logsetName， logsetUID
     *
     * @param filter
     */
    public void addFilter(Filter filter) {
        if (this.filters == null) {
            this.filters = new ArrayList<>();
        }
        this.filters.add(filter);
    }

    /**
     * add item to 过滤条件，key，Values
     *
     * @param tag
     */
    public void addTag(TagFilter tag) {
        if (this.tags == null) {
            this.tags = new ArrayList<>();
        }
        this.tags.add(tag);
    }
}