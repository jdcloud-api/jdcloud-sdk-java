/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * 
 *
 * 
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.logs.model;

import java.util.List;
import java.util.ArrayList;
import com.jdcloud.sdk.annotation.Required;

/**
 * updateParserSpec
 */
public class UpdateParserSpec  implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 行级索引分词符。 Rune 数组
     */
    
    private List<String> indexToken;
    /**
     * parserFields
     * Required:true
     */
    @Required
    
    private List<ParserField> parserFields;
    /**
     * 解析类型。oneline - 单行，split - 分割， json - json， regexp - regexp
     * Required:true
     */
    @Required
    private String parserMode;

    /**
     * 解析语法
     */
    private String parserPattern;

    /**
     * 日志样例
     */
    private String parserSample;

    /**
     * 预处理任务列表。按照数组的顺序执行。
     */
    
    private List<PipelineSpec> pipelines;
    /**
     * 是否保留原始内容字段
     */
    private Boolean reserveOriginContent;



    /**
    * get 行级索引分词符。 Rune 数组
    *
    * @return
    */
    public List<String> getIndexToken() {
        return indexToken;
    }

    /**
    * set 行级索引分词符。 Rune 数组
    *
    * @param indexToken
    */
    public void setIndexToken(List<String> indexToken) {
        this.indexToken = indexToken;
    }


    /**
    * get parserFields
    *
    * @return
    */
    public List<ParserField> getParserFields() {
        return parserFields;
    }

    /**
    * set parserFields
    *
    * @param parserFields
    */
    public void setParserFields(List<ParserField> parserFields) {
        this.parserFields = parserFields;
    }


    /**
     * get 解析类型。oneline - 单行，split - 分割， json - json， regexp - regexp
     *
     * @return
     */
    public String getParserMode() {
        return parserMode;
    }

    /**
     * set 解析类型。oneline - 单行，split - 分割， json - json， regexp - regexp
     *
     * @param parserMode
     */
    public void setParserMode(String parserMode) {
        this.parserMode = parserMode;
    }


    /**
     * get 解析语法
     *
     * @return
     */
    public String getParserPattern() {
        return parserPattern;
    }

    /**
     * set 解析语法
     *
     * @param parserPattern
     */
    public void setParserPattern(String parserPattern) {
        this.parserPattern = parserPattern;
    }


    /**
     * get 日志样例
     *
     * @return
     */
    public String getParserSample() {
        return parserSample;
    }

    /**
     * set 日志样例
     *
     * @param parserSample
     */
    public void setParserSample(String parserSample) {
        this.parserSample = parserSample;
    }


    /**
    * get 预处理任务列表。按照数组的顺序执行。
    *
    * @return
    */
    public List<PipelineSpec> getPipelines() {
        return pipelines;
    }

    /**
    * set 预处理任务列表。按照数组的顺序执行。
    *
    * @param pipelines
    */
    public void setPipelines(List<PipelineSpec> pipelines) {
        this.pipelines = pipelines;
    }


    /**
     * get 是否保留原始内容字段
     *
     * @return
     */
    public Boolean getReserveOriginContent() {
        return reserveOriginContent;
    }

    /**
     * set 是否保留原始内容字段
     *
     * @param reserveOriginContent
     */
    public void setReserveOriginContent(Boolean reserveOriginContent) {
        this.reserveOriginContent = reserveOriginContent;
    }



    /**
    * set 行级索引分词符。 Rune 数组
    *
    * @param indexToken
    */
    public UpdateParserSpec indexToken(List<String> indexToken) {
        this.indexToken = indexToken;
        return this;
    }


    /**
    * set parserFields
    *
    * @param parserFields
    */
    public UpdateParserSpec parserFields(List<ParserField> parserFields) {
        this.parserFields = parserFields;
        return this;
    }


    /**
     * set 解析类型。oneline - 单行，split - 分割， json - json， regexp - regexp
     *
     * @param parserMode
     */
    public UpdateParserSpec parserMode(String parserMode) {
        this.parserMode = parserMode;
        return this;
    }


    /**
     * set 解析语法
     *
     * @param parserPattern
     */
    public UpdateParserSpec parserPattern(String parserPattern) {
        this.parserPattern = parserPattern;
        return this;
    }


    /**
     * set 日志样例
     *
     * @param parserSample
     */
    public UpdateParserSpec parserSample(String parserSample) {
        this.parserSample = parserSample;
        return this;
    }


    /**
    * set 预处理任务列表。按照数组的顺序执行。
    *
    * @param pipelines
    */
    public UpdateParserSpec pipelines(List<PipelineSpec> pipelines) {
        this.pipelines = pipelines;
        return this;
    }


    /**
     * set 是否保留原始内容字段
     *
     * @param reserveOriginContent
     */
    public UpdateParserSpec reserveOriginContent(Boolean reserveOriginContent) {
        this.reserveOriginContent = reserveOriginContent;
        return this;
    }



    /**
     * add item to 行级索引分词符。 Rune 数组
     *
     * @param indexToken
     */
    public void addIndexToken(String indexToken) {
        if (this.indexToken == null) {
            this.indexToken = new ArrayList<>();
        }
        this.indexToken.add(indexToken);
    }

    /**
     * add item to parserFields
     *
     * @param parserField
     */
    public void addParserField(ParserField parserField) {
        if (this.parserFields == null) {
            this.parserFields = new ArrayList<>();
        }
        this.parserFields.add(parserField);
    }

    /**
     * add item to 预处理任务列表。按照数组的顺序执行。
     *
     * @param pipeline
     */
    public void addPipeline(PipelineSpec pipeline) {
        if (this.pipelines == null) {
            this.pipelines = new ArrayList<>();
        }
        this.pipelines.add(pipeline);
    }
}