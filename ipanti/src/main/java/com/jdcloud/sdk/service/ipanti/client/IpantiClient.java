/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 京东云IP高防相关接口
 * 京东云IP高防相关接口
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.ipanti.client;

import com.jdcloud.sdk.JdcloudSdkException;
import com.jdcloud.sdk.auth.CredentialsProvider;
import com.jdcloud.sdk.client.Environment;
import com.jdcloud.sdk.client.Jdcloud;
import com.jdcloud.sdk.client.JdcloudClient;
import com.jdcloud.sdk.client.JdcloudValidateException;
import com.jdcloud.sdk.http.HttpRequestConfig;
import com.jdcloud.sdk.service.ipanti.model.DisableInstanceCCRequest;
import com.jdcloud.sdk.service.ipanti.model.DisableInstanceCCResponse;
import com.jdcloud.sdk.service.ipanti.client.DisableInstanceCCExecutor;
import com.jdcloud.sdk.service.ipanti.model.DescribeWebRuleRequest;
import com.jdcloud.sdk.service.ipanti.model.DescribeWebRuleResponse;
import com.jdcloud.sdk.service.ipanti.client.DescribeWebRuleExecutor;
import com.jdcloud.sdk.service.ipanti.model.SwitchForwardRuleProtectRequest;
import com.jdcloud.sdk.service.ipanti.model.SwitchForwardRuleProtectResponse;
import com.jdcloud.sdk.service.ipanti.client.SwitchForwardRuleProtectExecutor;
import com.jdcloud.sdk.service.ipanti.model.SwitchForwardRuleOriginRequest;
import com.jdcloud.sdk.service.ipanti.model.SwitchForwardRuleOriginResponse;
import com.jdcloud.sdk.service.ipanti.client.SwitchForwardRuleOriginExecutor;
import com.jdcloud.sdk.service.ipanti.model.CreateForwardRuleRequest;
import com.jdcloud.sdk.service.ipanti.model.CreateForwardRuleResponse;
import com.jdcloud.sdk.service.ipanti.client.CreateForwardRuleExecutor;
import com.jdcloud.sdk.service.ipanti.model.ModifyInstanceNameRequest;
import com.jdcloud.sdk.service.ipanti.model.ModifyInstanceNameResponse;
import com.jdcloud.sdk.service.ipanti.client.ModifyInstanceNameExecutor;
import com.jdcloud.sdk.service.ipanti.model.EnableInstanceUrlWhiteListRequest;
import com.jdcloud.sdk.service.ipanti.model.EnableInstanceUrlWhiteListResponse;
import com.jdcloud.sdk.service.ipanti.client.EnableInstanceUrlWhiteListExecutor;
import com.jdcloud.sdk.service.ipanti.model.DisableCcObserverModeRequest;
import com.jdcloud.sdk.service.ipanti.model.DisableCcObserverModeResponse;
import com.jdcloud.sdk.service.ipanti.client.DisableCcObserverModeExecutor;
import com.jdcloud.sdk.service.ipanti.model.EnableCcObserverModeRequest;
import com.jdcloud.sdk.service.ipanti.model.EnableCcObserverModeResponse;
import com.jdcloud.sdk.service.ipanti.client.EnableCcObserverModeExecutor;
import com.jdcloud.sdk.service.ipanti.model.DisableInstanceIpWhiteListRequest;
import com.jdcloud.sdk.service.ipanti.model.DisableInstanceIpWhiteListResponse;
import com.jdcloud.sdk.service.ipanti.client.DisableInstanceIpWhiteListExecutor;
import com.jdcloud.sdk.service.ipanti.model.DescribeInstanceRequest;
import com.jdcloud.sdk.service.ipanti.model.DescribeInstanceResponse;
import com.jdcloud.sdk.service.ipanti.client.DescribeInstanceExecutor;
import com.jdcloud.sdk.service.ipanti.model.DescribeForwardRulesRequest;
import com.jdcloud.sdk.service.ipanti.model.DescribeForwardRulesResponse;
import com.jdcloud.sdk.service.ipanti.client.DescribeForwardRulesExecutor;
import com.jdcloud.sdk.service.ipanti.model.DdosGraphRequest;
import com.jdcloud.sdk.service.ipanti.model.DdosGraphResponse;
import com.jdcloud.sdk.service.ipanti.client.DdosGraphExecutor;
import com.jdcloud.sdk.service.ipanti.model.ModifyInstanceCCRequest;
import com.jdcloud.sdk.service.ipanti.model.ModifyInstanceCCResponse;
import com.jdcloud.sdk.service.ipanti.client.ModifyInstanceCCExecutor;
import com.jdcloud.sdk.service.ipanti.model.DescribeWebRulesRequest;
import com.jdcloud.sdk.service.ipanti.model.DescribeWebRulesResponse;
import com.jdcloud.sdk.service.ipanti.client.DescribeWebRulesExecutor;
import com.jdcloud.sdk.service.ipanti.model.EnableInstanceCCRequest;
import com.jdcloud.sdk.service.ipanti.model.EnableInstanceCCResponse;
import com.jdcloud.sdk.service.ipanti.client.EnableInstanceCCExecutor;
import com.jdcloud.sdk.service.ipanti.model.DisableInstanceIpBlackListRequest;
import com.jdcloud.sdk.service.ipanti.model.DisableInstanceIpBlackListResponse;
import com.jdcloud.sdk.service.ipanti.client.DisableInstanceIpBlackListExecutor;
import com.jdcloud.sdk.service.ipanti.model.ModifyForwardRuleRequest;
import com.jdcloud.sdk.service.ipanti.model.ModifyForwardRuleResponse;
import com.jdcloud.sdk.service.ipanti.client.ModifyForwardRuleExecutor;
import com.jdcloud.sdk.service.ipanti.model.DisableCcIpLimitRequest;
import com.jdcloud.sdk.service.ipanti.model.DisableCcIpLimitResponse;
import com.jdcloud.sdk.service.ipanti.client.DisableCcIpLimitExecutor;
import com.jdcloud.sdk.service.ipanti.model.EnableWebRuleCCRequest;
import com.jdcloud.sdk.service.ipanti.model.EnableWebRuleCCResponse;
import com.jdcloud.sdk.service.ipanti.client.EnableWebRuleCCExecutor;
import com.jdcloud.sdk.service.ipanti.model.DeleteWebRuleRequest;
import com.jdcloud.sdk.service.ipanti.model.DeleteWebRuleResponse;
import com.jdcloud.sdk.service.ipanti.client.DeleteWebRuleExecutor;
import com.jdcloud.sdk.service.ipanti.model.CreateInstanceRequest;
import com.jdcloud.sdk.service.ipanti.model.CreateInstanceResponse;
import com.jdcloud.sdk.service.ipanti.client.CreateInstanceExecutor;
import com.jdcloud.sdk.service.ipanti.model.ModifyInstanceUrlWhiteListRequest;
import com.jdcloud.sdk.service.ipanti.model.ModifyInstanceUrlWhiteListResponse;
import com.jdcloud.sdk.service.ipanti.client.ModifyInstanceUrlWhiteListExecutor;
import com.jdcloud.sdk.service.ipanti.model.CreateWebRuleRequest;
import com.jdcloud.sdk.service.ipanti.model.CreateWebRuleResponse;
import com.jdcloud.sdk.service.ipanti.client.CreateWebRuleExecutor;
import com.jdcloud.sdk.service.ipanti.model.SwitchWebRuleProtectRequest;
import com.jdcloud.sdk.service.ipanti.model.SwitchWebRuleProtectResponse;
import com.jdcloud.sdk.service.ipanti.client.SwitchWebRuleProtectExecutor;
import com.jdcloud.sdk.service.ipanti.model.DescribeForwardRuleRequest;
import com.jdcloud.sdk.service.ipanti.model.DescribeForwardRuleResponse;
import com.jdcloud.sdk.service.ipanti.client.DescribeForwardRuleExecutor;
import com.jdcloud.sdk.service.ipanti.model.SwitchWebRuleOriginRequest;
import com.jdcloud.sdk.service.ipanti.model.SwitchWebRuleOriginResponse;
import com.jdcloud.sdk.service.ipanti.client.SwitchWebRuleOriginExecutor;
import com.jdcloud.sdk.service.ipanti.model.FwdGraphRequest;
import com.jdcloud.sdk.service.ipanti.model.FwdGraphResponse;
import com.jdcloud.sdk.service.ipanti.client.FwdGraphExecutor;
import com.jdcloud.sdk.service.ipanti.model.ModifyInstanceIpWhiteListRequest;
import com.jdcloud.sdk.service.ipanti.model.ModifyInstanceIpWhiteListResponse;
import com.jdcloud.sdk.service.ipanti.client.ModifyInstanceIpWhiteListExecutor;
import com.jdcloud.sdk.service.ipanti.model.DescribeDDosAttackLogsRequest;
import com.jdcloud.sdk.service.ipanti.model.DescribeDDosAttackLogsResponse;
import com.jdcloud.sdk.service.ipanti.client.DescribeDDosAttackLogsExecutor;
import com.jdcloud.sdk.service.ipanti.model.ModifyInstanceIpBlackListRequest;
import com.jdcloud.sdk.service.ipanti.model.ModifyInstanceIpBlackListResponse;
import com.jdcloud.sdk.service.ipanti.client.ModifyInstanceIpBlackListExecutor;
import com.jdcloud.sdk.service.ipanti.model.DisableWebRuleCCRequest;
import com.jdcloud.sdk.service.ipanti.model.DisableWebRuleCCResponse;
import com.jdcloud.sdk.service.ipanti.client.DisableWebRuleCCExecutor;
import com.jdcloud.sdk.service.ipanti.model.DisableInstanceUrlWhiteListRequest;
import com.jdcloud.sdk.service.ipanti.model.DisableInstanceUrlWhiteListResponse;
import com.jdcloud.sdk.service.ipanti.client.DisableInstanceUrlWhiteListExecutor;
import com.jdcloud.sdk.service.ipanti.model.EnableInstanceIpWhiteListRequest;
import com.jdcloud.sdk.service.ipanti.model.EnableInstanceIpWhiteListResponse;
import com.jdcloud.sdk.service.ipanti.client.EnableInstanceIpWhiteListExecutor;
import com.jdcloud.sdk.service.ipanti.model.CcGraphRequest;
import com.jdcloud.sdk.service.ipanti.model.CcGraphResponse;
import com.jdcloud.sdk.service.ipanti.client.CcGraphExecutor;
import com.jdcloud.sdk.service.ipanti.model.DeleteForwardRuleRequest;
import com.jdcloud.sdk.service.ipanti.model.DeleteForwardRuleResponse;
import com.jdcloud.sdk.service.ipanti.client.DeleteForwardRuleExecutor;
import com.jdcloud.sdk.service.ipanti.model.ModifyWebRuleRequest;
import com.jdcloud.sdk.service.ipanti.model.ModifyWebRuleResponse;
import com.jdcloud.sdk.service.ipanti.client.ModifyWebRuleExecutor;
import com.jdcloud.sdk.service.ipanti.model.SetCcIpLimitRequest;
import com.jdcloud.sdk.service.ipanti.model.SetCcIpLimitResponse;
import com.jdcloud.sdk.service.ipanti.client.SetCcIpLimitExecutor;
import com.jdcloud.sdk.service.ipanti.model.DescribeCcAttackLogsRequest;
import com.jdcloud.sdk.service.ipanti.model.DescribeCcAttackLogsResponse;
import com.jdcloud.sdk.service.ipanti.client.DescribeCcAttackLogsExecutor;
import com.jdcloud.sdk.service.ipanti.model.EnableInstanceIpBlackListRequest;
import com.jdcloud.sdk.service.ipanti.model.EnableInstanceIpBlackListResponse;
import com.jdcloud.sdk.service.ipanti.client.EnableInstanceIpBlackListExecutor;
import com.jdcloud.sdk.service.ipanti.model.DescribeInstancesRequest;
import com.jdcloud.sdk.service.ipanti.model.DescribeInstancesResponse;
import com.jdcloud.sdk.service.ipanti.client.DescribeInstancesExecutor;
import com.jdcloud.sdk.service.ipanti.model.DescribeCcAttackLogDetailsRequest;
import com.jdcloud.sdk.service.ipanti.model.DescribeCcAttackLogDetailsResponse;
import com.jdcloud.sdk.service.ipanti.client.DescribeCcAttackLogDetailsExecutor;
import com.jdcloud.sdk.service.ipanti.model.EnableCcIpLimitRequest;
import com.jdcloud.sdk.service.ipanti.model.EnableCcIpLimitResponse;
import com.jdcloud.sdk.service.ipanti.client.EnableCcIpLimitExecutor;

/**
 * ipantiClient
 */
public class IpantiClient extends JdcloudClient {

    public final static String ApiVersion = "v1";
    private final static String UserAgentPrefix = "JdcloudSdkJava";
    public final static String ClientVersion = "1.0.1";
    public final static String DefaultEndpoint = "ipanti.jdcloud-api.com";
    public final static String ServiceName = "ipanti";
    public final static String UserAgent = UserAgentPrefix + "/" + ClientVersion + " " + ServiceName + "/" + ApiVersion;

    CredentialsProvider credentialsProvider;
    HttpRequestConfig httpRequestConfig;
    Environment environment = new Environment.Builder().endpoint(DefaultEndpoint).build();

    public CredentialsProvider getCredentialsProvider() {
        return credentialsProvider;
    }

    public HttpRequestConfig getHttpRequestConfig() {
        return httpRequestConfig;
    }

    public Environment getEnvironment() {
        return environment;
    }

    public String getUserAgent() {
        return UserAgent;
    }

    public String getServiceName() {
        return ServiceName;
    }

    public String getVersion() {
        return ApiVersion;
    }

    private IpantiClient() {

    }

    public static Builder builder() {
        return new DefaultBuilder();
    }


    /**
     * 关闭实例CC防护
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DisableInstanceCCResponse disableInstanceCC(DisableInstanceCCRequest request) throws JdcloudSdkException {
        return new DisableInstanceCCExecutor().client(this).execute(request);
    }

    /**
     * 查询某条网站类规则
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeWebRuleResponse describeWebRule(DescribeWebRuleRequest request) throws JdcloudSdkException {
        return new DescribeWebRuleExecutor().client(this).execute(request);
    }

    /**
     * 非网站类规则切换成防御状态
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public SwitchForwardRuleProtectResponse switchForwardRuleProtect(SwitchForwardRuleProtectRequest request) throws JdcloudSdkException {
        return new SwitchForwardRuleProtectExecutor().client(this).execute(request);
    }

    /**
     * 非网站类规则切换成回源状态
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public SwitchForwardRuleOriginResponse switchForwardRuleOrigin(SwitchForwardRuleOriginRequest request) throws JdcloudSdkException {
        return new SwitchForwardRuleOriginExecutor().client(this).execute(request);
    }

    /**
     * 添加非网站类规则
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreateForwardRuleResponse createForwardRule(CreateForwardRuleRequest request) throws JdcloudSdkException {
        return new CreateForwardRuleExecutor().client(this).execute(request);
    }

    /**
     * 修改实例名称
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ModifyInstanceNameResponse modifyInstanceName(ModifyInstanceNameRequest request) throws JdcloudSdkException {
        return new ModifyInstanceNameExecutor().client(this).execute(request);
    }

    /**
     * 启用实例url白名单
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public EnableInstanceUrlWhiteListResponse enableInstanceUrlWhiteList(EnableInstanceUrlWhiteListRequest request) throws JdcloudSdkException {
        return new EnableInstanceUrlWhiteListExecutor().client(this).execute(request);
    }

    /**
     * 关闭实例CC防护的观察者模式
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DisableCcObserverModeResponse disableCcObserverMode(DisableCcObserverModeRequest request) throws JdcloudSdkException {
        return new DisableCcObserverModeExecutor().client(this).execute(request);
    }

    /**
     * 开启实例CC防护的观察者模式
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public EnableCcObserverModeResponse enableCcObserverMode(EnableCcObserverModeRequest request) throws JdcloudSdkException {
        return new EnableCcObserverModeExecutor().client(this).execute(request);
    }

    /**
     * 禁用实例ip白名单
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DisableInstanceIpWhiteListResponse disableInstanceIpWhiteList(DisableInstanceIpWhiteListRequest request) throws JdcloudSdkException {
        return new DisableInstanceIpWhiteListExecutor().client(this).execute(request);
    }

    /**
     * 查询实例
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeInstanceResponse describeInstance(DescribeInstanceRequest request) throws JdcloudSdkException {
        return new DescribeInstanceExecutor().client(this).execute(request);
    }

    /**
     * 查询某个实例下的非网站转发配置
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeForwardRulesResponse describeForwardRules(DescribeForwardRulesRequest request) throws JdcloudSdkException {
        return new DescribeForwardRulesExecutor().client(this).execute(request);
    }

    /**
     * ddos防护报表
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DdosGraphResponse ddosGraph(DdosGraphRequest request) throws JdcloudSdkException {
        return new DdosGraphExecutor().client(this).execute(request);
    }

    /**
     * 设置实例CC防护
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ModifyInstanceCCResponse modifyInstanceCC(ModifyInstanceCCRequest request) throws JdcloudSdkException {
        return new ModifyInstanceCCExecutor().client(this).execute(request);
    }

    /**
     * 查询某个实例下的网站类规则
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeWebRulesResponse describeWebRules(DescribeWebRulesRequest request) throws JdcloudSdkException {
        return new DescribeWebRulesExecutor().client(this).execute(request);
    }

    /**
     * 开启实例CC防护
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public EnableInstanceCCResponse enableInstanceCC(EnableInstanceCCRequest request) throws JdcloudSdkException {
        return new EnableInstanceCCExecutor().client(this).execute(request);
    }

    /**
     * 禁用实例ip黑名单
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DisableInstanceIpBlackListResponse disableInstanceIpBlackList(DisableInstanceIpBlackListRequest request) throws JdcloudSdkException {
        return new DisableInstanceIpBlackListExecutor().client(this).execute(request);
    }

    /**
     * 更新某条非网站类规则
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ModifyForwardRuleResponse modifyForwardRule(ModifyForwardRuleRequest request) throws JdcloudSdkException {
        return new ModifyForwardRuleExecutor().client(this).execute(request);
    }

    /**
     * 关闭CC防护每ip的限速
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DisableCcIpLimitResponse disableCcIpLimit(DisableCcIpLimitRequest request) throws JdcloudSdkException {
        return new DisableCcIpLimitExecutor().client(this).execute(request);
    }

    /**
     * 网站类规则开启CC
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public EnableWebRuleCCResponse enableWebRuleCC(EnableWebRuleCCRequest request) throws JdcloudSdkException {
        return new EnableWebRuleCCExecutor().client(this).execute(request);
    }

    /**
     * 删除某条网站规则
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteWebRuleResponse deleteWebRule(DeleteWebRuleRequest request) throws JdcloudSdkException {
        return new DeleteWebRuleExecutor().client(this).execute(request);
    }

    /**
     * 创建实例
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreateInstanceResponse createInstance(CreateInstanceRequest request) throws JdcloudSdkException {
        return new CreateInstanceExecutor().client(this).execute(request);
    }

    /**
     * 设置实例url白名单
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ModifyInstanceUrlWhiteListResponse modifyInstanceUrlWhiteList(ModifyInstanceUrlWhiteListRequest request) throws JdcloudSdkException {
        return new ModifyInstanceUrlWhiteListExecutor().client(this).execute(request);
    }

    /**
     * 添加网站类规则
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreateWebRuleResponse createWebRule(CreateWebRuleRequest request) throws JdcloudSdkException {
        return new CreateWebRuleExecutor().client(this).execute(request);
    }

    /**
     * 网站类规则切换成防御状态
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public SwitchWebRuleProtectResponse switchWebRuleProtect(SwitchWebRuleProtectRequest request) throws JdcloudSdkException {
        return new SwitchWebRuleProtectExecutor().client(this).execute(request);
    }

    /**
     * 查询某条非网站类规则
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeForwardRuleResponse describeForwardRule(DescribeForwardRuleRequest request) throws JdcloudSdkException {
        return new DescribeForwardRuleExecutor().client(this).execute(request);
    }

    /**
     * 网站类规则切换成回源状态
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public SwitchWebRuleOriginResponse switchWebRuleOrigin(SwitchWebRuleOriginRequest request) throws JdcloudSdkException {
        return new SwitchWebRuleOriginExecutor().client(this).execute(request);
    }

    /**
     * 转发流量报表
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public FwdGraphResponse fwdGraph(FwdGraphRequest request) throws JdcloudSdkException {
        return new FwdGraphExecutor().client(this).execute(request);
    }

    /**
     * 设置实例ip白名单
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ModifyInstanceIpWhiteListResponse modifyInstanceIpWhiteList(ModifyInstanceIpWhiteListRequest request) throws JdcloudSdkException {
        return new ModifyInstanceIpWhiteListExecutor().client(this).execute(request);
    }

    /**
     * 查询DDos攻击日志
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeDDosAttackLogsResponse describeDDosAttackLogs(DescribeDDosAttackLogsRequest request) throws JdcloudSdkException {
        return new DescribeDDosAttackLogsExecutor().client(this).execute(request);
    }

    /**
     * 设置实例ip黑名单
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ModifyInstanceIpBlackListResponse modifyInstanceIpBlackList(ModifyInstanceIpBlackListRequest request) throws JdcloudSdkException {
        return new ModifyInstanceIpBlackListExecutor().client(this).execute(request);
    }

    /**
     * 网站类规则禁用CC
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DisableWebRuleCCResponse disableWebRuleCC(DisableWebRuleCCRequest request) throws JdcloudSdkException {
        return new DisableWebRuleCCExecutor().client(this).execute(request);
    }

    /**
     * 禁用实例url白名单
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DisableInstanceUrlWhiteListResponse disableInstanceUrlWhiteList(DisableInstanceUrlWhiteListRequest request) throws JdcloudSdkException {
        return new DisableInstanceUrlWhiteListExecutor().client(this).execute(request);
    }

    /**
     * 启用实例ip白名单
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public EnableInstanceIpWhiteListResponse enableInstanceIpWhiteList(EnableInstanceIpWhiteListRequest request) throws JdcloudSdkException {
        return new EnableInstanceIpWhiteListExecutor().client(this).execute(request);
    }

    /**
     * 转发流量报表
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CcGraphResponse ccGraph(CcGraphRequest request) throws JdcloudSdkException {
        return new CcGraphExecutor().client(this).execute(request);
    }

    /**
     * 删除某条非网站规则
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteForwardRuleResponse deleteForwardRule(DeleteForwardRuleRequest request) throws JdcloudSdkException {
        return new DeleteForwardRuleExecutor().client(this).execute(request);
    }

    /**
     * 更新某条网站类规则
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ModifyWebRuleResponse modifyWebRule(ModifyWebRuleRequest request) throws JdcloudSdkException {
        return new ModifyWebRuleExecutor().client(this).execute(request);
    }

    /**
     * 设置实例CC防护每ip限速
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public SetCcIpLimitResponse setCcIpLimit(SetCcIpLimitRequest request) throws JdcloudSdkException {
        return new SetCcIpLimitExecutor().client(this).execute(request);
    }

    /**
     * 查询cc攻击日志
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeCcAttackLogsResponse describeCcAttackLogs(DescribeCcAttackLogsRequest request) throws JdcloudSdkException {
        return new DescribeCcAttackLogsExecutor().client(this).execute(request);
    }

    /**
     * 启用实例ip黑名单
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public EnableInstanceIpBlackListResponse enableInstanceIpBlackList(EnableInstanceIpBlackListRequest request) throws JdcloudSdkException {
        return new EnableInstanceIpBlackListExecutor().client(this).execute(request);
    }

    /**
     * 查询实例列表
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeInstancesResponse describeInstances(DescribeInstancesRequest request) throws JdcloudSdkException {
        return new DescribeInstancesExecutor().client(this).execute(request);
    }

    /**
     * 查询cc攻击日志详情
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeCcAttackLogDetailsResponse describeCcAttackLogDetails(DescribeCcAttackLogDetailsRequest request) throws JdcloudSdkException {
        return new DescribeCcAttackLogDetailsExecutor().client(this).execute(request);
    }

    /**
     * 开启CC防护每ip的限速
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public EnableCcIpLimitResponse enableCcIpLimit(EnableCcIpLimitRequest request) throws JdcloudSdkException {
        return new EnableCcIpLimitExecutor().client(this).execute(request);
    }


    public interface Builder {
        public Builder credentialsProvider(CredentialsProvider provider);
        public Builder environment(Environment environment);
        public Builder httpRequestConfig(HttpRequestConfig config);
        public IpantiClient build() throws JdcloudSdkException;
    }

    private static class DefaultBuilder implements Builder {

        private IpantiClient ipantiClient;

        public DefaultBuilder() {
            ipantiClient = new IpantiClient();
        }

        public DefaultBuilder credentialsProvider(CredentialsProvider provider) {
            ipantiClient.credentialsProvider = provider;
            return this;
        }

        public DefaultBuilder httpRequestConfig(HttpRequestConfig config) {
            ipantiClient.httpRequestConfig = config;
            return this;
        }

        public IpantiClient build() throws JdcloudSdkException {

            if (ipantiClient.credentialsProvider == null) {
                //if credentialsProvider not set, try load jdcloud global default  credentials provider
                ipantiClient.credentialsProvider = Jdcloud.defaultInstance().getCredentialsProvider();
                if (ipantiClient.credentialsProvider == null) {
                    throw new JdcloudValidateException("IpantiClient build error: jdcloud credentials provider not set");
                }
            }
            if (ipantiClient.httpRequestConfig == null) {
                ipantiClient.httpRequestConfig = Jdcloud.defaultInstance().getHttpRequestConfig();
                if (ipantiClient.httpRequestConfig == null) {
                    throw new JdcloudValidateException("IpantiClient build error: http request config not set");
                }
            }
            return ipantiClient;
        }

        public Builder environment(Environment environment) {
            ipantiClient.environment = environment;
            return this;
        }
    }
}
