/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * 
 *
 * 
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.ipanti.model;

import java.util.List;
import java.util.ArrayList;
import com.jdcloud.sdk.annotation.Required;

/**
 * webRuleSpec
 */
public class WebRuleSpec  implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 高防 IP, serviceIps 为空时生效
     */
    private String serviceIp;

    /**
     * 高防 IP 列表, 不为空时忽略 serviceIp, 传多个时后台会在高防IP封禁后随机切换其他未封禁的IP
     */
    private List<String> serviceIps;

    /**
     * 子域名
     * Required:true
     */
    @Required
    private String domain;

    /**
     * 协议: http, https 至少一个为 true
     * Required:true
     */
    @Required
    private WebRuleProtocol protocol;

    /**
     * HTTP 协议的端口号, 如80, 81; 如果 protocol.http 为 true, 至少配置一个端口
     */
    private List<Integer> port;

    /**
     * HTTPS 协议的端口号, 如443, 8443; 如果 protocol.https 为 true, 至少配置一个端口
     */
    private List<Integer> httpsPort;

    /**
     * 回源类型：A 或者 CNAME
     * Required:true
     */
    @Required
    private String originType;

    /**
     * originType 为 A 时, 需要设置该字段
     */
    private List<OriginAddrItem> originAddr;

    /**
     * 备用的回源地址列表, 可以配置为一个域名或者多个 ip 地址
     */
    private List<String> onlineAddr;

    /**
     * 回源域名, originType 为 CNAME 时需要指定该字段
     */
    private String originDomain;

    /**
     * 转发规则. &lt;br&gt;- wrr: 带权重的轮询&lt;br&gt;- rr:  不带权重的轮询&lt;br&gt;- sh:  源地址hash
     * Required:true
     */
    @Required
    private String algorithm;

    /**
     * 是否开启 HTTPS 强制跳转, protocol.http 和 protocol.https 都为 true 时此参数生效. &lt;br&gt;- 0: 不开启强制跳转. &lt;br&gt;- 1: 开启强制跳转
     */
    private Integer forceJump;

    /**
     * 是否为自定义端口号. 0: 默认&lt;br&gt;- 1: 自定义
     */
    private Integer customPortStatus;

    /**
     * 是否开启 HTTP 回源, protocol.https 为 true 时此参数生效. &lt;br&gt;- 0: 不开启. &lt;br&gt;- 1: 开启
     */
    private Integer httpOrigin;

    /**
     * 是否开启 WebSocket.&lt;br&gt;- 0: 不开启&lt;br&gt;- 1: 开启
     * Required:true
     */
    @Required
    private Integer webSocketStatus;

    /**
     * 按区域分流回源配置
     */
    private List<GeoRsRoute> geoRsRoute;

    /**
     * 是否开启回源长连接, protocol 选项开启 https 时生效, 可取值&lt;br&gt;- on: 开启&lt;br&gt;- off: 关闭
     */
    private String enableKeepalive;

    /**
     * http 版本, protocol 选项开启 https 时生效, 可取值 http1 或 http2
     */
    private String httpVersion;

    /**
     * SSL协议类型, protocol 选项开启 https 时生效, 可取值SSLv2,SSLv3,TLSv1.0,TLSv1.1,TLSv1.2
     */
    private List<String> sslProtocols;

    /**
     * 加密套件等级, protocol 选项开启 https 时生效, 可取值&lt;br&gt;- low: 低级&lt;br&gt;- middle: 中级&lt;br&gt;- high：高级&lt;br&gt;- custom：自定义
     */
    private String suiteLevel;

    /**
     * 自定义加密套件等级, suiteLevel 为 custom 是有效
     */
    private List<String> userSuiteLevel;

    /**
     * 健康检查开关, 0: 关闭, 1: 开启
     */
    private Integer enableHealthCheck;

    /**
     * 回源连接超时时长, 单位 秒
     */
    private Integer proxyConnectTimeout;

    /**
     * 请求头支持下划线, 0: 关闭, 1: 开启
     */
    private Integer enableUnderscores;


    /**
     * get 高防 IP, serviceIps 为空时生效
     *
     * @return
     */
    public String getServiceIp() {
        return serviceIp;
    }

    /**
     * set 高防 IP, serviceIps 为空时生效
     *
     * @param serviceIp
     */
    public void setServiceIp(String serviceIp) {
        this.serviceIp = serviceIp;
    }

    /**
     * get 高防 IP 列表, 不为空时忽略 serviceIp, 传多个时后台会在高防IP封禁后随机切换其他未封禁的IP
     *
     * @return
     */
    public List<String> getServiceIps() {
        return serviceIps;
    }

    /**
     * set 高防 IP 列表, 不为空时忽略 serviceIp, 传多个时后台会在高防IP封禁后随机切换其他未封禁的IP
     *
     * @param serviceIps
     */
    public void setServiceIps(List<String> serviceIps) {
        this.serviceIps = serviceIps;
    }

    /**
     * get 子域名
     *
     * @return
     */
    public String getDomain() {
        return domain;
    }

    /**
     * set 子域名
     *
     * @param domain
     */
    public void setDomain(String domain) {
        this.domain = domain;
    }

    /**
     * get 协议: http, https 至少一个为 true
     *
     * @return
     */
    public WebRuleProtocol getProtocol() {
        return protocol;
    }

    /**
     * set 协议: http, https 至少一个为 true
     *
     * @param protocol
     */
    public void setProtocol(WebRuleProtocol protocol) {
        this.protocol = protocol;
    }

    /**
     * get HTTP 协议的端口号, 如80, 81; 如果 protocol.http 为 true, 至少配置一个端口
     *
     * @return
     */
    public List<Integer> getPort() {
        return port;
    }

    /**
     * set HTTP 协议的端口号, 如80, 81; 如果 protocol.http 为 true, 至少配置一个端口
     *
     * @param port
     */
    public void setPort(List<Integer> port) {
        this.port = port;
    }

    /**
     * get HTTPS 协议的端口号, 如443, 8443; 如果 protocol.https 为 true, 至少配置一个端口
     *
     * @return
     */
    public List<Integer> getHttpsPort() {
        return httpsPort;
    }

    /**
     * set HTTPS 协议的端口号, 如443, 8443; 如果 protocol.https 为 true, 至少配置一个端口
     *
     * @param httpsPort
     */
    public void setHttpsPort(List<Integer> httpsPort) {
        this.httpsPort = httpsPort;
    }

    /**
     * get 回源类型：A 或者 CNAME
     *
     * @return
     */
    public String getOriginType() {
        return originType;
    }

    /**
     * set 回源类型：A 或者 CNAME
     *
     * @param originType
     */
    public void setOriginType(String originType) {
        this.originType = originType;
    }

    /**
     * get originType 为 A 时, 需要设置该字段
     *
     * @return
     */
    public List<OriginAddrItem> getOriginAddr() {
        return originAddr;
    }

    /**
     * set originType 为 A 时, 需要设置该字段
     *
     * @param originAddr
     */
    public void setOriginAddr(List<OriginAddrItem> originAddr) {
        this.originAddr = originAddr;
    }

    /**
     * get 备用的回源地址列表, 可以配置为一个域名或者多个 ip 地址
     *
     * @return
     */
    public List<String> getOnlineAddr() {
        return onlineAddr;
    }

    /**
     * set 备用的回源地址列表, 可以配置为一个域名或者多个 ip 地址
     *
     * @param onlineAddr
     */
    public void setOnlineAddr(List<String> onlineAddr) {
        this.onlineAddr = onlineAddr;
    }

    /**
     * get 回源域名, originType 为 CNAME 时需要指定该字段
     *
     * @return
     */
    public String getOriginDomain() {
        return originDomain;
    }

    /**
     * set 回源域名, originType 为 CNAME 时需要指定该字段
     *
     * @param originDomain
     */
    public void setOriginDomain(String originDomain) {
        this.originDomain = originDomain;
    }

    /**
     * get 转发规则. &lt;br&gt;- wrr: 带权重的轮询&lt;br&gt;- rr:  不带权重的轮询&lt;br&gt;- sh:  源地址hash
     *
     * @return
     */
    public String getAlgorithm() {
        return algorithm;
    }

    /**
     * set 转发规则. &lt;br&gt;- wrr: 带权重的轮询&lt;br&gt;- rr:  不带权重的轮询&lt;br&gt;- sh:  源地址hash
     *
     * @param algorithm
     */
    public void setAlgorithm(String algorithm) {
        this.algorithm = algorithm;
    }

    /**
     * get 是否开启 HTTPS 强制跳转, protocol.http 和 protocol.https 都为 true 时此参数生效. &lt;br&gt;- 0: 不开启强制跳转. &lt;br&gt;- 1: 开启强制跳转
     *
     * @return
     */
    public Integer getForceJump() {
        return forceJump;
    }

    /**
     * set 是否开启 HTTPS 强制跳转, protocol.http 和 protocol.https 都为 true 时此参数生效. &lt;br&gt;- 0: 不开启强制跳转. &lt;br&gt;- 1: 开启强制跳转
     *
     * @param forceJump
     */
    public void setForceJump(Integer forceJump) {
        this.forceJump = forceJump;
    }

    /**
     * get 是否为自定义端口号. 0: 默认&lt;br&gt;- 1: 自定义
     *
     * @return
     */
    public Integer getCustomPortStatus() {
        return customPortStatus;
    }

    /**
     * set 是否为自定义端口号. 0: 默认&lt;br&gt;- 1: 自定义
     *
     * @param customPortStatus
     */
    public void setCustomPortStatus(Integer customPortStatus) {
        this.customPortStatus = customPortStatus;
    }

    /**
     * get 是否开启 HTTP 回源, protocol.https 为 true 时此参数生效. &lt;br&gt;- 0: 不开启. &lt;br&gt;- 1: 开启
     *
     * @return
     */
    public Integer getHttpOrigin() {
        return httpOrigin;
    }

    /**
     * set 是否开启 HTTP 回源, protocol.https 为 true 时此参数生效. &lt;br&gt;- 0: 不开启. &lt;br&gt;- 1: 开启
     *
     * @param httpOrigin
     */
    public void setHttpOrigin(Integer httpOrigin) {
        this.httpOrigin = httpOrigin;
    }

    /**
     * get 是否开启 WebSocket.&lt;br&gt;- 0: 不开启&lt;br&gt;- 1: 开启
     *
     * @return
     */
    public Integer getWebSocketStatus() {
        return webSocketStatus;
    }

    /**
     * set 是否开启 WebSocket.&lt;br&gt;- 0: 不开启&lt;br&gt;- 1: 开启
     *
     * @param webSocketStatus
     */
    public void setWebSocketStatus(Integer webSocketStatus) {
        this.webSocketStatus = webSocketStatus;
    }

    /**
     * get 按区域分流回源配置
     *
     * @return
     */
    public List<GeoRsRoute> getGeoRsRoute() {
        return geoRsRoute;
    }

    /**
     * set 按区域分流回源配置
     *
     * @param geoRsRoute
     */
    public void setGeoRsRoute(List<GeoRsRoute> geoRsRoute) {
        this.geoRsRoute = geoRsRoute;
    }

    /**
     * get 是否开启回源长连接, protocol 选项开启 https 时生效, 可取值&lt;br&gt;- on: 开启&lt;br&gt;- off: 关闭
     *
     * @return
     */
    public String getEnableKeepalive() {
        return enableKeepalive;
    }

    /**
     * set 是否开启回源长连接, protocol 选项开启 https 时生效, 可取值&lt;br&gt;- on: 开启&lt;br&gt;- off: 关闭
     *
     * @param enableKeepalive
     */
    public void setEnableKeepalive(String enableKeepalive) {
        this.enableKeepalive = enableKeepalive;
    }

    /**
     * get http 版本, protocol 选项开启 https 时生效, 可取值 http1 或 http2
     *
     * @return
     */
    public String getHttpVersion() {
        return httpVersion;
    }

    /**
     * set http 版本, protocol 选项开启 https 时生效, 可取值 http1 或 http2
     *
     * @param httpVersion
     */
    public void setHttpVersion(String httpVersion) {
        this.httpVersion = httpVersion;
    }

    /**
     * get SSL协议类型, protocol 选项开启 https 时生效, 可取值SSLv2,SSLv3,TLSv1.0,TLSv1.1,TLSv1.2
     *
     * @return
     */
    public List<String> getSslProtocols() {
        return sslProtocols;
    }

    /**
     * set SSL协议类型, protocol 选项开启 https 时生效, 可取值SSLv2,SSLv3,TLSv1.0,TLSv1.1,TLSv1.2
     *
     * @param sslProtocols
     */
    public void setSslProtocols(List<String> sslProtocols) {
        this.sslProtocols = sslProtocols;
    }

    /**
     * get 加密套件等级, protocol 选项开启 https 时生效, 可取值&lt;br&gt;- low: 低级&lt;br&gt;- middle: 中级&lt;br&gt;- high：高级&lt;br&gt;- custom：自定义
     *
     * @return
     */
    public String getSuiteLevel() {
        return suiteLevel;
    }

    /**
     * set 加密套件等级, protocol 选项开启 https 时生效, 可取值&lt;br&gt;- low: 低级&lt;br&gt;- middle: 中级&lt;br&gt;- high：高级&lt;br&gt;- custom：自定义
     *
     * @param suiteLevel
     */
    public void setSuiteLevel(String suiteLevel) {
        this.suiteLevel = suiteLevel;
    }

    /**
     * get 自定义加密套件等级, suiteLevel 为 custom 是有效
     *
     * @return
     */
    public List<String> getUserSuiteLevel() {
        return userSuiteLevel;
    }

    /**
     * set 自定义加密套件等级, suiteLevel 为 custom 是有效
     *
     * @param userSuiteLevel
     */
    public void setUserSuiteLevel(List<String> userSuiteLevel) {
        this.userSuiteLevel = userSuiteLevel;
    }

    /**
     * get 健康检查开关, 0: 关闭, 1: 开启
     *
     * @return
     */
    public Integer getEnableHealthCheck() {
        return enableHealthCheck;
    }

    /**
     * set 健康检查开关, 0: 关闭, 1: 开启
     *
     * @param enableHealthCheck
     */
    public void setEnableHealthCheck(Integer enableHealthCheck) {
        this.enableHealthCheck = enableHealthCheck;
    }

    /**
     * get 回源连接超时时长, 单位 秒
     *
     * @return
     */
    public Integer getProxyConnectTimeout() {
        return proxyConnectTimeout;
    }

    /**
     * set 回源连接超时时长, 单位 秒
     *
     * @param proxyConnectTimeout
     */
    public void setProxyConnectTimeout(Integer proxyConnectTimeout) {
        this.proxyConnectTimeout = proxyConnectTimeout;
    }

    /**
     * get 请求头支持下划线, 0: 关闭, 1: 开启
     *
     * @return
     */
    public Integer getEnableUnderscores() {
        return enableUnderscores;
    }

    /**
     * set 请求头支持下划线, 0: 关闭, 1: 开启
     *
     * @param enableUnderscores
     */
    public void setEnableUnderscores(Integer enableUnderscores) {
        this.enableUnderscores = enableUnderscores;
    }


    /**
     * set 高防 IP, serviceIps 为空时生效
     *
     * @param serviceIp
     */
    public WebRuleSpec serviceIp(String serviceIp) {
        this.serviceIp = serviceIp;
        return this;
    }

    /**
     * set 高防 IP 列表, 不为空时忽略 serviceIp, 传多个时后台会在高防IP封禁后随机切换其他未封禁的IP
     *
     * @param serviceIps
     */
    public WebRuleSpec serviceIps(List<String> serviceIps) {
        this.serviceIps = serviceIps;
        return this;
    }

    /**
     * set 子域名
     *
     * @param domain
     */
    public WebRuleSpec domain(String domain) {
        this.domain = domain;
        return this;
    }

    /**
     * set 协议: http, https 至少一个为 true
     *
     * @param protocol
     */
    public WebRuleSpec protocol(WebRuleProtocol protocol) {
        this.protocol = protocol;
        return this;
    }

    /**
     * set HTTP 协议的端口号, 如80, 81; 如果 protocol.http 为 true, 至少配置一个端口
     *
     * @param port
     */
    public WebRuleSpec port(List<Integer> port) {
        this.port = port;
        return this;
    }

    /**
     * set HTTPS 协议的端口号, 如443, 8443; 如果 protocol.https 为 true, 至少配置一个端口
     *
     * @param httpsPort
     */
    public WebRuleSpec httpsPort(List<Integer> httpsPort) {
        this.httpsPort = httpsPort;
        return this;
    }

    /**
     * set 回源类型：A 或者 CNAME
     *
     * @param originType
     */
    public WebRuleSpec originType(String originType) {
        this.originType = originType;
        return this;
    }

    /**
     * set originType 为 A 时, 需要设置该字段
     *
     * @param originAddr
     */
    public WebRuleSpec originAddr(List<OriginAddrItem> originAddr) {
        this.originAddr = originAddr;
        return this;
    }

    /**
     * set 备用的回源地址列表, 可以配置为一个域名或者多个 ip 地址
     *
     * @param onlineAddr
     */
    public WebRuleSpec onlineAddr(List<String> onlineAddr) {
        this.onlineAddr = onlineAddr;
        return this;
    }

    /**
     * set 回源域名, originType 为 CNAME 时需要指定该字段
     *
     * @param originDomain
     */
    public WebRuleSpec originDomain(String originDomain) {
        this.originDomain = originDomain;
        return this;
    }

    /**
     * set 转发规则. &lt;br&gt;- wrr: 带权重的轮询&lt;br&gt;- rr:  不带权重的轮询&lt;br&gt;- sh:  源地址hash
     *
     * @param algorithm
     */
    public WebRuleSpec algorithm(String algorithm) {
        this.algorithm = algorithm;
        return this;
    }

    /**
     * set 是否开启 HTTPS 强制跳转, protocol.http 和 protocol.https 都为 true 时此参数生效. &lt;br&gt;- 0: 不开启强制跳转. &lt;br&gt;- 1: 开启强制跳转
     *
     * @param forceJump
     */
    public WebRuleSpec forceJump(Integer forceJump) {
        this.forceJump = forceJump;
        return this;
    }

    /**
     * set 是否为自定义端口号. 0: 默认&lt;br&gt;- 1: 自定义
     *
     * @param customPortStatus
     */
    public WebRuleSpec customPortStatus(Integer customPortStatus) {
        this.customPortStatus = customPortStatus;
        return this;
    }

    /**
     * set 是否开启 HTTP 回源, protocol.https 为 true 时此参数生效. &lt;br&gt;- 0: 不开启. &lt;br&gt;- 1: 开启
     *
     * @param httpOrigin
     */
    public WebRuleSpec httpOrigin(Integer httpOrigin) {
        this.httpOrigin = httpOrigin;
        return this;
    }

    /**
     * set 是否开启 WebSocket.&lt;br&gt;- 0: 不开启&lt;br&gt;- 1: 开启
     *
     * @param webSocketStatus
     */
    public WebRuleSpec webSocketStatus(Integer webSocketStatus) {
        this.webSocketStatus = webSocketStatus;
        return this;
    }

    /**
     * set 按区域分流回源配置
     *
     * @param geoRsRoute
     */
    public WebRuleSpec geoRsRoute(List<GeoRsRoute> geoRsRoute) {
        this.geoRsRoute = geoRsRoute;
        return this;
    }

    /**
     * set 是否开启回源长连接, protocol 选项开启 https 时生效, 可取值&lt;br&gt;- on: 开启&lt;br&gt;- off: 关闭
     *
     * @param enableKeepalive
     */
    public WebRuleSpec enableKeepalive(String enableKeepalive) {
        this.enableKeepalive = enableKeepalive;
        return this;
    }

    /**
     * set http 版本, protocol 选项开启 https 时生效, 可取值 http1 或 http2
     *
     * @param httpVersion
     */
    public WebRuleSpec httpVersion(String httpVersion) {
        this.httpVersion = httpVersion;
        return this;
    }

    /**
     * set SSL协议类型, protocol 选项开启 https 时生效, 可取值SSLv2,SSLv3,TLSv1.0,TLSv1.1,TLSv1.2
     *
     * @param sslProtocols
     */
    public WebRuleSpec sslProtocols(List<String> sslProtocols) {
        this.sslProtocols = sslProtocols;
        return this;
    }

    /**
     * set 加密套件等级, protocol 选项开启 https 时生效, 可取值&lt;br&gt;- low: 低级&lt;br&gt;- middle: 中级&lt;br&gt;- high：高级&lt;br&gt;- custom：自定义
     *
     * @param suiteLevel
     */
    public WebRuleSpec suiteLevel(String suiteLevel) {
        this.suiteLevel = suiteLevel;
        return this;
    }

    /**
     * set 自定义加密套件等级, suiteLevel 为 custom 是有效
     *
     * @param userSuiteLevel
     */
    public WebRuleSpec userSuiteLevel(List<String> userSuiteLevel) {
        this.userSuiteLevel = userSuiteLevel;
        return this;
    }

    /**
     * set 健康检查开关, 0: 关闭, 1: 开启
     *
     * @param enableHealthCheck
     */
    public WebRuleSpec enableHealthCheck(Integer enableHealthCheck) {
        this.enableHealthCheck = enableHealthCheck;
        return this;
    }

    /**
     * set 回源连接超时时长, 单位 秒
     *
     * @param proxyConnectTimeout
     */
    public WebRuleSpec proxyConnectTimeout(Integer proxyConnectTimeout) {
        this.proxyConnectTimeout = proxyConnectTimeout;
        return this;
    }

    /**
     * set 请求头支持下划线, 0: 关闭, 1: 开启
     *
     * @param enableUnderscores
     */
    public WebRuleSpec enableUnderscores(Integer enableUnderscores) {
        this.enableUnderscores = enableUnderscores;
        return this;
    }


    /**
     * add item to 高防 IP 列表, 不为空时忽略 serviceIp, 传多个时后台会在高防IP封禁后随机切换其他未封禁的IP
     *
     * @param serviceIp
     */
    public void addServiceIp(String serviceIp) {
        if (this.serviceIps == null) {
            this.serviceIps = new ArrayList<>();
        }
        this.serviceIps.add(serviceIp);
    }

    /**
     * add item to HTTP 协议的端口号, 如80, 81; 如果 protocol.http 为 true, 至少配置一个端口
     *
     * @param port
     */
    public void addPort(Integer port) {
        if (this.port == null) {
            this.port = new ArrayList<>();
        }
        this.port.add(port);
    }

    /**
     * add item to HTTPS 协议的端口号, 如443, 8443; 如果 protocol.https 为 true, 至少配置一个端口
     *
     * @param httpsPort
     */
    public void addHttpsPort(Integer httpsPort) {
        if (this.httpsPort == null) {
            this.httpsPort = new ArrayList<>();
        }
        this.httpsPort.add(httpsPort);
    }

    /**
     * add item to originType 为 A 时, 需要设置该字段
     *
     * @param originAddr
     */
    public void addOriginAddr(OriginAddrItem originAddr) {
        if (this.originAddr == null) {
            this.originAddr = new ArrayList<>();
        }
        this.originAddr.add(originAddr);
    }

    /**
     * add item to 备用的回源地址列表, 可以配置为一个域名或者多个 ip 地址
     *
     * @param onlineAddr
     */
    public void addOnlineAddr(String onlineAddr) {
        if (this.onlineAddr == null) {
            this.onlineAddr = new ArrayList<>();
        }
        this.onlineAddr.add(onlineAddr);
    }

    /**
     * add item to 按区域分流回源配置
     *
     * @param geoRsRoute
     */
    public void addGeoRsRoute(GeoRsRoute geoRsRoute) {
        if (this.geoRsRoute == null) {
            this.geoRsRoute = new ArrayList<>();
        }
        this.geoRsRoute.add(geoRsRoute);
    }

    /**
     * add item to SSL协议类型, protocol 选项开启 https 时生效, 可取值SSLv2,SSLv3,TLSv1.0,TLSv1.1,TLSv1.2
     *
     * @param sslProtocol
     */
    public void addSslProtocol(String sslProtocol) {
        if (this.sslProtocols == null) {
            this.sslProtocols = new ArrayList<>();
        }
        this.sslProtocols.add(sslProtocol);
    }

    /**
     * add item to 自定义加密套件等级, suiteLevel 为 custom 是有效
     *
     * @param userSuiteLevel
     */
    public void addUserSuiteLevel(String userSuiteLevel) {
        if (this.userSuiteLevel == null) {
            this.userSuiteLevel = new ArrayList<>();
        }
        this.userSuiteLevel.add(userSuiteLevel);
    }

}