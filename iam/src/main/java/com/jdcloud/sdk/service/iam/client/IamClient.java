/*
 * Copyright 2018-2025 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * IAM API
 * IAM相关接口
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.iam.client;

import com.jdcloud.sdk.JdcloudSdkException;
import com.jdcloud.sdk.auth.CredentialsProvider;
import com.jdcloud.sdk.client.Environment;
import com.jdcloud.sdk.client.Jdcloud;
import com.jdcloud.sdk.client.JdcloudClient;
import com.jdcloud.sdk.client.JdcloudValidateException;
import com.jdcloud.sdk.http.HttpRequestConfig;
import com.jdcloud.sdk.service.iam.model.AddPermissionsToSubUserRequest;
import com.jdcloud.sdk.service.iam.model.AddPermissionsToSubUserResponse;
import com.jdcloud.sdk.service.iam.client.AddPermissionsToSubUserExecutor;
import com.jdcloud.sdk.service.iam.model.UpdatePermissionRequest;
import com.jdcloud.sdk.service.iam.model.UpdatePermissionResponse;
import com.jdcloud.sdk.service.iam.client.UpdatePermissionExecutor;
import com.jdcloud.sdk.service.iam.model.CreatePermissionRequest;
import com.jdcloud.sdk.service.iam.model.CreatePermissionResponse;
import com.jdcloud.sdk.service.iam.client.CreatePermissionExecutor;
import com.jdcloud.sdk.service.iam.model.EnabledUserAccessKeyRequest;
import com.jdcloud.sdk.service.iam.model.EnabledUserAccessKeyResponse;
import com.jdcloud.sdk.service.iam.client.EnabledUserAccessKeyExecutor;
import com.jdcloud.sdk.service.iam.model.CreateUserAccessKeyRequest;
import com.jdcloud.sdk.service.iam.model.CreateUserAccessKeyResponse;
import com.jdcloud.sdk.service.iam.client.CreateUserAccessKeyExecutor;
import com.jdcloud.sdk.service.iam.model.DescribePermissionsRequest;
import com.jdcloud.sdk.service.iam.model.DescribePermissionsResponse;
import com.jdcloud.sdk.service.iam.client.DescribePermissionsExecutor;
import com.jdcloud.sdk.service.iam.model.DescribePermissionDetailRequest;
import com.jdcloud.sdk.service.iam.model.DescribePermissionDetailResponse;
import com.jdcloud.sdk.service.iam.client.DescribePermissionDetailExecutor;
import com.jdcloud.sdk.service.iam.model.CreateSubuserRequest;
import com.jdcloud.sdk.service.iam.model.CreateSubuserResponse;
import com.jdcloud.sdk.service.iam.client.CreateSubuserExecutor;
import com.jdcloud.sdk.service.iam.model.RemovePermissionOfSubUserRequest;
import com.jdcloud.sdk.service.iam.model.RemovePermissionOfSubUserResponse;
import com.jdcloud.sdk.service.iam.client.RemovePermissionOfSubUserExecutor;
import com.jdcloud.sdk.service.iam.model.DisabledUserAccessKeyRequest;
import com.jdcloud.sdk.service.iam.model.DisabledUserAccessKeyResponse;
import com.jdcloud.sdk.service.iam.client.DisabledUserAccessKeyExecutor;
import com.jdcloud.sdk.service.iam.model.DescribeSubUserPermissionsRequest;
import com.jdcloud.sdk.service.iam.model.DescribeSubUserPermissionsResponse;
import com.jdcloud.sdk.service.iam.client.DescribeSubUserPermissionsExecutor;
import com.jdcloud.sdk.service.iam.model.DeleteUserAccessKeyRequest;
import com.jdcloud.sdk.service.iam.model.DeleteUserAccessKeyResponse;
import com.jdcloud.sdk.service.iam.client.DeleteUserAccessKeyExecutor;
import com.jdcloud.sdk.service.iam.model.DescribeUserAccessKeysRequest;
import com.jdcloud.sdk.service.iam.model.DescribeUserAccessKeysResponse;
import com.jdcloud.sdk.service.iam.client.DescribeUserAccessKeysExecutor;

/**
 * iamClient
 */
public class IamClient extends JdcloudClient {

    public final static String ApiVersion = "v1";
    private final static String UserAgentPrefix = "JdcloudSdkJava";
    public final static String ClientVersion = "1.0.1";
    public final static String DefaultEndpoint = "iam.jdcloud-api.com";
    public final static String ServiceName = "iam";
    public final static String UserAgent = UserAgentPrefix + "/" + ClientVersion + " " + ServiceName + "/" + ApiVersion;

    CredentialsProvider credentialsProvider;
    HttpRequestConfig httpRequestConfig;
    Environment environment = new Environment.Builder().endpoint(DefaultEndpoint).build();

    public CredentialsProvider getCredentialsProvider() {
        return credentialsProvider;
    }

    public HttpRequestConfig getHttpRequestConfig() {
        return httpRequestConfig;
    }

    public Environment getEnvironment() {
        return environment;
    }

    public String getUserAgent() {
        return UserAgent;
    }

    public String getServiceName() {
        return ServiceName;
    }

    public String getVersion() {
        return ApiVersion;
    }

    private IamClient() {

    }

    public static Builder builder() {
        return new DefaultBuilder();
    }


    /**
     * 为子用户绑定策略
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public AddPermissionsToSubUserResponse addPermissionsToSubUser(AddPermissionsToSubUserRequest request) throws JdcloudSdkException {
        return new AddPermissionsToSubUserExecutor().client(this).execute(request);
    }

    /**
     * 修改策略
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public UpdatePermissionResponse updatePermission(UpdatePermissionRequest request) throws JdcloudSdkException {
        return new UpdatePermissionExecutor().client(this).execute(request);
    }

    /**
     * 创建策略
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreatePermissionResponse createPermission(CreatePermissionRequest request) throws JdcloudSdkException {
        return new CreatePermissionExecutor().client(this).execute(request);
    }

    /**
     * 启用AccessKey
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public EnabledUserAccessKeyResponse enabledUserAccessKey(EnabledUserAccessKeyRequest request) throws JdcloudSdkException {
        return new EnabledUserAccessKeyExecutor().client(this).execute(request);
    }

    /**
     * 创建AccessKey
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreateUserAccessKeyResponse createUserAccessKey(CreateUserAccessKeyRequest request) throws JdcloudSdkException {
        return new CreateUserAccessKeyExecutor().client(this).execute(request);
    }

    /**
     * 查询策略列表
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribePermissionsResponse describePermissions(DescribePermissionsRequest request) throws JdcloudSdkException {
        return new DescribePermissionsExecutor().client(this).execute(request);
    }

    /**
     * 查询策略详情
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribePermissionDetailResponse describePermissionDetail(DescribePermissionDetailRequest request) throws JdcloudSdkException {
        return new DescribePermissionDetailExecutor().client(this).execute(request);
    }

    /**
     * 创建子账号
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreateSubuserResponse createSubuser(CreateSubuserRequest request) throws JdcloudSdkException {
        return new CreateSubuserExecutor().client(this).execute(request);
    }

    /**
     * 为子用户解绑策略
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public RemovePermissionOfSubUserResponse removePermissionOfSubUser(RemovePermissionOfSubUserRequest request) throws JdcloudSdkException {
        return new RemovePermissionOfSubUserExecutor().client(this).execute(request);
    }

    /**
     * 禁用AccessKey
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DisabledUserAccessKeyResponse disabledUserAccessKey(DisabledUserAccessKeyRequest request) throws JdcloudSdkException {
        return new DisabledUserAccessKeyExecutor().client(this).execute(request);
    }

    /**
     * 查询子用户策略列表
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeSubUserPermissionsResponse describeSubUserPermissions(DescribeSubUserPermissionsRequest request) throws JdcloudSdkException {
        return new DescribeSubUserPermissionsExecutor().client(this).execute(request);
    }

    /**
     * 删除AccessKey
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteUserAccessKeyResponse deleteUserAccessKey(DeleteUserAccessKeyRequest request) throws JdcloudSdkException {
        return new DeleteUserAccessKeyExecutor().client(this).execute(request);
    }

    /**
     * 查询AccessKey列表
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeUserAccessKeysResponse describeUserAccessKeys(DescribeUserAccessKeysRequest request) throws JdcloudSdkException {
        return new DescribeUserAccessKeysExecutor().client(this).execute(request);
    }


    public interface Builder {
        public Builder credentialsProvider(CredentialsProvider provider);
        public Builder environment(Environment environment);
        public Builder httpRequestConfig(HttpRequestConfig config);
        public IamClient build() throws JdcloudSdkException;
    }

    private static class DefaultBuilder implements Builder {

        private IamClient iamClient;

        public DefaultBuilder() {
            iamClient = new IamClient();
        }

        public DefaultBuilder credentialsProvider(CredentialsProvider provider) {
            iamClient.credentialsProvider = provider;
            return this;
        }

        public DefaultBuilder httpRequestConfig(HttpRequestConfig config) {
            iamClient.httpRequestConfig = config;
            return this;
        }

        public IamClient build() throws JdcloudSdkException {

            if (iamClient.credentialsProvider == null) {
                //if credentialsProvider not set, try load jdcloud global default  credentials provider
                iamClient.credentialsProvider = Jdcloud.defaultInstance().getCredentialsProvider();
                if (iamClient.credentialsProvider == null) {
                    throw new JdcloudValidateException("IamClient build error: jdcloud credentials provider not set");
                }
            }
            if (iamClient.httpRequestConfig == null) {
                iamClient.httpRequestConfig = Jdcloud.defaultInstance().getHttpRequestConfig();
                if (iamClient.httpRequestConfig == null) {
                    throw new JdcloudValidateException("IamClient build error: http request config not set");
                }
            }
            return iamClient;
        }

        public Builder environment(Environment environment) {
            iamClient.environment = environment;
            return this;
        }
    }
}
