/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * lavm
 * lavm 服务
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.lavm.client;

import com.jdcloud.sdk.JdcloudSdkException;
import com.jdcloud.sdk.auth.CredentialsProvider;
import com.jdcloud.sdk.client.Environment;
import com.jdcloud.sdk.client.Jdcloud;
import com.jdcloud.sdk.client.JdcloudClient;
import com.jdcloud.sdk.client.JdcloudValidateException;
import com.jdcloud.sdk.http.HttpRequestConfig;
import com.jdcloud.sdk.service.lavm.model.StartInstanceRequest;
import com.jdcloud.sdk.service.lavm.model.StartInstanceResponse;
import com.jdcloud.sdk.service.lavm.client.StartInstanceExecutor;
import com.jdcloud.sdk.service.lavm.model.DescribeDomainsRequest;
import com.jdcloud.sdk.service.lavm.model.DescribeDomainsResponse;
import com.jdcloud.sdk.service.lavm.client.DescribeDomainsExecutor;
import com.jdcloud.sdk.service.lavm.model.DescribeKeypairsRequest;
import com.jdcloud.sdk.service.lavm.model.DescribeKeypairsResponse;
import com.jdcloud.sdk.service.lavm.client.DescribeKeypairsExecutor;
import com.jdcloud.sdk.service.lavm.model.UpdateInstanceAttributeRequest;
import com.jdcloud.sdk.service.lavm.model.UpdateInstanceAttributeResponse;
import com.jdcloud.sdk.service.lavm.client.UpdateInstanceAttributeExecutor;
import com.jdcloud.sdk.service.lavm.model.UpgradeInstanceRequest;
import com.jdcloud.sdk.service.lavm.model.UpgradeInstanceResponse;
import com.jdcloud.sdk.service.lavm.client.UpgradeInstanceExecutor;
import com.jdcloud.sdk.service.lavm.model.ModifyImageAttributeRequest;
import com.jdcloud.sdk.service.lavm.model.ModifyImageAttributeResponse;
import com.jdcloud.sdk.service.lavm.client.ModifyImageAttributeExecutor;
import com.jdcloud.sdk.service.lavm.model.CreateFirewallRuleRequest;
import com.jdcloud.sdk.service.lavm.model.CreateFirewallRuleResponse;
import com.jdcloud.sdk.service.lavm.client.CreateFirewallRuleExecutor;
import com.jdcloud.sdk.service.lavm.model.StopInstanceRequest;
import com.jdcloud.sdk.service.lavm.model.StopInstanceResponse;
import com.jdcloud.sdk.service.lavm.client.StopInstanceExecutor;
import com.jdcloud.sdk.service.lavm.model.AssociateDomainsRequest;
import com.jdcloud.sdk.service.lavm.model.AssociateDomainsResponse;
import com.jdcloud.sdk.service.lavm.client.AssociateDomainsExecutor;
import com.jdcloud.sdk.service.lavm.model.ResetSystemRequest;
import com.jdcloud.sdk.service.lavm.model.ResetSystemResponse;
import com.jdcloud.sdk.service.lavm.client.ResetSystemExecutor;
import com.jdcloud.sdk.service.lavm.model.DescribeInstancesTrafficPackagesRequest;
import com.jdcloud.sdk.service.lavm.model.DescribeInstancesTrafficPackagesResponse;
import com.jdcloud.sdk.service.lavm.client.DescribeInstancesTrafficPackagesExecutor;
import com.jdcloud.sdk.service.lavm.model.ImportKeypairRequest;
import com.jdcloud.sdk.service.lavm.model.ImportKeypairResponse;
import com.jdcloud.sdk.service.lavm.client.ImportKeypairExecutor;
import com.jdcloud.sdk.service.lavm.model.DisassociateDomainsRequest;
import com.jdcloud.sdk.service.lavm.model.DisassociateDomainsResponse;
import com.jdcloud.sdk.service.lavm.client.DisassociateDomainsExecutor;
import com.jdcloud.sdk.service.lavm.model.DescribeInstancesRequest;
import com.jdcloud.sdk.service.lavm.model.DescribeInstancesResponse;
import com.jdcloud.sdk.service.lavm.client.DescribeInstancesExecutor;
import com.jdcloud.sdk.service.lavm.model.DescribeInstanceVncUrlRequest;
import com.jdcloud.sdk.service.lavm.model.DescribeInstanceVncUrlResponse;
import com.jdcloud.sdk.service.lavm.client.DescribeInstanceVncUrlExecutor;
import com.jdcloud.sdk.service.lavm.model.DescribeInstanceRequest;
import com.jdcloud.sdk.service.lavm.model.DescribeInstanceResponse;
import com.jdcloud.sdk.service.lavm.client.DescribeInstanceExecutor;
import com.jdcloud.sdk.service.lavm.model.DeleteCustomImageRequest;
import com.jdcloud.sdk.service.lavm.model.DeleteCustomImageResponse;
import com.jdcloud.sdk.service.lavm.client.DeleteCustomImageExecutor;
import com.jdcloud.sdk.service.lavm.model.CreateKeypairRequest;
import com.jdcloud.sdk.service.lavm.model.CreateKeypairResponse;
import com.jdcloud.sdk.service.lavm.client.CreateKeypairExecutor;
import com.jdcloud.sdk.service.lavm.model.DescribePlansRequest;
import com.jdcloud.sdk.service.lavm.model.DescribePlansResponse;
import com.jdcloud.sdk.service.lavm.client.DescribePlansExecutor;
import com.jdcloud.sdk.service.lavm.model.CreateCustomImageRequest;
import com.jdcloud.sdk.service.lavm.model.CreateCustomImageResponse;
import com.jdcloud.sdk.service.lavm.client.CreateCustomImageExecutor;
import com.jdcloud.sdk.service.lavm.model.QueryQuotaRequest;
import com.jdcloud.sdk.service.lavm.model.QueryQuotaResponse;
import com.jdcloud.sdk.service.lavm.client.QueryQuotaExecutor;
import com.jdcloud.sdk.service.lavm.model.DescribeFirewallRulesRequest;
import com.jdcloud.sdk.service.lavm.model.DescribeFirewallRulesResponse;
import com.jdcloud.sdk.service.lavm.client.DescribeFirewallRulesExecutor;
import com.jdcloud.sdk.service.lavm.model.DeleteFirewallRuleRequest;
import com.jdcloud.sdk.service.lavm.model.DeleteFirewallRuleResponse;
import com.jdcloud.sdk.service.lavm.client.DeleteFirewallRuleExecutor;
import com.jdcloud.sdk.service.lavm.model.CreateInstancesRequest;
import com.jdcloud.sdk.service.lavm.model.CreateInstancesResponse;
import com.jdcloud.sdk.service.lavm.client.CreateInstancesExecutor;
import com.jdcloud.sdk.service.lavm.model.DeleteKeypairRequest;
import com.jdcloud.sdk.service.lavm.model.DeleteKeypairResponse;
import com.jdcloud.sdk.service.lavm.client.DeleteKeypairExecutor;
import com.jdcloud.sdk.service.lavm.model.DetachKeypairRequest;
import com.jdcloud.sdk.service.lavm.model.DetachKeypairResponse;
import com.jdcloud.sdk.service.lavm.client.DetachKeypairExecutor;
import com.jdcloud.sdk.service.lavm.model.AttachKeypairRequest;
import com.jdcloud.sdk.service.lavm.model.AttachKeypairResponse;
import com.jdcloud.sdk.service.lavm.client.AttachKeypairExecutor;
import com.jdcloud.sdk.service.lavm.model.ModifyFirewallRuleRequest;
import com.jdcloud.sdk.service.lavm.model.ModifyFirewallRuleResponse;
import com.jdcloud.sdk.service.lavm.client.ModifyFirewallRuleExecutor;
import com.jdcloud.sdk.service.lavm.model.RebootInstanceRequest;
import com.jdcloud.sdk.service.lavm.model.RebootInstanceResponse;
import com.jdcloud.sdk.service.lavm.client.RebootInstanceExecutor;
import com.jdcloud.sdk.service.lavm.model.DescribePlansSoldOutStatusRequest;
import com.jdcloud.sdk.service.lavm.model.DescribePlansSoldOutStatusResponse;
import com.jdcloud.sdk.service.lavm.client.DescribePlansSoldOutStatusExecutor;
import com.jdcloud.sdk.service.lavm.model.DescribeImagesRequest;
import com.jdcloud.sdk.service.lavm.model.DescribeImagesResponse;
import com.jdcloud.sdk.service.lavm.client.DescribeImagesExecutor;
import com.jdcloud.sdk.service.lavm.model.DescribeDisksRequest;
import com.jdcloud.sdk.service.lavm.model.DescribeDisksResponse;
import com.jdcloud.sdk.service.lavm.client.DescribeDisksExecutor;
import com.jdcloud.sdk.service.lavm.model.DescribePlansCanUpgradeRequest;
import com.jdcloud.sdk.service.lavm.model.DescribePlansCanUpgradeResponse;
import com.jdcloud.sdk.service.lavm.client.DescribePlansCanUpgradeExecutor;

/**
 * lavmClient
 */
public class LavmClient extends JdcloudClient {

    public final static String ApiVersion = "v1";
    private final static String UserAgentPrefix = "JdcloudSdkJava";
    public final static String ClientVersion = "1.2.11";
    public final static String DefaultEndpoint = "lavm.jdcloud-api.com";
    public final static String ServiceName = "lavm";
    public final static String UserAgent = UserAgentPrefix + "/" + ClientVersion + " " + ServiceName + "/" + ApiVersion;

    CredentialsProvider credentialsProvider;
    HttpRequestConfig httpRequestConfig;
    Environment environment = new Environment.Builder().endpoint(DefaultEndpoint).build();

    public CredentialsProvider getCredentialsProvider() {
        return credentialsProvider;
    }

    public HttpRequestConfig getHttpRequestConfig() {
        return httpRequestConfig;
    }

    public Environment getEnvironment() {
        return environment;
    }

    public String getUserAgent() {
        return UserAgent;
    }

    public String getServiceName() {
        return ServiceName;
    }

    public String getVersion() {
        return ApiVersion;
    }

    private LavmClient() {

    }

    public static Builder builder() {
        return new DefaultBuilder();
    }


    /**
     * 启动轻量应用云主机。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public StartInstanceResponse startInstance(StartInstanceRequest request) throws JdcloudSdkException {
        return new StartInstanceExecutor().client(this).execute(request);
    }

    /**
     * 查询域名接口

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeDomainsResponse describeDomains(DescribeDomainsRequest request) throws JdcloudSdkException {
        return new DescribeDomainsExecutor().client(this).execute(request);
    }

    /**
     * 
批量查询密钥对。

详细操作说明请参考帮助文档：[密钥概述](https://docs.jdcloud.com/cn/virtual-machines/keypair-overview)

## 接口说明
- 使用 &#x60;filters&#x60; 过滤器进行条件筛选，每个 &#x60;filter&#x60; 之间的关系为逻辑与（AND）的关系。
- 单次查询最大可查询100条密钥数据。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeKeypairsResponse describeKeypairs(DescribeKeypairsRequest request) throws JdcloudSdkException {
        return new DescribeKeypairsExecutor().client(this).execute(request);
    }

    /**
     * 修改轻量应用云主机的属性信息。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public UpdateInstanceAttributeResponse updateInstanceAttribute(UpdateInstanceAttributeRequest request) throws JdcloudSdkException {
        return new UpdateInstanceAttributeExecutor().client(this).execute(request);
    }

    /**
     * 升级轻量应用云主机。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public UpgradeInstanceResponse upgradeInstance(UpgradeInstanceRequest request) throws JdcloudSdkException {
        return new UpgradeInstanceExecutor().client(this).execute(request);
    }

    /**
     * 修改镜像属性。
详细操作说明请参考帮助文档：[镜像概述](https://docs.jdcloud.com/cn/virtual-machines/image-overview)
## 接口说明
- 只支持修改镜像名称或描述。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ModifyImageAttributeResponse modifyImageAttribute(ModifyImageAttributeRequest request) throws JdcloudSdkException {
        return new ModifyImageAttributeExecutor().client(this).execute(request);
    }

    /**
     * 为指定的轻量应用云主机创建一条防火墙规则。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreateFirewallRuleResponse createFirewallRule(CreateFirewallRuleRequest request) throws JdcloudSdkException {
        return new CreateFirewallRuleExecutor().client(this).execute(request);
    }

    /**
     * 停止轻量应用云主机。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public StopInstanceResponse stopInstance(StopInstanceRequest request) throws JdcloudSdkException {
        return new StopInstanceExecutor().client(this).execute(request);
    }

    /**
     * 为轻量云主机绑定域名。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public AssociateDomainsResponse associateDomains(AssociateDomainsRequest request) throws JdcloudSdkException {
        return new AssociateDomainsExecutor().client(this).execute(request);
    }

    /**
     * 轻量应用云主机重置系统。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ResetSystemResponse resetSystem(ResetSystemRequest request) throws JdcloudSdkException {
        return new ResetSystemExecutor().client(this).execute(request);
    }

    /**
     * 查询一个或多个实例流量包详细信息。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeInstancesTrafficPackagesResponse describeInstancesTrafficPackages(DescribeInstancesTrafficPackagesRequest request) throws JdcloudSdkException {
        return new DescribeInstancesTrafficPackagesExecutor().client(this).execute(request);
    }

    /**
     * 
导入密钥。

与创建密钥不同的是，导入的密钥是由用户生成的。生成之后将公钥部分导入到京东云。

详细操作说明请参考帮助文档：[创建密钥](https://docs.jdcloud.com/cn/virtual-machines/create-keypair)

## 接口说明
- 调用该接口导入由其他工具生成的密钥对的公钥部分。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ImportKeypairResponse importKeypair(ImportKeypairRequest request) throws JdcloudSdkException {
        return new ImportKeypairExecutor().client(this).execute(request);
    }

    /**
     * 为轻量云主机解绑域名。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DisassociateDomainsResponse disassociateDomains(DisassociateDomainsRequest request) throws JdcloudSdkException {
        return new DisassociateDomainsExecutor().client(this).execute(request);
    }

    /**
     * 查询轻量应用云主机列表。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeInstancesResponse describeInstances(DescribeInstancesRequest request) throws JdcloudSdkException {
        return new DescribeInstancesExecutor().client(this).execute(request);
    }

    /**
     * 获取lavm 实例，vnc url

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeInstanceVncUrlResponse describeInstanceVncUrl(DescribeInstanceVncUrlRequest request) throws JdcloudSdkException {
        return new DescribeInstanceVncUrlExecutor().client(this).execute(request);
    }

    /**
     * 查询轻量应用云主机详情。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeInstanceResponse describeInstance(DescribeInstanceRequest request) throws JdcloudSdkException {
        return new DescribeInstanceExecutor().client(this).execute(request);
    }

    /**
     * 删除自定义镜像。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteCustomImageResponse deleteCustomImage(DeleteCustomImageRequest request) throws JdcloudSdkException {
        return new DeleteCustomImageExecutor().client(this).execute(request);
    }

    /**
     * 
创建密钥。

公钥和私钥都由京东云生成，公钥保存在京东云，私钥返回给用户，由用户保存。

详细操作说明请参考帮助文档：[创建密钥](https://docs.jdcloud.com/cn/virtual-machines/create-keypair)

## 接口说明
- 调用该接口创建密钥后，公钥部分存储在京东云，并返回未加密的 &#x60;PEM&#x60; 编码的 &#x60;PKCS#8&#x60; 格式私钥，您只有一次机会保存您的私钥。请妥善保管。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreateKeypairResponse createKeypair(CreateKeypairRequest request) throws JdcloudSdkException {
        return new CreateKeypairExecutor().client(this).execute(request);
    }

    /**
     * 查询指定地域下轻量应用云主机所有的套餐信息。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribePlansResponse describePlans(DescribePlansRequest request) throws JdcloudSdkException {
        return new DescribePlansExecutor().client(this).execute(request);
    }

    /**
     * 创建自定义镜像。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreateCustomImageResponse createCustomImage(CreateCustomImageRequest request) throws JdcloudSdkException {
        return new CreateCustomImageExecutor().client(this).execute(request);
    }

    /**
     * 查询资源配额。
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public QueryQuotaResponse queryQuota(QueryQuotaRequest request) throws JdcloudSdkException {
        return new QueryQuotaExecutor().client(this).execute(request);
    }

    /**
     * 查询指定轻量应用云主机的防火墙规则。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeFirewallRulesResponse describeFirewallRules(DescribeFirewallRulesRequest request) throws JdcloudSdkException {
        return new DescribeFirewallRulesExecutor().client(this).execute(request);
    }

    /**
     * 删除指定轻量应用云主机的一条防火墙规则。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteFirewallRuleResponse deleteFirewallRule(DeleteFirewallRuleRequest request) throws JdcloudSdkException {
        return new DeleteFirewallRuleExecutor().client(this).execute(request);
    }

    /**
     * 创建一台或多台轻量应用云主机。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreateInstancesResponse createInstances(CreateInstancesRequest request) throws JdcloudSdkException {
        return new CreateInstancesExecutor().client(this).execute(request);
    }

    /**
     * 
删除密钥。

详细操作说明请参考帮助文档：[删除密钥](https://docs.jdcloud.com/cn/virtual-machines/delete-keypair)

## 接口说明
- 密钥删除后，使用该密钥的实例仍可正常使用与之匹配的本地私钥登录，且密钥仍会显示在实例详情中。
- 密钥删除后，与之关联的实例模板将变为不可用，并且与该实例模板关联的高可用组也会变为不可用。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteKeypairResponse deleteKeypair(DeleteKeypairRequest request) throws JdcloudSdkException {
        return new DeleteKeypairExecutor().client(this).execute(request);
    }

    /**
     * 
为云主机实例解绑密钥。

详细操作说明请参考帮助文档：[绑定密钥](https://docs.jdcloud.com/cn/virtual-machines/bind-keypair)

## 接口说明
- 调用该接口解绑云主机实例中的密钥。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DetachKeypairResponse detachKeypair(DetachKeypairRequest request) throws JdcloudSdkException {
        return new DetachKeypairExecutor().client(this).execute(request);
    }

    /**
     * 
为云主机实例绑定密钥。

详细操作说明请参考帮助文档：[绑定密钥](https://docs.jdcloud.com/cn/virtual-machines/bind-keypair)

## 接口说明
- 只支持为 linux 云主机实例绑定密钥。
- 每台云主机实例只支持绑定一个密钥。如果云主机绑定的密钥被删除了，那么该云主机还可以再次绑定密钥。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public AttachKeypairResponse attachKeypair(AttachKeypairRequest request) throws JdcloudSdkException {
        return new AttachKeypairExecutor().client(this).execute(request);
    }

    /**
     * 为指定的轻量应用云主机修改一条防火墙规则。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ModifyFirewallRuleResponse modifyFirewallRule(ModifyFirewallRuleRequest request) throws JdcloudSdkException {
        return new ModifyFirewallRuleExecutor().client(this).execute(request);
    }

    /**
     * 重启轻量应用云主机。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public RebootInstanceResponse rebootInstance(RebootInstanceRequest request) throws JdcloudSdkException {
        return new RebootInstanceExecutor().client(this).execute(request);
    }

    /**
     * 查询指定地域下轻量应用云主机套餐信息是否售罄

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribePlansSoldOutStatusResponse describePlansSoldOutStatus(DescribePlansSoldOutStatusRequest request) throws JdcloudSdkException {
        return new DescribePlansSoldOutStatusExecutor().client(this).execute(request);
    }

    /**
     * DescribeImages 查询指定地域下一个或多个镜像信息Image 模型。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeImagesResponse describeImages(DescribeImagesRequest request) throws JdcloudSdkException {
        return new DescribeImagesExecutor().client(this).execute(request);
    }

    /**
     * 查询磁盘信息。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeDisksResponse describeDisks(DescribeDisksRequest request) throws JdcloudSdkException {
        return new DescribeDisksExecutor().client(this).execute(request);
    }

    /**
     * 查询当前实例可升级套餐列表。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribePlansCanUpgradeResponse describePlansCanUpgrade(DescribePlansCanUpgradeRequest request) throws JdcloudSdkException {
        return new DescribePlansCanUpgradeExecutor().client(this).execute(request);
    }


    public interface Builder {
        public Builder credentialsProvider(CredentialsProvider provider);
        public Builder environment(Environment environment);
        public Builder httpRequestConfig(HttpRequestConfig config);
        public LavmClient build() throws JdcloudSdkException;
    }

    private static class DefaultBuilder implements Builder {

        private LavmClient lavmClient;

        public DefaultBuilder() {
            lavmClient = new LavmClient();
        }

        public DefaultBuilder credentialsProvider(CredentialsProvider provider) {
            lavmClient.credentialsProvider = provider;
            return this;
        }

        public DefaultBuilder httpRequestConfig(HttpRequestConfig config) {
            lavmClient.httpRequestConfig = config;
            return this;
        }

        public LavmClient build() throws JdcloudSdkException {

            if (lavmClient.credentialsProvider == null) {
                //if credentialsProvider not set, try load jdcloud global default  credentials provider
                lavmClient.credentialsProvider = Jdcloud.defaultInstance().getCredentialsProvider();
                if (lavmClient.credentialsProvider == null) {
                    throw new JdcloudValidateException("LavmClient build error: jdcloud credentials provider not set");
                }
            }
            if (lavmClient.httpRequestConfig == null) {
                lavmClient.httpRequestConfig = Jdcloud.defaultInstance().getHttpRequestConfig();
                if (lavmClient.httpRequestConfig == null) {
                    throw new JdcloudValidateException("LavmClient build error: http request config not set");
                }
            }
            return lavmClient;
        }

        public Builder environment(Environment environment) {
            lavmClient.environment = environment;
            return this;
        }
    }
}
