/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * JCLOUD IoT Hub API
 * API related to IoT Hub
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.iothub.client;

import com.jdcloud.sdk.JdcloudSdkException;
import com.jdcloud.sdk.auth.CredentialsProvider;
import com.jdcloud.sdk.client.Environment;
import com.jdcloud.sdk.client.Jdcloud;
import com.jdcloud.sdk.client.JdcloudClient;
import com.jdcloud.sdk.client.JdcloudValidateException;
import com.jdcloud.sdk.http.HttpRequestConfig;
import com.jdcloud.sdk.service.iothub.model.DevicesEnrollRequest;
import com.jdcloud.sdk.service.iothub.model.DevicesEnrollResponse;
import com.jdcloud.sdk.service.iothub.client.DevicesEnrollExecutor;
import com.jdcloud.sdk.service.iothub.model.DeviceCommandRequest;
import com.jdcloud.sdk.service.iothub.model.DeviceCommandResponse;
import com.jdcloud.sdk.service.iothub.client.DeviceCommandExecutor;
import com.jdcloud.sdk.service.iothub.model.OmEnrollRequest;
import com.jdcloud.sdk.service.iothub.model.OmEnrollResponse;
import com.jdcloud.sdk.service.iothub.client.OmEnrollExecutor;
import com.jdcloud.sdk.service.iothub.model.DeviceActivateRequest;
import com.jdcloud.sdk.service.iothub.model.DeviceActivateResponse;
import com.jdcloud.sdk.service.iothub.client.DeviceActivateExecutor;
import com.jdcloud.sdk.service.iothub.model.ModuleStateRequest;
import com.jdcloud.sdk.service.iothub.model.ModuleStateResponse;
import com.jdcloud.sdk.service.iothub.client.ModuleStateExecutor;
import com.jdcloud.sdk.service.iothub.model.ModuleEnrollRequest;
import com.jdcloud.sdk.service.iothub.model.ModuleEnrollResponse;
import com.jdcloud.sdk.service.iothub.client.ModuleEnrollExecutor;
import com.jdcloud.sdk.service.iothub.model.DeviceStateRequest;
import com.jdcloud.sdk.service.iothub.model.DeviceStateResponse;
import com.jdcloud.sdk.service.iothub.client.DeviceStateExecutor;

/**
 * iothubClient
 */
public class IothubClient extends JdcloudClient {

    public final static String ApiVersion = "v1";
    private final static String UserAgentPrefix = "JdcloudSdkJava";
    public final static String ClientVersion = "1.0.9";
    public final static String DefaultEndpoint = "iothub.jdcloud-api.com";
    public final static String ServiceName = "iothub";
    public final static String UserAgent = UserAgentPrefix + "/" + ClientVersion + " " + ServiceName + "/" + ApiVersion;

    CredentialsProvider credentialsProvider;
    HttpRequestConfig httpRequestConfig;
    Environment environment = new Environment.Builder().endpoint(DefaultEndpoint).build();

    public CredentialsProvider getCredentialsProvider() {
        return credentialsProvider;
    }

    public HttpRequestConfig getHttpRequestConfig() {
        return httpRequestConfig;
    }

    public Environment getEnvironment() {
        return environment;
    }

    public String getUserAgent() {
        return UserAgent;
    }

    public String getServiceName() {
        return ServiceName;
    }

    public String getVersion() {
        return ApiVersion;
    }

    private IothubClient() {

    }

    public static Builder builder() {
        return new DefaultBuilder();
    }


    /**
     * 客户用该接口可以批量登记设备

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DevicesEnrollResponse devicesEnroll(DevicesEnrollRequest request) throws JdcloudSdkException {
        return new DevicesEnrollExecutor().client(this).execute(request);
    }

    /**
     * 客户用该接口可以对设备下发命令

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeviceCommandResponse deviceCommand(DeviceCommandRequest request) throws JdcloudSdkException {
        return new DeviceCommandExecutor().client(this).execute(request);
    }

    /**
     * 物模型注册接口

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public OmEnrollResponse omEnroll(OmEnrollRequest request) throws JdcloudSdkException {
        return new OmEnrollExecutor().client(this).execute(request);
    }

    /**
     * 激活一个设备，包括Edge、Dragon和普通设备

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeviceActivateResponse deviceActivate(DeviceActivateRequest request) throws JdcloudSdkException {
        return new DeviceActivateExecutor().client(this).execute(request);
    }

    /**
     * 客户用该接口可以修改模块预期状态

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ModuleStateResponse moduleState(ModuleStateRequest request) throws JdcloudSdkException {
        return new ModuleStateExecutor().client(this).execute(request);
    }

    /**
     * 客户用该接口可以登记模块

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ModuleEnrollResponse moduleEnroll(ModuleEnrollRequest request) throws JdcloudSdkException {
        return new ModuleEnrollExecutor().client(this).execute(request);
    }

    /**
     * 客户用该接口可以修改设备预期状态

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeviceStateResponse deviceState(DeviceStateRequest request) throws JdcloudSdkException {
        return new DeviceStateExecutor().client(this).execute(request);
    }


    public interface Builder {
        public Builder credentialsProvider(CredentialsProvider provider);
        public Builder environment(Environment environment);
        public Builder httpRequestConfig(HttpRequestConfig config);
        public IothubClient build() throws JdcloudSdkException;
    }

    private static class DefaultBuilder implements Builder {

        private IothubClient iothubClient;

        public DefaultBuilder() {
            iothubClient = new IothubClient();
        }

        public DefaultBuilder credentialsProvider(CredentialsProvider provider) {
            iothubClient.credentialsProvider = provider;
            return this;
        }

        public DefaultBuilder httpRequestConfig(HttpRequestConfig config) {
            iothubClient.httpRequestConfig = config;
            return this;
        }

        public IothubClient build() throws JdcloudSdkException {

            if (iothubClient.credentialsProvider == null) {
                //if credentialsProvider not set, try load jdcloud global default  credentials provider
                iothubClient.credentialsProvider = Jdcloud.defaultInstance().getCredentialsProvider();
                if (iothubClient.credentialsProvider == null) {
                    throw new JdcloudValidateException("IothubClient build error: jdcloud credentials provider not set");
                }
            }
            if (iothubClient.httpRequestConfig == null) {
                iothubClient.httpRequestConfig = Jdcloud.defaultInstance().getHttpRequestConfig();
                if (iothubClient.httpRequestConfig == null) {
                    throw new JdcloudValidateException("IothubClient build error: http request config not set");
                }
            }
            return iothubClient;
        }

        public Builder environment(Environment environment) {
            iothubClient.environment = environment;
            return this;
        }
    }
}
