/*
 * Copyright 2018-2025 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 云数据库RDS
 * 目前RDS OpenAPI支持云数据库SQL Server，可以通过OpenAPI实现数据库管理，账号管理，备份管理，单库上云等功能，后续将支持云数据库MySQL
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.rds.client;

import com.jdcloud.sdk.JdcloudSdkException;
import com.jdcloud.sdk.auth.CredentialsProvider;
import com.jdcloud.sdk.client.Environment;
import com.jdcloud.sdk.client.Jdcloud;
import com.jdcloud.sdk.client.JdcloudClient;
import com.jdcloud.sdk.client.JdcloudValidateException;
import com.jdcloud.sdk.http.HttpRequestConfig;
import com.jdcloud.sdk.service.rds.model.CreateAccountRequest;
import com.jdcloud.sdk.service.rds.model.CreateAccountResponse;
import com.jdcloud.sdk.service.rds.client.CreateAccountExecutor;
import com.jdcloud.sdk.service.rds.model.GrantPrivilegeRequest;
import com.jdcloud.sdk.service.rds.model.GrantPrivilegeResponse;
import com.jdcloud.sdk.service.rds.client.GrantPrivilegeExecutor;
import com.jdcloud.sdk.service.rds.model.CreateDatabaseRequest;
import com.jdcloud.sdk.service.rds.model.CreateDatabaseResponse;
import com.jdcloud.sdk.service.rds.client.CreateDatabaseExecutor;
import com.jdcloud.sdk.service.rds.model.DescribeImportFilesRequest;
import com.jdcloud.sdk.service.rds.model.DescribeImportFilesResponse;
import com.jdcloud.sdk.service.rds.client.DescribeImportFilesExecutor;
import com.jdcloud.sdk.service.rds.model.CreateBackupRequest;
import com.jdcloud.sdk.service.rds.model.CreateBackupResponse;
import com.jdcloud.sdk.service.rds.client.CreateBackupExecutor;
import com.jdcloud.sdk.service.rds.model.DescribeBackupsRequest;
import com.jdcloud.sdk.service.rds.model.DescribeBackupsResponse;
import com.jdcloud.sdk.service.rds.client.DescribeBackupsExecutor;
import com.jdcloud.sdk.service.rds.model.RestoreDatabaseFromFileRequest;
import com.jdcloud.sdk.service.rds.model.RestoreDatabaseFromFileResponse;
import com.jdcloud.sdk.service.rds.client.RestoreDatabaseFromFileExecutor;
import com.jdcloud.sdk.service.rds.model.DeleteDatabaseRequest;
import com.jdcloud.sdk.service.rds.model.DeleteDatabaseResponse;
import com.jdcloud.sdk.service.rds.client.DeleteDatabaseExecutor;
import com.jdcloud.sdk.service.rds.model.ResetPasswordRequest;
import com.jdcloud.sdk.service.rds.model.ResetPasswordResponse;
import com.jdcloud.sdk.service.rds.client.ResetPasswordExecutor;
import com.jdcloud.sdk.service.rds.model.DeleteAccountRequest;
import com.jdcloud.sdk.service.rds.model.DeleteAccountResponse;
import com.jdcloud.sdk.service.rds.client.DeleteAccountExecutor;
import com.jdcloud.sdk.service.rds.model.RestoreDatabaseFromBackupRequest;
import com.jdcloud.sdk.service.rds.model.RestoreDatabaseFromBackupResponse;
import com.jdcloud.sdk.service.rds.client.RestoreDatabaseFromBackupExecutor;
import com.jdcloud.sdk.service.rds.model.DescribeBackupDownloadURLRequest;
import com.jdcloud.sdk.service.rds.model.DescribeBackupDownloadURLResponse;
import com.jdcloud.sdk.service.rds.client.DescribeBackupDownloadURLExecutor;

/**
 * rdsClient
 */
public class RdsClient extends JdcloudClient {

    public final static String ApiVersion = "v1";
    private final static String UserAgentPrefix = "JdcloudSdkJava";
    public final static String ClientVersion = "1.0.0";
    public final static String DefaultEndpoint = "rds.jdcloud-api.com";
    public final static String ServiceName = "rds";
    public final static String UserAgent = UserAgentPrefix + "/" + ClientVersion + " " + ServiceName + "/" + ApiVersion;

    CredentialsProvider credentialsProvider;
    HttpRequestConfig httpRequestConfig;
    Environment environment = new Environment.Builder().endpoint(DefaultEndpoint).build();

    public CredentialsProvider getCredentialsProvider() {
        return credentialsProvider;
    }

    public HttpRequestConfig getHttpRequestConfig() {
        return httpRequestConfig;
    }

    public Environment getEnvironment() {
        return environment;
    }

    public String getUserAgent() {
        return UserAgent;
    }

    public String getServiceName() {
        return ServiceName;
    }

    public String getVersion() {
        return ApiVersion;
    }

    private RdsClient() {

    }

    public static Builder builder() {
        return new DefaultBuilder();
    }


    /**
     * 创建数据库账户
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreateAccountResponse createAccount(CreateAccountRequest request) throws JdcloudSdkException {
        return new CreateAccountExecutor().client(this).execute(request);
    }

    /**
     * 数据库账号授权
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GrantPrivilegeResponse grantPrivilege(GrantPrivilegeRequest request) throws JdcloudSdkException {
        return new GrantPrivilegeExecutor().client(this).execute(request);
    }

    /**
     * 创建数据库
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreateDatabaseResponse createDatabase(CreateDatabaseRequest request) throws JdcloudSdkException {
        return new CreateDatabaseExecutor().client(this).execute(request);
    }

    /**
     * 获取单库上云文件列表
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeImportFilesResponse describeImportFiles(DescribeImportFilesRequest request) throws JdcloudSdkException {
        return new DescribeImportFilesExecutor().client(this).execute(request);
    }

    /**
     * 创建备份
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreateBackupResponse createBackup(CreateBackupRequest request) throws JdcloudSdkException {
        return new CreateBackupExecutor().client(this).execute(request);
    }

    /**
     * 获取备份信息
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeBackupsResponse describeBackups(DescribeBackupsRequest request) throws JdcloudSdkException {
        return new DescribeBackupsExecutor().client(this).execute(request);
    }

    /**
     * 从用户上传的备份文件中恢复SQL Server数据库
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public RestoreDatabaseFromFileResponse restoreDatabaseFromFile(RestoreDatabaseFromFileRequest request) throws JdcloudSdkException {
        return new RestoreDatabaseFromFileExecutor().client(this).execute(request);
    }

    /**
     * 删除数据库
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteDatabaseResponse deleteDatabase(DeleteDatabaseRequest request) throws JdcloudSdkException {
        return new DeleteDatabaseExecutor().client(this).execute(request);
    }

    /**
     * 数据库账号重置密码
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ResetPasswordResponse resetPassword(ResetPasswordRequest request) throws JdcloudSdkException {
        return new ResetPasswordExecutor().client(this).execute(request);
    }

    /**
     * 删除数据库账户
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteAccountResponse deleteAccount(DeleteAccountRequest request) throws JdcloudSdkException {
        return new DeleteAccountExecutor().client(this).execute(request);
    }

    /**
     * 从云数据库SQL Server备份中恢复单个数据库
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public RestoreDatabaseFromBackupResponse restoreDatabaseFromBackup(RestoreDatabaseFromBackupRequest request) throws JdcloudSdkException {
        return new RestoreDatabaseFromBackupExecutor().client(this).execute(request);
    }

    /**
     * 获取备份下载链接
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeBackupDownloadURLResponse describeBackupDownloadURL(DescribeBackupDownloadURLRequest request) throws JdcloudSdkException {
        return new DescribeBackupDownloadURLExecutor().client(this).execute(request);
    }


    public interface Builder {
        public Builder credentialsProvider(CredentialsProvider provider);
        public Builder environment(Environment environment);
        public Builder httpRequestConfig(HttpRequestConfig config);
        public RdsClient build() throws JdcloudSdkException;
    }

    private static class DefaultBuilder implements Builder {

        private RdsClient rdsClient;

        public DefaultBuilder() {
            rdsClient = new RdsClient();
        }

        public DefaultBuilder credentialsProvider(CredentialsProvider provider) {
            rdsClient.credentialsProvider = provider;
            return this;
        }

        public DefaultBuilder httpRequestConfig(HttpRequestConfig config) {
            rdsClient.httpRequestConfig = config;
            return this;
        }

        public RdsClient build() throws JdcloudSdkException {

            if (rdsClient.credentialsProvider == null) {
                //if credentialsProvider not set, try load jdcloud global default  credentials provider
                rdsClient.credentialsProvider = Jdcloud.defaultInstance().getCredentialsProvider();
                if (rdsClient.credentialsProvider == null) {
                    throw new JdcloudValidateException("RdsClient build error: jdcloud credentials provider not set");
                }
            }
            if (rdsClient.httpRequestConfig == null) {
                rdsClient.httpRequestConfig = Jdcloud.defaultInstance().getHttpRequestConfig();
                if (rdsClient.httpRequestConfig == null) {
                    throw new JdcloudValidateException("RdsClient build error: http request config not set");
                }
            }
            return rdsClient;
        }

        public Builder environment(Environment environment) {
            rdsClient.environment = environment;
            return this;
        }
    }
}
