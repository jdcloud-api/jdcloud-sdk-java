/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * 
 *
 * 
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.rds.model;

import java.util.List;
import java.util.ArrayList;
import com.jdcloud.sdk.annotation.Required;
import com.jdcloud.sdk.service.charge.model.ChargeSpec;

/**
 * dBInstanceSpec
 */
public class DBInstanceSpec  implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 实例名，具体规则可参见帮助中心文档:[名称及密码限制](../../../documentation/Database-and-Cache-Service/RDS/Introduction/Restrictions/SQLServer-Restrictions.md)
     */
    private String instanceName;

    /**
     * 实例引擎类型，参见[枚举参数定义](../Enum-Definitions/Enum-Definitions.md)
     * Required:true
     */
    @Required
    private String engine;

    /**
     * 实例引擎版本，参见[枚举参数定义](../Enum-Definitions/Enum-Definitions.md)
     * Required:true
     */
    @Required
    private String engineVersion;

    /**
     * 实例规格代码，可以查看文档[MySQL 实例规格](../Instance-Specifications/Instance-Specifications-MySQL.md)、[SQL Server实例规格](../Instance-Specifications/Instance-Specifications-SQLServer.md)
     * Required:true
     */
    @Required
    private String instanceClass;

    /**
     * 磁盘大小，单位GB，可以查看文档[MySQL 实例规格](../Instance-Specifications/Instance-Specifications-MySQL.md)、[SQL Server实例规格](../Instance-Specifications/Instance-Specifications-SQLServer.md)
     * Required:true
     */
    @Required
    private Integer instanceStorageGB;

    /**
     * 可用区ID， 第一个ID必须为主实例所在的可用区。如两个可用区一样，也需输入两个azId
     * Required:true
     */
    @Required
    
    private List<String> azId;
    /**
     * VPC的ID
     * Required:true
     */
    @Required
    private String vpcId;

    /**
     * 子网ID
     * Required:true
     */
    @Required
    private String subnetId;

    /**
     * 参数组ID, 缺省系统会创建一个默认参数组&lt;br&gt;- 仅支持MySQL
     */
    private String parameterGroup;

    /**
     * 计费规格，包括计费类型，计费周期等
     * Required:true
     */
    @Required
    private ChargeSpec chargeSpec;

    /**
     * 存储类型，参见[枚举参数定义](../Enum-Definitions/Enum-Definitions.md), 缺省值为：LOCAL_SSD&lt;br&gt;- 仅支持MySQL
     */
    private String instanceStorageType;

    /**
     * 应用访问端口，支持的端口范围：1150～5999。MySQL、Percona、MariaDB的默认值为 3306；SQL SQL Server的默认值为1433，不支持5022；PostgreSQL的默认端口号为5432；
     */
    private String instancePort;

    /**
     * 实例数据加密(存储类型为云硬盘才支持数据加密)。false：不加密，true：加密，缺省为false&lt;br&gt;- 仅支持MySQL
     */
    private Boolean storageEncrypted;

    /**
     * 实例的高可用架构。standalone：单机，cluster：主备双机架构，缺省为cluster，multi-replica：三副本&lt;br&gt;- 仅支持SQL Server
     */
    private String instanceType;

    /**
     * 标签信息
     */
    
    private List<Tag> tagSpec;
    /**
     * 资源组id
     */
    private String resourceGroupId;



    /**
     * get 实例名，具体规则可参见帮助中心文档:[名称及密码限制](../../../documentation/Database-and-Cache-Service/RDS/Introduction/Restrictions/SQLServer-Restrictions.md)
     *
     * @return
     */
    public String getInstanceName() {
        return instanceName;
    }

    /**
     * set 实例名，具体规则可参见帮助中心文档:[名称及密码限制](../../../documentation/Database-and-Cache-Service/RDS/Introduction/Restrictions/SQLServer-Restrictions.md)
     *
     * @param instanceName
     */
    public void setInstanceName(String instanceName) {
        this.instanceName = instanceName;
    }


    /**
     * get 实例引擎类型，参见[枚举参数定义](../Enum-Definitions/Enum-Definitions.md)
     *
     * @return
     */
    public String getEngine() {
        return engine;
    }

    /**
     * set 实例引擎类型，参见[枚举参数定义](../Enum-Definitions/Enum-Definitions.md)
     *
     * @param engine
     */
    public void setEngine(String engine) {
        this.engine = engine;
    }


    /**
     * get 实例引擎版本，参见[枚举参数定义](../Enum-Definitions/Enum-Definitions.md)
     *
     * @return
     */
    public String getEngineVersion() {
        return engineVersion;
    }

    /**
     * set 实例引擎版本，参见[枚举参数定义](../Enum-Definitions/Enum-Definitions.md)
     *
     * @param engineVersion
     */
    public void setEngineVersion(String engineVersion) {
        this.engineVersion = engineVersion;
    }


    /**
     * get 实例规格代码，可以查看文档[MySQL 实例规格](../Instance-Specifications/Instance-Specifications-MySQL.md)、[SQL Server实例规格](../Instance-Specifications/Instance-Specifications-SQLServer.md)
     *
     * @return
     */
    public String getInstanceClass() {
        return instanceClass;
    }

    /**
     * set 实例规格代码，可以查看文档[MySQL 实例规格](../Instance-Specifications/Instance-Specifications-MySQL.md)、[SQL Server实例规格](../Instance-Specifications/Instance-Specifications-SQLServer.md)
     *
     * @param instanceClass
     */
    public void setInstanceClass(String instanceClass) {
        this.instanceClass = instanceClass;
    }


    /**
     * get 磁盘大小，单位GB，可以查看文档[MySQL 实例规格](../Instance-Specifications/Instance-Specifications-MySQL.md)、[SQL Server实例规格](../Instance-Specifications/Instance-Specifications-SQLServer.md)
     *
     * @return
     */
    public Integer getInstanceStorageGB() {
        return instanceStorageGB;
    }

    /**
     * set 磁盘大小，单位GB，可以查看文档[MySQL 实例规格](../Instance-Specifications/Instance-Specifications-MySQL.md)、[SQL Server实例规格](../Instance-Specifications/Instance-Specifications-SQLServer.md)
     *
     * @param instanceStorageGB
     */
    public void setInstanceStorageGB(Integer instanceStorageGB) {
        this.instanceStorageGB = instanceStorageGB;
    }


    /**
    * get 可用区ID， 第一个ID必须为主实例所在的可用区。如两个可用区一样，也需输入两个azId
    *
    * @return
    */
    public List<String> getAzId() {
        return azId;
    }

    /**
    * set 可用区ID， 第一个ID必须为主实例所在的可用区。如两个可用区一样，也需输入两个azId
    *
    * @param azId
    */
    public void setAzId(List<String> azId) {
        this.azId = azId;
    }


    /**
     * get VPC的ID
     *
     * @return
     */
    public String getVpcId() {
        return vpcId;
    }

    /**
     * set VPC的ID
     *
     * @param vpcId
     */
    public void setVpcId(String vpcId) {
        this.vpcId = vpcId;
    }


    /**
     * get 子网ID
     *
     * @return
     */
    public String getSubnetId() {
        return subnetId;
    }

    /**
     * set 子网ID
     *
     * @param subnetId
     */
    public void setSubnetId(String subnetId) {
        this.subnetId = subnetId;
    }


    /**
     * get 参数组ID, 缺省系统会创建一个默认参数组&lt;br&gt;- 仅支持MySQL
     *
     * @return
     */
    public String getParameterGroup() {
        return parameterGroup;
    }

    /**
     * set 参数组ID, 缺省系统会创建一个默认参数组&lt;br&gt;- 仅支持MySQL
     *
     * @param parameterGroup
     */
    public void setParameterGroup(String parameterGroup) {
        this.parameterGroup = parameterGroup;
    }


    /**
     * get 计费规格，包括计费类型，计费周期等
     *
     * @return
     */
    public ChargeSpec getChargeSpec() {
        return chargeSpec;
    }

    /**
     * set 计费规格，包括计费类型，计费周期等
     *
     * @param chargeSpec
     */
    public void setChargeSpec(ChargeSpec chargeSpec) {
        this.chargeSpec = chargeSpec;
    }


    /**
     * get 存储类型，参见[枚举参数定义](../Enum-Definitions/Enum-Definitions.md), 缺省值为：LOCAL_SSD&lt;br&gt;- 仅支持MySQL
     *
     * @return
     */
    public String getInstanceStorageType() {
        return instanceStorageType;
    }

    /**
     * set 存储类型，参见[枚举参数定义](../Enum-Definitions/Enum-Definitions.md), 缺省值为：LOCAL_SSD&lt;br&gt;- 仅支持MySQL
     *
     * @param instanceStorageType
     */
    public void setInstanceStorageType(String instanceStorageType) {
        this.instanceStorageType = instanceStorageType;
    }


    /**
     * get 应用访问端口，支持的端口范围：1150～5999。MySQL、Percona、MariaDB的默认值为 3306；SQL SQL Server的默认值为1433，不支持5022；PostgreSQL的默认端口号为5432；
     *
     * @return
     */
    public String getInstancePort() {
        return instancePort;
    }

    /**
     * set 应用访问端口，支持的端口范围：1150～5999。MySQL、Percona、MariaDB的默认值为 3306；SQL SQL Server的默认值为1433，不支持5022；PostgreSQL的默认端口号为5432；
     *
     * @param instancePort
     */
    public void setInstancePort(String instancePort) {
        this.instancePort = instancePort;
    }


    /**
     * get 实例数据加密(存储类型为云硬盘才支持数据加密)。false：不加密，true：加密，缺省为false&lt;br&gt;- 仅支持MySQL
     *
     * @return
     */
    public Boolean getStorageEncrypted() {
        return storageEncrypted;
    }

    /**
     * set 实例数据加密(存储类型为云硬盘才支持数据加密)。false：不加密，true：加密，缺省为false&lt;br&gt;- 仅支持MySQL
     *
     * @param storageEncrypted
     */
    public void setStorageEncrypted(Boolean storageEncrypted) {
        this.storageEncrypted = storageEncrypted;
    }


    /**
     * get 实例的高可用架构。standalone：单机，cluster：主备双机架构，缺省为cluster，multi-replica：三副本&lt;br&gt;- 仅支持SQL Server
     *
     * @return
     */
    public String getInstanceType() {
        return instanceType;
    }

    /**
     * set 实例的高可用架构。standalone：单机，cluster：主备双机架构，缺省为cluster，multi-replica：三副本&lt;br&gt;- 仅支持SQL Server
     *
     * @param instanceType
     */
    public void setInstanceType(String instanceType) {
        this.instanceType = instanceType;
    }


    /**
    * get 标签信息
    *
    * @return
    */
    public List<Tag> getTagSpec() {
        return tagSpec;
    }

    /**
    * set 标签信息
    *
    * @param tagSpec
    */
    public void setTagSpec(List<Tag> tagSpec) {
        this.tagSpec = tagSpec;
    }


    /**
     * get 资源组id
     *
     * @return
     */
    public String getResourceGroupId() {
        return resourceGroupId;
    }

    /**
     * set 资源组id
     *
     * @param resourceGroupId
     */
    public void setResourceGroupId(String resourceGroupId) {
        this.resourceGroupId = resourceGroupId;
    }



    /**
     * set 实例名，具体规则可参见帮助中心文档:[名称及密码限制](../../../documentation/Database-and-Cache-Service/RDS/Introduction/Restrictions/SQLServer-Restrictions.md)
     *
     * @param instanceName
     */
    public DBInstanceSpec instanceName(String instanceName) {
        this.instanceName = instanceName;
        return this;
    }


    /**
     * set 实例引擎类型，参见[枚举参数定义](../Enum-Definitions/Enum-Definitions.md)
     *
     * @param engine
     */
    public DBInstanceSpec engine(String engine) {
        this.engine = engine;
        return this;
    }


    /**
     * set 实例引擎版本，参见[枚举参数定义](../Enum-Definitions/Enum-Definitions.md)
     *
     * @param engineVersion
     */
    public DBInstanceSpec engineVersion(String engineVersion) {
        this.engineVersion = engineVersion;
        return this;
    }


    /**
     * set 实例规格代码，可以查看文档[MySQL 实例规格](../Instance-Specifications/Instance-Specifications-MySQL.md)、[SQL Server实例规格](../Instance-Specifications/Instance-Specifications-SQLServer.md)
     *
     * @param instanceClass
     */
    public DBInstanceSpec instanceClass(String instanceClass) {
        this.instanceClass = instanceClass;
        return this;
    }


    /**
     * set 磁盘大小，单位GB，可以查看文档[MySQL 实例规格](../Instance-Specifications/Instance-Specifications-MySQL.md)、[SQL Server实例规格](../Instance-Specifications/Instance-Specifications-SQLServer.md)
     *
     * @param instanceStorageGB
     */
    public DBInstanceSpec instanceStorageGB(Integer instanceStorageGB) {
        this.instanceStorageGB = instanceStorageGB;
        return this;
    }


    /**
    * set 可用区ID， 第一个ID必须为主实例所在的可用区。如两个可用区一样，也需输入两个azId
    *
    * @param azId
    */
    public DBInstanceSpec azId(List<String> azId) {
        this.azId = azId;
        return this;
    }


    /**
     * set VPC的ID
     *
     * @param vpcId
     */
    public DBInstanceSpec vpcId(String vpcId) {
        this.vpcId = vpcId;
        return this;
    }


    /**
     * set 子网ID
     *
     * @param subnetId
     */
    public DBInstanceSpec subnetId(String subnetId) {
        this.subnetId = subnetId;
        return this;
    }


    /**
     * set 参数组ID, 缺省系统会创建一个默认参数组&lt;br&gt;- 仅支持MySQL
     *
     * @param parameterGroup
     */
    public DBInstanceSpec parameterGroup(String parameterGroup) {
        this.parameterGroup = parameterGroup;
        return this;
    }


    /**
     * set 计费规格，包括计费类型，计费周期等
     *
     * @param chargeSpec
     */
    public DBInstanceSpec chargeSpec(ChargeSpec chargeSpec) {
        this.chargeSpec = chargeSpec;
        return this;
    }


    /**
     * set 存储类型，参见[枚举参数定义](../Enum-Definitions/Enum-Definitions.md), 缺省值为：LOCAL_SSD&lt;br&gt;- 仅支持MySQL
     *
     * @param instanceStorageType
     */
    public DBInstanceSpec instanceStorageType(String instanceStorageType) {
        this.instanceStorageType = instanceStorageType;
        return this;
    }


    /**
     * set 应用访问端口，支持的端口范围：1150～5999。MySQL、Percona、MariaDB的默认值为 3306；SQL SQL Server的默认值为1433，不支持5022；PostgreSQL的默认端口号为5432；
     *
     * @param instancePort
     */
    public DBInstanceSpec instancePort(String instancePort) {
        this.instancePort = instancePort;
        return this;
    }


    /**
     * set 实例数据加密(存储类型为云硬盘才支持数据加密)。false：不加密，true：加密，缺省为false&lt;br&gt;- 仅支持MySQL
     *
     * @param storageEncrypted
     */
    public DBInstanceSpec storageEncrypted(Boolean storageEncrypted) {
        this.storageEncrypted = storageEncrypted;
        return this;
    }


    /**
     * set 实例的高可用架构。standalone：单机，cluster：主备双机架构，缺省为cluster，multi-replica：三副本&lt;br&gt;- 仅支持SQL Server
     *
     * @param instanceType
     */
    public DBInstanceSpec instanceType(String instanceType) {
        this.instanceType = instanceType;
        return this;
    }


    /**
    * set 标签信息
    *
    * @param tagSpec
    */
    public DBInstanceSpec tagSpec(List<Tag> tagSpec) {
        this.tagSpec = tagSpec;
        return this;
    }


    /**
     * set 资源组id
     *
     * @param resourceGroupId
     */
    public DBInstanceSpec resourceGroupId(String resourceGroupId) {
        this.resourceGroupId = resourceGroupId;
        return this;
    }



    /**
     * add item to 可用区ID， 第一个ID必须为主实例所在的可用区。如两个可用区一样，也需输入两个azId
     *
     * @param azId
     */
    public void addAzId(String azId) {
        if (this.azId == null) {
            this.azId = new ArrayList<>();
        }
        this.azId.add(azId);
    }

    /**
     * add item to 标签信息
     *
     * @param tagSpec
     */
    public void addTagSpec(Tag tagSpec) {
        if (this.tagSpec == null) {
            this.tagSpec = new ArrayList<>();
        }
        this.tagSpec.add(tagSpec);
    }
}