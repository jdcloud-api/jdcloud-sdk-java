/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 实例管理
 * 实例管理相关接口
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.rds.model;

import java.util.List;
import java.util.ArrayList;
import com.jdcloud.sdk.service.JdcloudResult;

/**
 * 查看RDS实例备份策略。根据数据库类型的不同，支持的备份策略也略有差异，具体请看返回参数中的详细说明
 */
public class DescribeBackupPolicyResult extends JdcloudResult implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 自动备份开始时间窗口，范围00:00-23:59，时间范围差不得小于30分钟。&lt;br&gt;例如：00:00-01:00，表示0点到1点开始进行数据库自动备份，备份完成时间则跟实例大小有关，不一定在这个时间范围中
     */
    private String startWindow;

    /**
     * 自动备份保留周期，单位天，默认为7
     */
    private Integer retentionPeriod;

    /**
     * binlog本地保留周期，单位小时，默认为24
     */
    private Integer binlogRetentionPeriod;

    /**
     * binlog本地占用空间上限，单位%，默认为30
     */
    private Integer binlogUsageLimit;

    /**
     * 空间保护是否开启，开启后，磁盘剩余空间小于20%或剩余空间不足5GB时，将自动清理本地binlog。开启：on，关闭：off，默认为off &lt;br&gt;- 仅支持MySQL
     */
    private String binlogSpaceProtection;

    /**
     * 自动备份循环模式&lt;br&gt;1:表示每天都是全量备份&lt;br&gt;2:表示自动备份按照全量、增量、增量这样的方式进行，例如第1天是全量备份，第2、3天是增量备份；第4天又是全量备份，以此类推.&lt;br&gt; - 仅支持 SQL Server
     */
    private Integer cycleMode;

    /**
     * 是否备份binlog，默认为true&lt;br&gt;true:表示备份&lt;br&gt;false:表示不备份&lt;br&gt; - **仅支持 MySQL，Percona，MariaDB
     */
    private String backupBinlog;

    /**
     * 是否开启增强备份模式&lt;br&gt;true:当前实例已开启增强备份模式&lt;br&gt;false或为空：表示当前实例未开启增强备份模式&lt;br&gt; - **仅支持 SQL Server
     */
    private String enhancedBackup;

    /**
     * 已删除实例的备份保留策略,取值：&lt;br&gt;• CreateAndKeep：删除时新创建备份并保留&lt;br&gt;• All：全部保留&lt;br&gt;• None：不保留&lt;br&gt;- 仅支持 MySQL，Percona，MariaDB&lt;br&gt; - **仅支持 SQL Server
     */
    private String releasedKeepPolicy;

    /**
     * 备份周期
     */
    
    private List<String> backupPeriod;
    /**
     * 本地binlog最大保留数量，默认为-1，不限保留个数。
     */
    private Integer binlogRetentionNumber;



    /**
     * get 自动备份开始时间窗口，范围00:00-23:59，时间范围差不得小于30分钟。&lt;br&gt;例如：00:00-01:00，表示0点到1点开始进行数据库自动备份，备份完成时间则跟实例大小有关，不一定在这个时间范围中
     *
     * @return
     */
    public String getStartWindow() {
        return startWindow;
    }

    /**
     * set 自动备份开始时间窗口，范围00:00-23:59，时间范围差不得小于30分钟。&lt;br&gt;例如：00:00-01:00，表示0点到1点开始进行数据库自动备份，备份完成时间则跟实例大小有关，不一定在这个时间范围中
     *
     * @param startWindow
     */
    public void setStartWindow(String startWindow) {
        this.startWindow = startWindow;
    }


    /**
     * get 自动备份保留周期，单位天，默认为7
     *
     * @return
     */
    public Integer getRetentionPeriod() {
        return retentionPeriod;
    }

    /**
     * set 自动备份保留周期，单位天，默认为7
     *
     * @param retentionPeriod
     */
    public void setRetentionPeriod(Integer retentionPeriod) {
        this.retentionPeriod = retentionPeriod;
    }


    /**
     * get binlog本地保留周期，单位小时，默认为24
     *
     * @return
     */
    public Integer getBinlogRetentionPeriod() {
        return binlogRetentionPeriod;
    }

    /**
     * set binlog本地保留周期，单位小时，默认为24
     *
     * @param binlogRetentionPeriod
     */
    public void setBinlogRetentionPeriod(Integer binlogRetentionPeriod) {
        this.binlogRetentionPeriod = binlogRetentionPeriod;
    }


    /**
     * get binlog本地占用空间上限，单位%，默认为30
     *
     * @return
     */
    public Integer getBinlogUsageLimit() {
        return binlogUsageLimit;
    }

    /**
     * set binlog本地占用空间上限，单位%，默认为30
     *
     * @param binlogUsageLimit
     */
    public void setBinlogUsageLimit(Integer binlogUsageLimit) {
        this.binlogUsageLimit = binlogUsageLimit;
    }


    /**
     * get 空间保护是否开启，开启后，磁盘剩余空间小于20%或剩余空间不足5GB时，将自动清理本地binlog。开启：on，关闭：off，默认为off &lt;br&gt;- 仅支持MySQL
     *
     * @return
     */
    public String getBinlogSpaceProtection() {
        return binlogSpaceProtection;
    }

    /**
     * set 空间保护是否开启，开启后，磁盘剩余空间小于20%或剩余空间不足5GB时，将自动清理本地binlog。开启：on，关闭：off，默认为off &lt;br&gt;- 仅支持MySQL
     *
     * @param binlogSpaceProtection
     */
    public void setBinlogSpaceProtection(String binlogSpaceProtection) {
        this.binlogSpaceProtection = binlogSpaceProtection;
    }


    /**
     * get 自动备份循环模式&lt;br&gt;1:表示每天都是全量备份&lt;br&gt;2:表示自动备份按照全量、增量、增量这样的方式进行，例如第1天是全量备份，第2、3天是增量备份；第4天又是全量备份，以此类推.&lt;br&gt; - 仅支持 SQL Server
     *
     * @return
     */
    public Integer getCycleMode() {
        return cycleMode;
    }

    /**
     * set 自动备份循环模式&lt;br&gt;1:表示每天都是全量备份&lt;br&gt;2:表示自动备份按照全量、增量、增量这样的方式进行，例如第1天是全量备份，第2、3天是增量备份；第4天又是全量备份，以此类推.&lt;br&gt; - 仅支持 SQL Server
     *
     * @param cycleMode
     */
    public void setCycleMode(Integer cycleMode) {
        this.cycleMode = cycleMode;
    }


    /**
     * get 是否备份binlog，默认为true&lt;br&gt;true:表示备份&lt;br&gt;false:表示不备份&lt;br&gt; - **仅支持 MySQL，Percona，MariaDB
     *
     * @return
     */
    public String getBackupBinlog() {
        return backupBinlog;
    }

    /**
     * set 是否备份binlog，默认为true&lt;br&gt;true:表示备份&lt;br&gt;false:表示不备份&lt;br&gt; - **仅支持 MySQL，Percona，MariaDB
     *
     * @param backupBinlog
     */
    public void setBackupBinlog(String backupBinlog) {
        this.backupBinlog = backupBinlog;
    }


    /**
     * get 是否开启增强备份模式&lt;br&gt;true:当前实例已开启增强备份模式&lt;br&gt;false或为空：表示当前实例未开启增强备份模式&lt;br&gt; - **仅支持 SQL Server
     *
     * @return
     */
    public String getEnhancedBackup() {
        return enhancedBackup;
    }

    /**
     * set 是否开启增强备份模式&lt;br&gt;true:当前实例已开启增强备份模式&lt;br&gt;false或为空：表示当前实例未开启增强备份模式&lt;br&gt; - **仅支持 SQL Server
     *
     * @param enhancedBackup
     */
    public void setEnhancedBackup(String enhancedBackup) {
        this.enhancedBackup = enhancedBackup;
    }


    /**
     * get 已删除实例的备份保留策略,取值：&lt;br&gt;• CreateAndKeep：删除时新创建备份并保留&lt;br&gt;• All：全部保留&lt;br&gt;• None：不保留&lt;br&gt;- 仅支持 MySQL，Percona，MariaDB&lt;br&gt; - **仅支持 SQL Server
     *
     * @return
     */
    public String getReleasedKeepPolicy() {
        return releasedKeepPolicy;
    }

    /**
     * set 已删除实例的备份保留策略,取值：&lt;br&gt;• CreateAndKeep：删除时新创建备份并保留&lt;br&gt;• All：全部保留&lt;br&gt;• None：不保留&lt;br&gt;- 仅支持 MySQL，Percona，MariaDB&lt;br&gt; - **仅支持 SQL Server
     *
     * @param releasedKeepPolicy
     */
    public void setReleasedKeepPolicy(String releasedKeepPolicy) {
        this.releasedKeepPolicy = releasedKeepPolicy;
    }


    /**
    * get 备份周期
    *
    * @return
    */
    public List<String> getBackupPeriod() {
        return backupPeriod;
    }

    /**
    * set 备份周期
    *
    * @param backupPeriod
    */
    public void setBackupPeriod(List<String> backupPeriod) {
        this.backupPeriod = backupPeriod;
    }


    /**
     * get 本地binlog最大保留数量，默认为-1，不限保留个数。
     *
     * @return
     */
    public Integer getBinlogRetentionNumber() {
        return binlogRetentionNumber;
    }

    /**
     * set 本地binlog最大保留数量，默认为-1，不限保留个数。
     *
     * @param binlogRetentionNumber
     */
    public void setBinlogRetentionNumber(Integer binlogRetentionNumber) {
        this.binlogRetentionNumber = binlogRetentionNumber;
    }



    /**
     * set 自动备份开始时间窗口，范围00:00-23:59，时间范围差不得小于30分钟。&lt;br&gt;例如：00:00-01:00，表示0点到1点开始进行数据库自动备份，备份完成时间则跟实例大小有关，不一定在这个时间范围中
     *
     * @param startWindow
     */
    public DescribeBackupPolicyResult startWindow(String startWindow) {
        this.startWindow = startWindow;
        return this;
    }


    /**
     * set 自动备份保留周期，单位天，默认为7
     *
     * @param retentionPeriod
     */
    public DescribeBackupPolicyResult retentionPeriod(Integer retentionPeriod) {
        this.retentionPeriod = retentionPeriod;
        return this;
    }


    /**
     * set binlog本地保留周期，单位小时，默认为24
     *
     * @param binlogRetentionPeriod
     */
    public DescribeBackupPolicyResult binlogRetentionPeriod(Integer binlogRetentionPeriod) {
        this.binlogRetentionPeriod = binlogRetentionPeriod;
        return this;
    }


    /**
     * set binlog本地占用空间上限，单位%，默认为30
     *
     * @param binlogUsageLimit
     */
    public DescribeBackupPolicyResult binlogUsageLimit(Integer binlogUsageLimit) {
        this.binlogUsageLimit = binlogUsageLimit;
        return this;
    }


    /**
     * set 空间保护是否开启，开启后，磁盘剩余空间小于20%或剩余空间不足5GB时，将自动清理本地binlog。开启：on，关闭：off，默认为off &lt;br&gt;- 仅支持MySQL
     *
     * @param binlogSpaceProtection
     */
    public DescribeBackupPolicyResult binlogSpaceProtection(String binlogSpaceProtection) {
        this.binlogSpaceProtection = binlogSpaceProtection;
        return this;
    }


    /**
     * set 自动备份循环模式&lt;br&gt;1:表示每天都是全量备份&lt;br&gt;2:表示自动备份按照全量、增量、增量这样的方式进行，例如第1天是全量备份，第2、3天是增量备份；第4天又是全量备份，以此类推.&lt;br&gt; - 仅支持 SQL Server
     *
     * @param cycleMode
     */
    public DescribeBackupPolicyResult cycleMode(Integer cycleMode) {
        this.cycleMode = cycleMode;
        return this;
    }


    /**
     * set 是否备份binlog，默认为true&lt;br&gt;true:表示备份&lt;br&gt;false:表示不备份&lt;br&gt; - **仅支持 MySQL，Percona，MariaDB
     *
     * @param backupBinlog
     */
    public DescribeBackupPolicyResult backupBinlog(String backupBinlog) {
        this.backupBinlog = backupBinlog;
        return this;
    }


    /**
     * set 是否开启增强备份模式&lt;br&gt;true:当前实例已开启增强备份模式&lt;br&gt;false或为空：表示当前实例未开启增强备份模式&lt;br&gt; - **仅支持 SQL Server
     *
     * @param enhancedBackup
     */
    public DescribeBackupPolicyResult enhancedBackup(String enhancedBackup) {
        this.enhancedBackup = enhancedBackup;
        return this;
    }


    /**
     * set 已删除实例的备份保留策略,取值：&lt;br&gt;• CreateAndKeep：删除时新创建备份并保留&lt;br&gt;• All：全部保留&lt;br&gt;• None：不保留&lt;br&gt;- 仅支持 MySQL，Percona，MariaDB&lt;br&gt; - **仅支持 SQL Server
     *
     * @param releasedKeepPolicy
     */
    public DescribeBackupPolicyResult releasedKeepPolicy(String releasedKeepPolicy) {
        this.releasedKeepPolicy = releasedKeepPolicy;
        return this;
    }


    /**
    * set 备份周期
    *
    * @param backupPeriod
    */
    public DescribeBackupPolicyResult backupPeriod(List<String> backupPeriod) {
        this.backupPeriod = backupPeriod;
        return this;
    }


    /**
     * set 本地binlog最大保留数量，默认为-1，不限保留个数。
     *
     * @param binlogRetentionNumber
     */
    public DescribeBackupPolicyResult binlogRetentionNumber(Integer binlogRetentionNumber) {
        this.binlogRetentionNumber = binlogRetentionNumber;
        return this;
    }



    /**
     * add item to 备份周期
     *
     * @param backupPeriod
     */
    public void addBackupPeriod(String backupPeriod) {
        if (this.backupPeriod == null) {
            this.backupPeriod = new ArrayList<>();
        }
        this.backupPeriod.add(backupPeriod);
    }
}