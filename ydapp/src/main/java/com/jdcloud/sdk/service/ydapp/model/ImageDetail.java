/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * 
 *
 * 
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.ydapp.model;

import java.util.List;
import java.util.ArrayList;

/**
 * 容器镜像详细信息
 */
public class ImageDetail  implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 镜像摘要，E.g.，sha256:e5785cb0c62436f0aaa95354a056f1e9db97a
     */
    private String imageDigest;

    /**
     * 镜像推送时间，E.g.，&#39;2024-08-23 16:29:41&#39;
     */
    private String imagePushedAt;

    /**
     * image在repository中的大小。从Docker 1.9之后的版本, Docker client会压缩镜像层数据再push到V2版本的Docker registry。
docker image命令显示的是解压后的镜像大小，因此会比DescribeImages接口返回的镜像大小会大很多，E.g.，156.7

     */
    private Double imageSizeMB;

    /**
     * 镜像标签列表，即镜像版本列表，E.g.，[&#39;latest&#39;, &#39;v1.0.0&#39;, &#39;stable&#39;]
     */
    
    private List<String> imageTags;
    /**
     * 最后拉取时间，E.g.，&#39;2024-10-25 14:24:56&#39;
     */
    private String lastPullAt;

    /**
     * 镜像仓库名称，E.g.，e5785cb0c62436f05f17e1e
     */
    private String registryName;

    /**
     * 镜像仓库路径，E.g.，app-62436f05f17
     */
    private String repositoryName;

    /**
     * 总拉取次数，E.g.，66
     */
    private Integer totalPullTimes;



    /**
     * get 镜像摘要，E.g.，sha256:e5785cb0c62436f0aaa95354a056f1e9db97a
     *
     * @return
     */
    public String getImageDigest() {
        return imageDigest;
    }

    /**
     * set 镜像摘要，E.g.，sha256:e5785cb0c62436f0aaa95354a056f1e9db97a
     *
     * @param imageDigest
     */
    public void setImageDigest(String imageDigest) {
        this.imageDigest = imageDigest;
    }


    /**
     * get 镜像推送时间，E.g.，&#39;2024-08-23 16:29:41&#39;
     *
     * @return
     */
    public String getImagePushedAt() {
        return imagePushedAt;
    }

    /**
     * set 镜像推送时间，E.g.，&#39;2024-08-23 16:29:41&#39;
     *
     * @param imagePushedAt
     */
    public void setImagePushedAt(String imagePushedAt) {
        this.imagePushedAt = imagePushedAt;
    }


    /**
     * get image在repository中的大小。从Docker 1.9之后的版本, Docker client会压缩镜像层数据再push到V2版本的Docker registry。
docker image命令显示的是解压后的镜像大小，因此会比DescribeImages接口返回的镜像大小会大很多，E.g.，156.7

     *
     * @return
     */
    public Double getImageSizeMB() {
        return imageSizeMB;
    }

    /**
     * set image在repository中的大小。从Docker 1.9之后的版本, Docker client会压缩镜像层数据再push到V2版本的Docker registry。
docker image命令显示的是解压后的镜像大小，因此会比DescribeImages接口返回的镜像大小会大很多，E.g.，156.7

     *
     * @param imageSizeMB
     */
    public void setImageSizeMB(Double imageSizeMB) {
        this.imageSizeMB = imageSizeMB;
    }


    /**
    * get 镜像标签列表，即镜像版本列表，E.g.，[&#39;latest&#39;, &#39;v1.0.0&#39;, &#39;stable&#39;]
    *
    * @return
    */
    public List<String> getImageTags() {
        return imageTags;
    }

    /**
    * set 镜像标签列表，即镜像版本列表，E.g.，[&#39;latest&#39;, &#39;v1.0.0&#39;, &#39;stable&#39;]
    *
    * @param imageTags
    */
    public void setImageTags(List<String> imageTags) {
        this.imageTags = imageTags;
    }


    /**
     * get 最后拉取时间，E.g.，&#39;2024-10-25 14:24:56&#39;
     *
     * @return
     */
    public String getLastPullAt() {
        return lastPullAt;
    }

    /**
     * set 最后拉取时间，E.g.，&#39;2024-10-25 14:24:56&#39;
     *
     * @param lastPullAt
     */
    public void setLastPullAt(String lastPullAt) {
        this.lastPullAt = lastPullAt;
    }


    /**
     * get 镜像仓库名称，E.g.，e5785cb0c62436f05f17e1e
     *
     * @return
     */
    public String getRegistryName() {
        return registryName;
    }

    /**
     * set 镜像仓库名称，E.g.，e5785cb0c62436f05f17e1e
     *
     * @param registryName
     */
    public void setRegistryName(String registryName) {
        this.registryName = registryName;
    }


    /**
     * get 镜像仓库路径，E.g.，app-62436f05f17
     *
     * @return
     */
    public String getRepositoryName() {
        return repositoryName;
    }

    /**
     * set 镜像仓库路径，E.g.，app-62436f05f17
     *
     * @param repositoryName
     */
    public void setRepositoryName(String repositoryName) {
        this.repositoryName = repositoryName;
    }


    /**
     * get 总拉取次数，E.g.，66
     *
     * @return
     */
    public Integer getTotalPullTimes() {
        return totalPullTimes;
    }

    /**
     * set 总拉取次数，E.g.，66
     *
     * @param totalPullTimes
     */
    public void setTotalPullTimes(Integer totalPullTimes) {
        this.totalPullTimes = totalPullTimes;
    }



    /**
     * set 镜像摘要，E.g.，sha256:e5785cb0c62436f0aaa95354a056f1e9db97a
     *
     * @param imageDigest
     */
    public ImageDetail imageDigest(String imageDigest) {
        this.imageDigest = imageDigest;
        return this;
    }


    /**
     * set 镜像推送时间，E.g.，&#39;2024-08-23 16:29:41&#39;
     *
     * @param imagePushedAt
     */
    public ImageDetail imagePushedAt(String imagePushedAt) {
        this.imagePushedAt = imagePushedAt;
        return this;
    }


    /**
     * set image在repository中的大小。从Docker 1.9之后的版本, Docker client会压缩镜像层数据再push到V2版本的Docker registry。
docker image命令显示的是解压后的镜像大小，因此会比DescribeImages接口返回的镜像大小会大很多，E.g.，156.7

     *
     * @param imageSizeMB
     */
    public ImageDetail imageSizeMB(Double imageSizeMB) {
        this.imageSizeMB = imageSizeMB;
        return this;
    }


    /**
    * set 镜像标签列表，即镜像版本列表，E.g.，[&#39;latest&#39;, &#39;v1.0.0&#39;, &#39;stable&#39;]
    *
    * @param imageTags
    */
    public ImageDetail imageTags(List<String> imageTags) {
        this.imageTags = imageTags;
        return this;
    }


    /**
     * set 最后拉取时间，E.g.，&#39;2024-10-25 14:24:56&#39;
     *
     * @param lastPullAt
     */
    public ImageDetail lastPullAt(String lastPullAt) {
        this.lastPullAt = lastPullAt;
        return this;
    }


    /**
     * set 镜像仓库名称，E.g.，e5785cb0c62436f05f17e1e
     *
     * @param registryName
     */
    public ImageDetail registryName(String registryName) {
        this.registryName = registryName;
        return this;
    }


    /**
     * set 镜像仓库路径，E.g.，app-62436f05f17
     *
     * @param repositoryName
     */
    public ImageDetail repositoryName(String repositoryName) {
        this.repositoryName = repositoryName;
        return this;
    }


    /**
     * set 总拉取次数，E.g.，66
     *
     * @param totalPullTimes
     */
    public ImageDetail totalPullTimes(Integer totalPullTimes) {
        this.totalPullTimes = totalPullTimes;
        return this;
    }



    /**
     * add item to 镜像标签列表，即镜像版本列表，E.g.，[&#39;latest&#39;, &#39;v1.0.0&#39;, &#39;stable&#39;]
     *
     * @param imageTag
     */
    public void addImageTag(String imageTag) {
        if (this.imageTags == null) {
            this.imageTags = new ArrayList<>();
        }
        this.imageTags.add(imageTag);
    }
}