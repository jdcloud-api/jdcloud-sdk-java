/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * 
 *
 * 
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.ydapp.model;


/**
 * 部署信息
 */
public class Deployment  implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 最大停止服务容器, 按照设置比例停止旧版本容器，用于保证可用容器比例，比例越高升级的越快。范围：0-100，，E.g.，10
     */
    private Integer concurrency;

    /**
     * 镜像类型，可以为空，默认为custom，可选属性为：standard、custom，E.g.，custom
     */
    private String imageType;

    /**
     * 镜像版本信息，不能为空，镜像列表接口返回参数 imageDetail 的属性 imageTags 的值，E.g.，v1.0.0
     */
    private String imageVersion;

    /**
     * 可额外创建容器, 按照设置比例创建新版本容器用于旧版本容器，比例越高升级的越快，临时占用的集群资源越高。范围：0-100，E.g.，10
     */
    private Integer maxSurge;

    /**
     * 部署的容器数量，E.g.，3
     */
    private Integer podCount;



    /**
     * get 最大停止服务容器, 按照设置比例停止旧版本容器，用于保证可用容器比例，比例越高升级的越快。范围：0-100，，E.g.，10
     *
     * @return
     */
    public Integer getConcurrency() {
        return concurrency;
    }

    /**
     * set 最大停止服务容器, 按照设置比例停止旧版本容器，用于保证可用容器比例，比例越高升级的越快。范围：0-100，，E.g.，10
     *
     * @param concurrency
     */
    public void setConcurrency(Integer concurrency) {
        this.concurrency = concurrency;
    }


    /**
     * get 镜像类型，可以为空，默认为custom，可选属性为：standard、custom，E.g.，custom
     *
     * @return
     */
    public String getImageType() {
        return imageType;
    }

    /**
     * set 镜像类型，可以为空，默认为custom，可选属性为：standard、custom，E.g.，custom
     *
     * @param imageType
     */
    public void setImageType(String imageType) {
        this.imageType = imageType;
    }


    /**
     * get 镜像版本信息，不能为空，镜像列表接口返回参数 imageDetail 的属性 imageTags 的值，E.g.，v1.0.0
     *
     * @return
     */
    public String getImageVersion() {
        return imageVersion;
    }

    /**
     * set 镜像版本信息，不能为空，镜像列表接口返回参数 imageDetail 的属性 imageTags 的值，E.g.，v1.0.0
     *
     * @param imageVersion
     */
    public void setImageVersion(String imageVersion) {
        this.imageVersion = imageVersion;
    }


    /**
     * get 可额外创建容器, 按照设置比例创建新版本容器用于旧版本容器，比例越高升级的越快，临时占用的集群资源越高。范围：0-100，E.g.，10
     *
     * @return
     */
    public Integer getMaxSurge() {
        return maxSurge;
    }

    /**
     * set 可额外创建容器, 按照设置比例创建新版本容器用于旧版本容器，比例越高升级的越快，临时占用的集群资源越高。范围：0-100，E.g.，10
     *
     * @param maxSurge
     */
    public void setMaxSurge(Integer maxSurge) {
        this.maxSurge = maxSurge;
    }


    /**
     * get 部署的容器数量，E.g.，3
     *
     * @return
     */
    public Integer getPodCount() {
        return podCount;
    }

    /**
     * set 部署的容器数量，E.g.，3
     *
     * @param podCount
     */
    public void setPodCount(Integer podCount) {
        this.podCount = podCount;
    }



    /**
     * set 最大停止服务容器, 按照设置比例停止旧版本容器，用于保证可用容器比例，比例越高升级的越快。范围：0-100，，E.g.，10
     *
     * @param concurrency
     */
    public Deployment concurrency(Integer concurrency) {
        this.concurrency = concurrency;
        return this;
    }


    /**
     * set 镜像类型，可以为空，默认为custom，可选属性为：standard、custom，E.g.，custom
     *
     * @param imageType
     */
    public Deployment imageType(String imageType) {
        this.imageType = imageType;
        return this;
    }


    /**
     * set 镜像版本信息，不能为空，镜像列表接口返回参数 imageDetail 的属性 imageTags 的值，E.g.，v1.0.0
     *
     * @param imageVersion
     */
    public Deployment imageVersion(String imageVersion) {
        this.imageVersion = imageVersion;
        return this;
    }


    /**
     * set 可额外创建容器, 按照设置比例创建新版本容器用于旧版本容器，比例越高升级的越快，临时占用的集群资源越高。范围：0-100，E.g.，10
     *
     * @param maxSurge
     */
    public Deployment maxSurge(Integer maxSurge) {
        this.maxSurge = maxSurge;
        return this;
    }


    /**
     * set 部署的容器数量，E.g.，3
     *
     * @param podCount
     */
    public Deployment podCount(Integer podCount) {
        this.podCount = podCount;
        return this;
    }


}