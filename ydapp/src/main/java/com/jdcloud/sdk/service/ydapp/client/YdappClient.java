/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 云鼎应用管理平台openAPI
 * 云鼎应用管理平台 openAPI 相关接口
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.ydapp.client;

import com.jdcloud.sdk.JdcloudSdkException;
import com.jdcloud.sdk.auth.CredentialsProvider;
import com.jdcloud.sdk.client.Environment;
import com.jdcloud.sdk.client.Jdcloud;
import com.jdcloud.sdk.client.JdcloudClient;
import com.jdcloud.sdk.client.JdcloudValidateException;
import com.jdcloud.sdk.http.HttpRequestConfig;
import com.jdcloud.sdk.service.ydapp.model.DescribeCustomRegistryTokenRequest;
import com.jdcloud.sdk.service.ydapp.model.DescribeCustomRegistryTokenResponse;
import com.jdcloud.sdk.service.ydapp.client.DescribeCustomRegistryTokenExecutor;
import com.jdcloud.sdk.service.ydapp.model.DescribeDeployTaskRequest;
import com.jdcloud.sdk.service.ydapp.model.DescribeDeployTaskResponse;
import com.jdcloud.sdk.service.ydapp.client.DescribeDeployTaskExecutor;
import com.jdcloud.sdk.service.ydapp.model.DescribeGroupsRequest;
import com.jdcloud.sdk.service.ydapp.model.DescribeGroupsResponse;
import com.jdcloud.sdk.service.ydapp.client.DescribeGroupsExecutor;
import com.jdcloud.sdk.service.ydapp.model.DescribeAppsRequest;
import com.jdcloud.sdk.service.ydapp.model.DescribeAppsResponse;
import com.jdcloud.sdk.service.ydapp.client.DescribeAppsExecutor;
import com.jdcloud.sdk.service.ydapp.model.DeployRequest;
import com.jdcloud.sdk.service.ydapp.model.DeployResponse;
import com.jdcloud.sdk.service.ydapp.client.DeployExecutor;
import com.jdcloud.sdk.service.ydapp.model.DeleteCustomImageRequest;
import com.jdcloud.sdk.service.ydapp.model.DeleteCustomImageResponse;
import com.jdcloud.sdk.service.ydapp.client.DeleteCustomImageExecutor;
import com.jdcloud.sdk.service.ydapp.model.DescribeCustomImagesRequest;
import com.jdcloud.sdk.service.ydapp.model.DescribeCustomImagesResponse;
import com.jdcloud.sdk.service.ydapp.client.DescribeCustomImagesExecutor;
import com.jdcloud.sdk.service.ydapp.model.StopDeployTaskRequest;
import com.jdcloud.sdk.service.ydapp.model.StopDeployTaskResponse;
import com.jdcloud.sdk.service.ydapp.client.StopDeployTaskExecutor;

/**
 * ydappClient
 */
public class YdappClient extends JdcloudClient {

    public final static String ApiVersion = "v1";
    private final static String UserAgentPrefix = "JdcloudSdkJava";
    public final static String ClientVersion = "1.2.11";
    public final static String DefaultEndpoint = "ydapp.jdcloud-api.com";
    public final static String ServiceName = "ydapp";
    public final static String UserAgent = UserAgentPrefix + "/" + ClientVersion + " " + ServiceName + "/" + ApiVersion;

    CredentialsProvider credentialsProvider;
    HttpRequestConfig httpRequestConfig;
    Environment environment = new Environment.Builder().endpoint(DefaultEndpoint).build();

    public CredentialsProvider getCredentialsProvider() {
        return credentialsProvider;
    }

    public HttpRequestConfig getHttpRequestConfig() {
        return httpRequestConfig;
    }

    public Environment getEnvironment() {
        return environment;
    }

    public String getUserAgent() {
        return UserAgent;
    }

    public String getServiceName() {
        return ServiceName;
    }

    public String getVersion() {
        return ApiVersion;
    }

    private YdappClient() {

    }

    public static Builder builder() {
        return new DefaultBuilder();
    }


    /**
     * &lt;p&gt;申请6小时有效期的令牌。 使用&lt;code&gt;docker&lt;/code&gt; CLI push和pull镜像。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;authorizationToken&lt;/code&gt;为每个registry返回一个base64编码的字符串，解码后&lt;code&gt;docker login&lt;/code&gt;命令
可完成指定registry的鉴权。&lt;/p&gt;

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeCustomRegistryTokenResponse describeCustomRegistryToken(DescribeCustomRegistryTokenRequest request) throws JdcloudSdkException {
        return new DescribeCustomRegistryTokenExecutor().client(this).execute(request);
    }

    /**
     * 根据应用ID、分组ID和部署ID查询指定的部署任务详情
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeDeployTaskResponse describeDeployTask(DescribeDeployTaskRequest request) throws JdcloudSdkException {
        return new DescribeDeployTaskExecutor().client(this).execute(request);
    }

    /**
     * 分页获取指定应用下的应用组列表
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeGroupsResponse describeGroups(DescribeGroupsRequest request) throws JdcloudSdkException {
        return new DescribeGroupsExecutor().client(this).execute(request);
    }

    /**
     * 分页获取应用信息列表
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeAppsResponse describeApps(DescribeAppsRequest request) throws JdcloudSdkException {
        return new DescribeAppsExecutor().client(this).execute(request);
    }

    /**
     * 创建新的部署任务，支持自定义镜像和标准镜像的部署
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeployResponse deploy(DeployRequest request) throws JdcloudSdkException {
        return new DeployExecutor().client(this).execute(request);
    }

    /**
     * 根据镜像摘要删除指定的镜像
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteCustomImageResponse deleteCustomImage(DeleteCustomImageRequest request) throws JdcloudSdkException {
        return new DeleteCustomImageExecutor().client(this).execute(request);
    }

    /**
     * 支持分页查询和版本过滤的镜像列表获取
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeCustomImagesResponse describeCustomImages(DescribeCustomImagesRequest request) throws JdcloudSdkException {
        return new DescribeCustomImagesExecutor().client(this).execute(request);
    }

    /**
     * 停止指定的部署任务执行
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public StopDeployTaskResponse stopDeployTask(StopDeployTaskRequest request) throws JdcloudSdkException {
        return new StopDeployTaskExecutor().client(this).execute(request);
    }


    public interface Builder {
        public Builder credentialsProvider(CredentialsProvider provider);
        public Builder environment(Environment environment);
        public Builder httpRequestConfig(HttpRequestConfig config);
        public YdappClient build() throws JdcloudSdkException;
    }

    private static class DefaultBuilder implements Builder {

        private YdappClient ydappClient;

        public DefaultBuilder() {
            ydappClient = new YdappClient();
        }

        public DefaultBuilder credentialsProvider(CredentialsProvider provider) {
            ydappClient.credentialsProvider = provider;
            return this;
        }

        public DefaultBuilder httpRequestConfig(HttpRequestConfig config) {
            ydappClient.httpRequestConfig = config;
            return this;
        }

        public YdappClient build() throws JdcloudSdkException {

            if (ydappClient.credentialsProvider == null) {
                //if credentialsProvider not set, try load jdcloud global default  credentials provider
                ydappClient.credentialsProvider = Jdcloud.defaultInstance().getCredentialsProvider();
                if (ydappClient.credentialsProvider == null) {
                    throw new JdcloudValidateException("YdappClient build error: jdcloud credentials provider not set");
                }
            }
            if (ydappClient.httpRequestConfig == null) {
                ydappClient.httpRequestConfig = Jdcloud.defaultInstance().getHttpRequestConfig();
                if (ydappClient.httpRequestConfig == null) {
                    throw new JdcloudValidateException("YdappClient build error: http request config not set");
                }
            }
            return ydappClient;
        }

        public Builder environment(Environment environment) {
            ydappClient.environment = environment;
            return this;
        }
    }
}
