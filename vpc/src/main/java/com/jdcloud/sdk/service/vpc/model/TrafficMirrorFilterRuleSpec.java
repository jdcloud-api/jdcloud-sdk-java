/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * 
 *
 * 
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.vpc.model;

import com.jdcloud.sdk.annotation.Required;

/**
 * trafficMirrorFilterRuleSpec
 */
public class TrafficMirrorFilterRuleSpec  implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 规则方向ingress为入站、egress为出站
     * Required:true
     */
    @Required
    private String direction;

    /**
     * 协议：ICMP，ICMPv6，TCP，UDP，ALL：表示选择所有协议和所有端口；TCP和UDP时需要输入Port
     * Required:true
     */
    @Required
    private String protocol;

    /**
     * 访问控制策略：accept:接受，drop：拒绝
     * Required:true
     */
    @Required
    private String action;

    /**
     * 规则优先级1~32768  （值越小优先级越高），相同direction内的优先级不能相同
     * Required:true
     */
    @Required
    private Number priority;

    /**
     * 规则作用的源IP的CIDR，输入格式为x.x.x.x/x，合法的IPv4、IPv6地址段
     * Required:true
     */
    @Required
    private String sourceCidr;

    /**
     * 规则作用的目的IP的CIDR，输入格式为x.x.x.x/x，合法的IPv4、IPv6地址段
     * Required:true
     */
    @Required
    private String destinationCidr;

    /**
     * 若protocal是UDP、TCP，必须，范围1-65535，start必须小于等于end
     */
    private Number sourcePortStart;

    /**
     * 若protocal是UDP、TCP，必须，范围1-65535，start必须小于等于end
     */
    private Number sourcePortEnd;

    /**
     * 若protocal是UDP、TCP，必须，范围1-65535，start必须小于等于end
     */
    private Number destinationPortStart;

    /**
     * 若protocal是UDP、TCP，必须，范围1-65535，start必须小于等于end
     */
    private Number destinationPortEnd;



    /**
     * get 规则方向ingress为入站、egress为出站
     *
     * @return
     */
    public String getDirection() {
        return direction;
    }

    /**
     * set 规则方向ingress为入站、egress为出站
     *
     * @param direction
     */
    public void setDirection(String direction) {
        this.direction = direction;
    }


    /**
     * get 协议：ICMP，ICMPv6，TCP，UDP，ALL：表示选择所有协议和所有端口；TCP和UDP时需要输入Port
     *
     * @return
     */
    public String getProtocol() {
        return protocol;
    }

    /**
     * set 协议：ICMP，ICMPv6，TCP，UDP，ALL：表示选择所有协议和所有端口；TCP和UDP时需要输入Port
     *
     * @param protocol
     */
    public void setProtocol(String protocol) {
        this.protocol = protocol;
    }


    /**
     * get 访问控制策略：accept:接受，drop：拒绝
     *
     * @return
     */
    public String getAction() {
        return action;
    }

    /**
     * set 访问控制策略：accept:接受，drop：拒绝
     *
     * @param action
     */
    public void setAction(String action) {
        this.action = action;
    }


    /**
     * get 规则优先级1~32768  （值越小优先级越高），相同direction内的优先级不能相同
     *
     * @return
     */
    public Number getPriority() {
        return priority;
    }

    /**
     * set 规则优先级1~32768  （值越小优先级越高），相同direction内的优先级不能相同
     *
     * @param priority
     */
    public void setPriority(Number priority) {
        this.priority = priority;
    }


    /**
     * get 规则作用的源IP的CIDR，输入格式为x.x.x.x/x，合法的IPv4、IPv6地址段
     *
     * @return
     */
    public String getSourceCidr() {
        return sourceCidr;
    }

    /**
     * set 规则作用的源IP的CIDR，输入格式为x.x.x.x/x，合法的IPv4、IPv6地址段
     *
     * @param sourceCidr
     */
    public void setSourceCidr(String sourceCidr) {
        this.sourceCidr = sourceCidr;
    }


    /**
     * get 规则作用的目的IP的CIDR，输入格式为x.x.x.x/x，合法的IPv4、IPv6地址段
     *
     * @return
     */
    public String getDestinationCidr() {
        return destinationCidr;
    }

    /**
     * set 规则作用的目的IP的CIDR，输入格式为x.x.x.x/x，合法的IPv4、IPv6地址段
     *
     * @param destinationCidr
     */
    public void setDestinationCidr(String destinationCidr) {
        this.destinationCidr = destinationCidr;
    }


    /**
     * get 若protocal是UDP、TCP，必须，范围1-65535，start必须小于等于end
     *
     * @return
     */
    public Number getSourcePortStart() {
        return sourcePortStart;
    }

    /**
     * set 若protocal是UDP、TCP，必须，范围1-65535，start必须小于等于end
     *
     * @param sourcePortStart
     */
    public void setSourcePortStart(Number sourcePortStart) {
        this.sourcePortStart = sourcePortStart;
    }


    /**
     * get 若protocal是UDP、TCP，必须，范围1-65535，start必须小于等于end
     *
     * @return
     */
    public Number getSourcePortEnd() {
        return sourcePortEnd;
    }

    /**
     * set 若protocal是UDP、TCP，必须，范围1-65535，start必须小于等于end
     *
     * @param sourcePortEnd
     */
    public void setSourcePortEnd(Number sourcePortEnd) {
        this.sourcePortEnd = sourcePortEnd;
    }


    /**
     * get 若protocal是UDP、TCP，必须，范围1-65535，start必须小于等于end
     *
     * @return
     */
    public Number getDestinationPortStart() {
        return destinationPortStart;
    }

    /**
     * set 若protocal是UDP、TCP，必须，范围1-65535，start必须小于等于end
     *
     * @param destinationPortStart
     */
    public void setDestinationPortStart(Number destinationPortStart) {
        this.destinationPortStart = destinationPortStart;
    }


    /**
     * get 若protocal是UDP、TCP，必须，范围1-65535，start必须小于等于end
     *
     * @return
     */
    public Number getDestinationPortEnd() {
        return destinationPortEnd;
    }

    /**
     * set 若protocal是UDP、TCP，必须，范围1-65535，start必须小于等于end
     *
     * @param destinationPortEnd
     */
    public void setDestinationPortEnd(Number destinationPortEnd) {
        this.destinationPortEnd = destinationPortEnd;
    }



    /**
     * set 规则方向ingress为入站、egress为出站
     *
     * @param direction
     */
    public TrafficMirrorFilterRuleSpec direction(String direction) {
        this.direction = direction;
        return this;
    }


    /**
     * set 协议：ICMP，ICMPv6，TCP，UDP，ALL：表示选择所有协议和所有端口；TCP和UDP时需要输入Port
     *
     * @param protocol
     */
    public TrafficMirrorFilterRuleSpec protocol(String protocol) {
        this.protocol = protocol;
        return this;
    }


    /**
     * set 访问控制策略：accept:接受，drop：拒绝
     *
     * @param action
     */
    public TrafficMirrorFilterRuleSpec action(String action) {
        this.action = action;
        return this;
    }


    /**
     * set 规则优先级1~32768  （值越小优先级越高），相同direction内的优先级不能相同
     *
     * @param priority
     */
    public TrafficMirrorFilterRuleSpec priority(Number priority) {
        this.priority = priority;
        return this;
    }


    /**
     * set 规则作用的源IP的CIDR，输入格式为x.x.x.x/x，合法的IPv4、IPv6地址段
     *
     * @param sourceCidr
     */
    public TrafficMirrorFilterRuleSpec sourceCidr(String sourceCidr) {
        this.sourceCidr = sourceCidr;
        return this;
    }


    /**
     * set 规则作用的目的IP的CIDR，输入格式为x.x.x.x/x，合法的IPv4、IPv6地址段
     *
     * @param destinationCidr
     */
    public TrafficMirrorFilterRuleSpec destinationCidr(String destinationCidr) {
        this.destinationCidr = destinationCidr;
        return this;
    }


    /**
     * set 若protocal是UDP、TCP，必须，范围1-65535，start必须小于等于end
     *
     * @param sourcePortStart
     */
    public TrafficMirrorFilterRuleSpec sourcePortStart(Number sourcePortStart) {
        this.sourcePortStart = sourcePortStart;
        return this;
    }


    /**
     * set 若protocal是UDP、TCP，必须，范围1-65535，start必须小于等于end
     *
     * @param sourcePortEnd
     */
    public TrafficMirrorFilterRuleSpec sourcePortEnd(Number sourcePortEnd) {
        this.sourcePortEnd = sourcePortEnd;
        return this;
    }


    /**
     * set 若protocal是UDP、TCP，必须，范围1-65535，start必须小于等于end
     *
     * @param destinationPortStart
     */
    public TrafficMirrorFilterRuleSpec destinationPortStart(Number destinationPortStart) {
        this.destinationPortStart = destinationPortStart;
        return this;
    }


    /**
     * set 若protocal是UDP、TCP，必须，范围1-65535，start必须小于等于end
     *
     * @param destinationPortEnd
     */
    public TrafficMirrorFilterRuleSpec destinationPortEnd(Number destinationPortEnd) {
        this.destinationPortEnd = destinationPortEnd;
        return this;
    }


}