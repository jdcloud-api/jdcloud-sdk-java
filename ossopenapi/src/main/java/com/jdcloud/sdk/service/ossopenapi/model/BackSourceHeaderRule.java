/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * back source configuration openapi
 * back source configuration openapi
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.ossopenapi.model;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;

/**
 * 回源的header规则
 */
public class BackSourceHeaderRule  implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 是否允许所有的Http header
     */
    private Boolean allowAllHeaders;

    /**
     * 允许的http header列表
     */
    
    private List<String> allowHeaders;
    /**
     * 禁止的http header列表
     */
    
    private List<String> notAllowHeaders;
    /**
     * 设置指定http header参数，类型为Map\&lt;String, String&gt;
     */
    private Map<String, String> setHeaders;



    /**
     * get 是否允许所有的Http header
     *
     * @return
     */
    public Boolean getAllowAllHeaders() {
        return allowAllHeaders;
    }

    /**
     * set 是否允许所有的Http header
     *
     * @param allowAllHeaders
     */
    public void setAllowAllHeaders(Boolean allowAllHeaders) {
        this.allowAllHeaders = allowAllHeaders;
    }


    /**
    * get 允许的http header列表
    *
    * @return
    */
    public List<String> getAllowHeaders() {
        return allowHeaders;
    }

    /**
    * set 允许的http header列表
    *
    * @param allowHeaders
    */
    public void setAllowHeaders(List<String> allowHeaders) {
        this.allowHeaders = allowHeaders;
    }


    /**
    * get 禁止的http header列表
    *
    * @return
    */
    public List<String> getNotAllowHeaders() {
        return notAllowHeaders;
    }

    /**
    * set 禁止的http header列表
    *
    * @param notAllowHeaders
    */
    public void setNotAllowHeaders(List<String> notAllowHeaders) {
        this.notAllowHeaders = notAllowHeaders;
    }


    /**
     * get 设置指定http header参数，类型为Map\&lt;String, String&gt;
     *
     * @return
     */
    public Map<String, String> getSetHeaders() {
        return setHeaders;
    }

    /**
     * set 设置指定http header参数，类型为Map\&lt;String, String&gt;
     *
     * @param setHeaders
     */
    public void setSetHeaders(Map<String, String> setHeaders) {
        this.setHeaders = setHeaders;
    }



    /**
     * set 是否允许所有的Http header
     *
     * @param allowAllHeaders
     */
    public BackSourceHeaderRule allowAllHeaders(Boolean allowAllHeaders) {
        this.allowAllHeaders = allowAllHeaders;
        return this;
    }


    /**
    * set 允许的http header列表
    *
    * @param allowHeaders
    */
    public BackSourceHeaderRule allowHeaders(List<String> allowHeaders) {
        this.allowHeaders = allowHeaders;
        return this;
    }


    /**
    * set 禁止的http header列表
    *
    * @param notAllowHeaders
    */
    public BackSourceHeaderRule notAllowHeaders(List<String> notAllowHeaders) {
        this.notAllowHeaders = notAllowHeaders;
        return this;
    }


    /**
     * set 设置指定http header参数，类型为Map\&lt;String, String&gt;
     *
     * @param setHeaders
     */
    public BackSourceHeaderRule setHeaders(Map<String, String> setHeaders) {
        this.setHeaders = setHeaders;
        return this;
    }



    /**
     * add item to 允许的http header列表
     *
     * @param allowHeader
     */
    public void addAllowHeader(String allowHeader) {
        if (this.allowHeaders == null) {
            this.allowHeaders = new ArrayList<>();
        }
        this.allowHeaders.add(allowHeader);
    }

    /**
     * add item to 禁止的http header列表
     *
     * @param notAllowHeader
     */
    public void addNotAllowHeader(String notAllowHeader) {
        if (this.notAllowHeaders == null) {
            this.notAllowHeaders = new ArrayList<>();
        }
        this.notAllowHeaders.add(notAllowHeader);
    }
}