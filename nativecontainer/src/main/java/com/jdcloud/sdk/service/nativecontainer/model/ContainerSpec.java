/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * 
 *
 * 
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.nativecontainer.model;

import java.util.List;
import java.util.ArrayList;
import com.jdcloud.sdk.annotation.Required;
import com.jdcloud.sdk.service.charge.model.ChargeSpec;

/**
 * 容器规格
 */
public class ContainerSpec  implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 实例类型；参考[文档](https://www.jdcloud.com/help/detail/1992/isCatalog/1)
     * Required:true
     */
    @Required
    private String instanceType;

    /**
     * 容器所属可用区
     * Required:true
     */
    @Required
    private String az;

    /**
     * 容器名称，不可为空，只支持中文、数字、大小写字母、英文下划线“_”及中划线“-”，且不能超过32字符
     * Required:true
     */
    @Required
    private String name;

    /**
     * 域名和IP映射的信息；&lt;/br&gt; 最大10个alias
     */
    private List<HostAliasSpec> hostAliases;

    /**
     * 主机名，规范请参考说明文档；默认容器ID
     */
    private String hostname;

    /**
     * 容器执行命令，如果不指定默认是docker镜像的ENTRYPOINT
     */
    private List<String> command;

    /**
     * 容器执行命令的参数，如果不指定默认是docker镜像的CMD
     */
    private List<String> args;

    /**
     * 容器执行的环境变量；如果和镜像中的环境变量Key相同，会覆盖镜像中的值；&lt;/br&gt; 最大100对
     */
    private List<EnvVar> envs;

    /**
     * 镜像名称 &lt;/br&gt; 1. Docker Hub官方镜像通过类似nginx, mysql/mysql-server的名字指定 &lt;/br&gt; &lt;/br&gt; repository长度最大256个字符，tag最大128个字符，registry最大255个字符
     * Required:true
     */
    @Required
    private String image;

    /**
     * 镜像仓库认证信息；使用Docker Hub和京东云CR的镜像不需要secret
     */
    private String secret;

    /**
     * 容器是否分配tty。默认不分配
     */
    private Boolean tty;

    /**
     * 容器的工作目录。如果不指定，默认是根目录（/）；必须是绝对路径
     */
    private String workingDir;

    /**
     * 根Volume信息
     * Required:true
     */
    @Required
    private VolumeMountSpec rootVolume;

    /**
     * 挂载的数据Volume信息；最多7个
     */
    private List<VolumeMountSpec> dataVolumes;

    /**
     * 主网卡主IP关联的弹性IP规格
     */
    private ElasticIpSpec elasticIp;

    /**
     * 主网卡配置信息
     * Required:true
     */
    @Required
    private ContainerNetworkInterfaceAttachmentSpec primaryNetworkInterface;

    /**
     * 容器日志配置信息；默认会在本地分配10MB的存储空间
     */
    private LogConfiguration logConfiguration;

    /**
     * 容器描述
     */
    private String description;

    /**
     * 计费配置；如不指定，默认计费类型是后付费-按使用时常付费
     */
    private ChargeSpec charge;

    /**
     * 用户普通标签集合
     */
    private List<Tag> userTags;


    /**
     * get 实例类型；参考[文档](https://www.jdcloud.com/help/detail/1992/isCatalog/1)
     *
     * @return
     */
    public String getInstanceType() {
        return instanceType;
    }

    /**
     * set 实例类型；参考[文档](https://www.jdcloud.com/help/detail/1992/isCatalog/1)
     *
     * @param instanceType
     */
    public void setInstanceType(String instanceType) {
        this.instanceType = instanceType;
    }

    /**
     * get 容器所属可用区
     *
     * @return
     */
    public String getAz() {
        return az;
    }

    /**
     * set 容器所属可用区
     *
     * @param az
     */
    public void setAz(String az) {
        this.az = az;
    }

    /**
     * get 容器名称，不可为空，只支持中文、数字、大小写字母、英文下划线“_”及中划线“-”，且不能超过32字符
     *
     * @return
     */
    public String getName() {
        return name;
    }

    /**
     * set 容器名称，不可为空，只支持中文、数字、大小写字母、英文下划线“_”及中划线“-”，且不能超过32字符
     *
     * @param name
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * get 域名和IP映射的信息；&lt;/br&gt; 最大10个alias
     *
     * @return
     */
    public List<HostAliasSpec> getHostAliases() {
        return hostAliases;
    }

    /**
     * set 域名和IP映射的信息；&lt;/br&gt; 最大10个alias
     *
     * @param hostAliases
     */
    public void setHostAliases(List<HostAliasSpec> hostAliases) {
        this.hostAliases = hostAliases;
    }

    /**
     * get 主机名，规范请参考说明文档；默认容器ID
     *
     * @return
     */
    public String getHostname() {
        return hostname;
    }

    /**
     * set 主机名，规范请参考说明文档；默认容器ID
     *
     * @param hostname
     */
    public void setHostname(String hostname) {
        this.hostname = hostname;
    }

    /**
     * get 容器执行命令，如果不指定默认是docker镜像的ENTRYPOINT
     *
     * @return
     */
    public List<String> getCommand() {
        return command;
    }

    /**
     * set 容器执行命令，如果不指定默认是docker镜像的ENTRYPOINT
     *
     * @param command
     */
    public void setCommand(List<String> command) {
        this.command = command;
    }

    /**
     * get 容器执行命令的参数，如果不指定默认是docker镜像的CMD
     *
     * @return
     */
    public List<String> getArgs() {
        return args;
    }

    /**
     * set 容器执行命令的参数，如果不指定默认是docker镜像的CMD
     *
     * @param args
     */
    public void setArgs(List<String> args) {
        this.args = args;
    }

    /**
     * get 容器执行的环境变量；如果和镜像中的环境变量Key相同，会覆盖镜像中的值；&lt;/br&gt; 最大100对
     *
     * @return
     */
    public List<EnvVar> getEnvs() {
        return envs;
    }

    /**
     * set 容器执行的环境变量；如果和镜像中的环境变量Key相同，会覆盖镜像中的值；&lt;/br&gt; 最大100对
     *
     * @param envs
     */
    public void setEnvs(List<EnvVar> envs) {
        this.envs = envs;
    }

    /**
     * get 镜像名称 &lt;/br&gt; 1. Docker Hub官方镜像通过类似nginx, mysql/mysql-server的名字指定 &lt;/br&gt; &lt;/br&gt; repository长度最大256个字符，tag最大128个字符，registry最大255个字符
     *
     * @return
     */
    public String getImage() {
        return image;
    }

    /**
     * set 镜像名称 &lt;/br&gt; 1. Docker Hub官方镜像通过类似nginx, mysql/mysql-server的名字指定 &lt;/br&gt; &lt;/br&gt; repository长度最大256个字符，tag最大128个字符，registry最大255个字符
     *
     * @param image
     */
    public void setImage(String image) {
        this.image = image;
    }

    /**
     * get 镜像仓库认证信息；使用Docker Hub和京东云CR的镜像不需要secret
     *
     * @return
     */
    public String getSecret() {
        return secret;
    }

    /**
     * set 镜像仓库认证信息；使用Docker Hub和京东云CR的镜像不需要secret
     *
     * @param secret
     */
    public void setSecret(String secret) {
        this.secret = secret;
    }

    /**
     * get 容器是否分配tty。默认不分配
     *
     * @return
     */
    public Boolean getTty() {
        return tty;
    }

    /**
     * set 容器是否分配tty。默认不分配
     *
     * @param tty
     */
    public void setTty(Boolean tty) {
        this.tty = tty;
    }

    /**
     * get 容器的工作目录。如果不指定，默认是根目录（/）；必须是绝对路径
     *
     * @return
     */
    public String getWorkingDir() {
        return workingDir;
    }

    /**
     * set 容器的工作目录。如果不指定，默认是根目录（/）；必须是绝对路径
     *
     * @param workingDir
     */
    public void setWorkingDir(String workingDir) {
        this.workingDir = workingDir;
    }

    /**
     * get 根Volume信息
     *
     * @return
     */
    public VolumeMountSpec getRootVolume() {
        return rootVolume;
    }

    /**
     * set 根Volume信息
     *
     * @param rootVolume
     */
    public void setRootVolume(VolumeMountSpec rootVolume) {
        this.rootVolume = rootVolume;
    }

    /**
     * get 挂载的数据Volume信息；最多7个
     *
     * @return
     */
    public List<VolumeMountSpec> getDataVolumes() {
        return dataVolumes;
    }

    /**
     * set 挂载的数据Volume信息；最多7个
     *
     * @param dataVolumes
     */
    public void setDataVolumes(List<VolumeMountSpec> dataVolumes) {
        this.dataVolumes = dataVolumes;
    }

    /**
     * get 主网卡主IP关联的弹性IP规格
     *
     * @return
     */
    public ElasticIpSpec getElasticIp() {
        return elasticIp;
    }

    /**
     * set 主网卡主IP关联的弹性IP规格
     *
     * @param elasticIp
     */
    public void setElasticIp(ElasticIpSpec elasticIp) {
        this.elasticIp = elasticIp;
    }

    /**
     * get 主网卡配置信息
     *
     * @return
     */
    public ContainerNetworkInterfaceAttachmentSpec getPrimaryNetworkInterface() {
        return primaryNetworkInterface;
    }

    /**
     * set 主网卡配置信息
     *
     * @param primaryNetworkInterface
     */
    public void setPrimaryNetworkInterface(ContainerNetworkInterfaceAttachmentSpec primaryNetworkInterface) {
        this.primaryNetworkInterface = primaryNetworkInterface;
    }

    /**
     * get 容器日志配置信息；默认会在本地分配10MB的存储空间
     *
     * @return
     */
    public LogConfiguration getLogConfiguration() {
        return logConfiguration;
    }

    /**
     * set 容器日志配置信息；默认会在本地分配10MB的存储空间
     *
     * @param logConfiguration
     */
    public void setLogConfiguration(LogConfiguration logConfiguration) {
        this.logConfiguration = logConfiguration;
    }

    /**
     * get 容器描述
     *
     * @return
     */
    public String getDescription() {
        return description;
    }

    /**
     * set 容器描述
     *
     * @param description
     */
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * get 计费配置；如不指定，默认计费类型是后付费-按使用时常付费
     *
     * @return
     */
    public ChargeSpec getCharge() {
        return charge;
    }

    /**
     * set 计费配置；如不指定，默认计费类型是后付费-按使用时常付费
     *
     * @param charge
     */
    public void setCharge(ChargeSpec charge) {
        this.charge = charge;
    }

    /**
     * get 用户普通标签集合
     *
     * @return
     */
    public List<Tag> getUserTags() {
        return userTags;
    }

    /**
     * set 用户普通标签集合
     *
     * @param userTags
     */
    public void setUserTags(List<Tag> userTags) {
        this.userTags = userTags;
    }


    /**
     * set 实例类型；参考[文档](https://www.jdcloud.com/help/detail/1992/isCatalog/1)
     *
     * @param instanceType
     */
    public ContainerSpec instanceType(String instanceType) {
        this.instanceType = instanceType;
        return this;
    }

    /**
     * set 容器所属可用区
     *
     * @param az
     */
    public ContainerSpec az(String az) {
        this.az = az;
        return this;
    }

    /**
     * set 容器名称，不可为空，只支持中文、数字、大小写字母、英文下划线“_”及中划线“-”，且不能超过32字符
     *
     * @param name
     */
    public ContainerSpec name(String name) {
        this.name = name;
        return this;
    }

    /**
     * set 域名和IP映射的信息；&lt;/br&gt; 最大10个alias
     *
     * @param hostAliases
     */
    public ContainerSpec hostAliases(List<HostAliasSpec> hostAliases) {
        this.hostAliases = hostAliases;
        return this;
    }

    /**
     * set 主机名，规范请参考说明文档；默认容器ID
     *
     * @param hostname
     */
    public ContainerSpec hostname(String hostname) {
        this.hostname = hostname;
        return this;
    }

    /**
     * set 容器执行命令，如果不指定默认是docker镜像的ENTRYPOINT
     *
     * @param command
     */
    public ContainerSpec command(List<String> command) {
        this.command = command;
        return this;
    }

    /**
     * set 容器执行命令的参数，如果不指定默认是docker镜像的CMD
     *
     * @param args
     */
    public ContainerSpec args(List<String> args) {
        this.args = args;
        return this;
    }

    /**
     * set 容器执行的环境变量；如果和镜像中的环境变量Key相同，会覆盖镜像中的值；&lt;/br&gt; 最大100对
     *
     * @param envs
     */
    public ContainerSpec envs(List<EnvVar> envs) {
        this.envs = envs;
        return this;
    }

    /**
     * set 镜像名称 &lt;/br&gt; 1. Docker Hub官方镜像通过类似nginx, mysql/mysql-server的名字指定 &lt;/br&gt; &lt;/br&gt; repository长度最大256个字符，tag最大128个字符，registry最大255个字符
     *
     * @param image
     */
    public ContainerSpec image(String image) {
        this.image = image;
        return this;
    }

    /**
     * set 镜像仓库认证信息；使用Docker Hub和京东云CR的镜像不需要secret
     *
     * @param secret
     */
    public ContainerSpec secret(String secret) {
        this.secret = secret;
        return this;
    }

    /**
     * set 容器是否分配tty。默认不分配
     *
     * @param tty
     */
    public ContainerSpec tty(Boolean tty) {
        this.tty = tty;
        return this;
    }

    /**
     * set 容器的工作目录。如果不指定，默认是根目录（/）；必须是绝对路径
     *
     * @param workingDir
     */
    public ContainerSpec workingDir(String workingDir) {
        this.workingDir = workingDir;
        return this;
    }

    /**
     * set 根Volume信息
     *
     * @param rootVolume
     */
    public ContainerSpec rootVolume(VolumeMountSpec rootVolume) {
        this.rootVolume = rootVolume;
        return this;
    }

    /**
     * set 挂载的数据Volume信息；最多7个
     *
     * @param dataVolumes
     */
    public ContainerSpec dataVolumes(List<VolumeMountSpec> dataVolumes) {
        this.dataVolumes = dataVolumes;
        return this;
    }

    /**
     * set 主网卡主IP关联的弹性IP规格
     *
     * @param elasticIp
     */
    public ContainerSpec elasticIp(ElasticIpSpec elasticIp) {
        this.elasticIp = elasticIp;
        return this;
    }

    /**
     * set 主网卡配置信息
     *
     * @param primaryNetworkInterface
     */
    public ContainerSpec primaryNetworkInterface(ContainerNetworkInterfaceAttachmentSpec primaryNetworkInterface) {
        this.primaryNetworkInterface = primaryNetworkInterface;
        return this;
    }

    /**
     * set 容器日志配置信息；默认会在本地分配10MB的存储空间
     *
     * @param logConfiguration
     */
    public ContainerSpec logConfiguration(LogConfiguration logConfiguration) {
        this.logConfiguration = logConfiguration;
        return this;
    }

    /**
     * set 容器描述
     *
     * @param description
     */
    public ContainerSpec description(String description) {
        this.description = description;
        return this;
    }

    /**
     * set 计费配置；如不指定，默认计费类型是后付费-按使用时常付费
     *
     * @param charge
     */
    public ContainerSpec charge(ChargeSpec charge) {
        this.charge = charge;
        return this;
    }

    /**
     * set 用户普通标签集合
     *
     * @param userTags
     */
    public ContainerSpec userTags(List<Tag> userTags) {
        this.userTags = userTags;
        return this;
    }


    /**
     * add item to 域名和IP映射的信息；&lt;/br&gt; 最大10个alias
     *
     * @param hostAliase
     */
    public void addHostAliase(HostAliasSpec hostAliase) {
        if (this.hostAliases == null) {
            this.hostAliases = new ArrayList<>();
        }
        this.hostAliases.add(hostAliase);
    }

    /**
     * add item to 容器执行命令，如果不指定默认是docker镜像的ENTRYPOINT
     *
     * @param command
     */
    public void addCommand(String command) {
        if (this.command == null) {
            this.command = new ArrayList<>();
        }
        this.command.add(command);
    }

    /**
     * add item to 容器执行命令的参数，如果不指定默认是docker镜像的CMD
     *
     * @param arg
     */
    public void addArg(String arg) {
        if (this.args == null) {
            this.args = new ArrayList<>();
        }
        this.args.add(arg);
    }

    /**
     * add item to 容器执行的环境变量；如果和镜像中的环境变量Key相同，会覆盖镜像中的值；&lt;/br&gt; 最大100对
     *
     * @param env
     */
    public void addEnv(EnvVar env) {
        if (this.envs == null) {
            this.envs = new ArrayList<>();
        }
        this.envs.add(env);
    }

    /**
     * add item to 挂载的数据Volume信息；最多7个
     *
     * @param dataVolume
     */
    public void addDataVolume(VolumeMountSpec dataVolume) {
        if (this.dataVolumes == null) {
            this.dataVolumes = new ArrayList<>();
        }
        this.dataVolumes.add(dataVolume);
    }

    /**
     * add item to 用户普通标签集合
     *
     * @param userTag
     */
    public void addUserTag(Tag userTag) {
        if (this.userTags == null) {
            this.userTags = new ArrayList<>();
        }
        this.userTags.add(userTag);
    }

}