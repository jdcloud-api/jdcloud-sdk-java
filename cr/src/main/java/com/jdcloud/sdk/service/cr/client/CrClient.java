/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * cr
 * 容器镜像仓库服务
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.cr.client;

import com.jdcloud.sdk.JdcloudSdkException;
import com.jdcloud.sdk.auth.CredentialsProvider;
import com.jdcloud.sdk.client.Environment;
import com.jdcloud.sdk.client.Jdcloud;
import com.jdcloud.sdk.client.JdcloudClient;
import com.jdcloud.sdk.client.JdcloudValidateException;
import com.jdcloud.sdk.http.HttpRequestConfig;
import com.jdcloud.sdk.service.cr.model.GetAuthorizationTokenRequest;
import com.jdcloud.sdk.service.cr.model.GetAuthorizationTokenResponse;
import com.jdcloud.sdk.service.cr.client.GetAuthorizationTokenExecutor;
import com.jdcloud.sdk.service.cr.model.DescribeImagesRequest;
import com.jdcloud.sdk.service.cr.model.DescribeImagesResponse;
import com.jdcloud.sdk.service.cr.client.DescribeImagesExecutor;
import com.jdcloud.sdk.service.cr.model.CreateRegistryRequest;
import com.jdcloud.sdk.service.cr.model.CreateRegistryResponse;
import com.jdcloud.sdk.service.cr.client.CreateRegistryExecutor;
import com.jdcloud.sdk.service.cr.model.DescribeQuotasRequest;
import com.jdcloud.sdk.service.cr.model.DescribeQuotasResponse;
import com.jdcloud.sdk.service.cr.client.DescribeQuotasExecutor;
import com.jdcloud.sdk.service.cr.model.CreateRepositoryRequest;
import com.jdcloud.sdk.service.cr.model.CreateRepositoryResponse;
import com.jdcloud.sdk.service.cr.client.CreateRepositoryExecutor;

/**
 * crClient
 */
public class CrClient extends JdcloudClient {

    public final static String ApiVersion = "v1";
    private final static String UserAgentPrefix = "JdcloudSdkJava";
    public final static String ClientVersion = "1.0.6";
    public final static String DefaultEndpoint = "openapi.cr.jdcloud.com";
    public final static String ServiceName = "cr";
    public final static String UserAgent = UserAgentPrefix + "/" + ClientVersion + " " + ServiceName + "/" + ApiVersion;

    CredentialsProvider credentialsProvider;
    HttpRequestConfig httpRequestConfig;
    Environment environment = new Environment.Builder().endpoint(DefaultEndpoint).build();

    public CredentialsProvider getCredentialsProvider() {
        return credentialsProvider;
    }

    public HttpRequestConfig getHttpRequestConfig() {
        return httpRequestConfig;
    }

    public Environment getEnvironment() {
        return environment;
    }

    public String getUserAgent() {
        return UserAgent;
    }

    public String getServiceName() {
        return ServiceName;
    }

    public String getVersion() {
        return ApiVersion;
    }

    private CrClient() {

    }

    public static Builder builder() {
        return new DefaultBuilder();
    }


    /**
     * &lt;p&gt;申请12小时有效期的令牌。 使用&lt;code&gt;docker&lt;/code&gt; CLI push和pull镜像。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;authorizationToken&lt;/code&gt;为每个registry返回一个base64编码的字符串，解码后&lt;code&gt;docker login&lt;/code&gt;命令
可完成指定registry的鉴权。JCR CLI提供&lt;code&gt;jcr get-login&lt;/code&gt;进行认证处理。&lt;/p&gt;

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetAuthorizationTokenResponse getAuthorizationToken(GetAuthorizationTokenRequest request) throws JdcloudSdkException {
        return new GetAuthorizationTokenExecutor().client(this).execute(request);
    }

    /**
     * 返回指定repository中images的元数据，包括image size, image tags和creation date。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeImagesResponse describeImages(DescribeImagesRequest request) throws JdcloudSdkException {
        return new DescribeImagesExecutor().client(this).execute(request);
    }

    /**
     * 通过参数创建注册表。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreateRegistryResponse createRegistry(CreateRegistryRequest request) throws JdcloudSdkException {
        return new CreateRegistryExecutor().client(this).execute(request);
    }

    /**
     * 查询配额
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeQuotasResponse describeQuotas(DescribeQuotasRequest request) throws JdcloudSdkException {
        return new DescribeQuotasExecutor().client(this).execute(request);
    }

    /**
     * 通过参数创建镜像仓库。
仓库名称可以分解为多个路径名，每个名称必须至少包含一个小写字母数字，考虑URL规范。
支持包含段划线或者下划线进行分割，但不允许点&#39;.&#39;，多个路径名之间通过(&quot;/&quot;)连接，总长度不超过256个字符，当前只支持二级目录。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreateRepositoryResponse createRepository(CreateRepositoryRequest request) throws JdcloudSdkException {
        return new CreateRepositoryExecutor().client(this).execute(request);
    }


    public interface Builder {
        public Builder credentialsProvider(CredentialsProvider provider);
        public Builder environment(Environment environment);
        public Builder httpRequestConfig(HttpRequestConfig config);
        public CrClient build() throws JdcloudSdkException;
    }

    private static class DefaultBuilder implements Builder {

        private CrClient crClient;

        public DefaultBuilder() {
            crClient = new CrClient();
        }

        public DefaultBuilder credentialsProvider(CredentialsProvider provider) {
            crClient.credentialsProvider = provider;
            return this;
        }

        public DefaultBuilder httpRequestConfig(HttpRequestConfig config) {
            crClient.httpRequestConfig = config;
            return this;
        }

        public CrClient build() throws JdcloudSdkException {

            if (crClient.credentialsProvider == null) {
                //if credentialsProvider not set, try load jdcloud global default  credentials provider
                crClient.credentialsProvider = Jdcloud.defaultInstance().getCredentialsProvider();
                if (crClient.credentialsProvider == null) {
                    throw new JdcloudValidateException("CrClient build error: jdcloud credentials provider not set");
                }
            }
            if (crClient.httpRequestConfig == null) {
                crClient.httpRequestConfig = Jdcloud.defaultInstance().getHttpRequestConfig();
                if (crClient.httpRequestConfig == null) {
                    throw new JdcloudValidateException("CrClient build error: http request config not set");
                }
            }
            return crClient;
        }

        public Builder environment(Environment environment) {
            crClient.environment = environment;
            return this;
        }
    }
}
