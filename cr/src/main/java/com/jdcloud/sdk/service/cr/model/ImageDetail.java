/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * 
 *
 * 
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.cr.model;

import java.util.List;
import java.util.ArrayList;

/**
 * 镜像详情数据结构
 */
public class ImageDetail  implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * image registry 表示镜像的注册表归属
     */
    private String registryName;

    /**
     * image repository表示镜像的仓库归属
     */
    private String repositoryName;

    /**
     * image manifest的sha256摘要
     */
    private String imageDigest;

    /**
     * 镜像的Manifest
     */
    private String imageManifest;

    /**
     * 当前image被push到repository的时间
     */
    private String imagePushedAt;

    /**
     * image在repository中的大小。从Docker 1.9之后的版本, Docker client会压缩镜像层数据再push到V2版本的Docker registry。
docker image命令显示的是解压后的镜像大小，因此会比DescribeImages接口返回的镜像大小会大很多。      

     */
    private Integer imageSizeMB;

    /**
     * 镜像关联的所有Tag
     */
    private List<String> imageTags;

    /**
     * 最近pull的时间
     */
    private String lastPullAt;

    /**
     * 镜像被拉取次数
     */
    private Integer totalPullTimes;


    /**
     * get image registry 表示镜像的注册表归属
     *
     * @return
     */
    public String getRegistryName() {
        return registryName;
    }

    /**
     * set image registry 表示镜像的注册表归属
     *
     * @param registryName
     */
    public void setRegistryName(String registryName) {
        this.registryName = registryName;
    }

    /**
     * get image repository表示镜像的仓库归属
     *
     * @return
     */
    public String getRepositoryName() {
        return repositoryName;
    }

    /**
     * set image repository表示镜像的仓库归属
     *
     * @param repositoryName
     */
    public void setRepositoryName(String repositoryName) {
        this.repositoryName = repositoryName;
    }

    /**
     * get image manifest的sha256摘要
     *
     * @return
     */
    public String getImageDigest() {
        return imageDigest;
    }

    /**
     * set image manifest的sha256摘要
     *
     * @param imageDigest
     */
    public void setImageDigest(String imageDigest) {
        this.imageDigest = imageDigest;
    }

    /**
     * get 镜像的Manifest
     *
     * @return
     */
    public String getImageManifest() {
        return imageManifest;
    }

    /**
     * set 镜像的Manifest
     *
     * @param imageManifest
     */
    public void setImageManifest(String imageManifest) {
        this.imageManifest = imageManifest;
    }

    /**
     * get 当前image被push到repository的时间
     *
     * @return
     */
    public String getImagePushedAt() {
        return imagePushedAt;
    }

    /**
     * set 当前image被push到repository的时间
     *
     * @param imagePushedAt
     */
    public void setImagePushedAt(String imagePushedAt) {
        this.imagePushedAt = imagePushedAt;
    }

    /**
     * get image在repository中的大小。从Docker 1.9之后的版本, Docker client会压缩镜像层数据再push到V2版本的Docker registry。
docker image命令显示的是解压后的镜像大小，因此会比DescribeImages接口返回的镜像大小会大很多。      

     *
     * @return
     */
    public Integer getImageSizeMB() {
        return imageSizeMB;
    }

    /**
     * set image在repository中的大小。从Docker 1.9之后的版本, Docker client会压缩镜像层数据再push到V2版本的Docker registry。
docker image命令显示的是解压后的镜像大小，因此会比DescribeImages接口返回的镜像大小会大很多。      

     *
     * @param imageSizeMB
     */
    public void setImageSizeMB(Integer imageSizeMB) {
        this.imageSizeMB = imageSizeMB;
    }

    /**
     * get 镜像关联的所有Tag
     *
     * @return
     */
    public List<String> getImageTags() {
        return imageTags;
    }

    /**
     * set 镜像关联的所有Tag
     *
     * @param imageTags
     */
    public void setImageTags(List<String> imageTags) {
        this.imageTags = imageTags;
    }

    /**
     * get 最近pull的时间
     *
     * @return
     */
    public String getLastPullAt() {
        return lastPullAt;
    }

    /**
     * set 最近pull的时间
     *
     * @param lastPullAt
     */
    public void setLastPullAt(String lastPullAt) {
        this.lastPullAt = lastPullAt;
    }

    /**
     * get 镜像被拉取次数
     *
     * @return
     */
    public Integer getTotalPullTimes() {
        return totalPullTimes;
    }

    /**
     * set 镜像被拉取次数
     *
     * @param totalPullTimes
     */
    public void setTotalPullTimes(Integer totalPullTimes) {
        this.totalPullTimes = totalPullTimes;
    }


    /**
     * set image registry 表示镜像的注册表归属
     *
     * @param registryName
     */
    public ImageDetail registryName(String registryName) {
        this.registryName = registryName;
        return this;
    }

    /**
     * set image repository表示镜像的仓库归属
     *
     * @param repositoryName
     */
    public ImageDetail repositoryName(String repositoryName) {
        this.repositoryName = repositoryName;
        return this;
    }

    /**
     * set image manifest的sha256摘要
     *
     * @param imageDigest
     */
    public ImageDetail imageDigest(String imageDigest) {
        this.imageDigest = imageDigest;
        return this;
    }

    /**
     * set 镜像的Manifest
     *
     * @param imageManifest
     */
    public ImageDetail imageManifest(String imageManifest) {
        this.imageManifest = imageManifest;
        return this;
    }

    /**
     * set 当前image被push到repository的时间
     *
     * @param imagePushedAt
     */
    public ImageDetail imagePushedAt(String imagePushedAt) {
        this.imagePushedAt = imagePushedAt;
        return this;
    }

    /**
     * set image在repository中的大小。从Docker 1.9之后的版本, Docker client会压缩镜像层数据再push到V2版本的Docker registry。
docker image命令显示的是解压后的镜像大小，因此会比DescribeImages接口返回的镜像大小会大很多。      

     *
     * @param imageSizeMB
     */
    public ImageDetail imageSizeMB(Integer imageSizeMB) {
        this.imageSizeMB = imageSizeMB;
        return this;
    }

    /**
     * set 镜像关联的所有Tag
     *
     * @param imageTags
     */
    public ImageDetail imageTags(List<String> imageTags) {
        this.imageTags = imageTags;
        return this;
    }

    /**
     * set 最近pull的时间
     *
     * @param lastPullAt
     */
    public ImageDetail lastPullAt(String lastPullAt) {
        this.lastPullAt = lastPullAt;
        return this;
    }

    /**
     * set 镜像被拉取次数
     *
     * @param totalPullTimes
     */
    public ImageDetail totalPullTimes(Integer totalPullTimes) {
        this.totalPullTimes = totalPullTimes;
        return this;
    }


    /**
     * add item to 镜像关联的所有Tag
     *
     * @param imageTag
     */
    public void addImageTag(String imageTag) {
        if (this.imageTags == null) {
            this.imageTags = new ArrayList<>();
        }
        this.imageTags.add(imageTag);
    }

}