/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * CDN刷新预热类接口
 * Openapi For JCLOUD cdn
 *
 * OpenAPI spec version: v1
 * Contact: pid-cdn@jd.com
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.cdn.model;

import java.util.List;
import java.util.ArrayList;
import com.jdcloud.sdk.service.JdcloudRequest;

/**
 * 设置用户刷新预热限额
 */
public class SetRefreshLimitRequest extends JdcloudRequest implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 子账号，只有传值才会设置子账号，其余不传或传空是设置主账号
     */
    
    private List<String> subUsers;
    /**
     * 刷新个数，如果是首次设置，不传默认是2000；已经设置，再次设置是更新，不传表示不进行更新
     */
    private Long refreshCount;

    /**
     * 刷新个数，如果是首次设置，不传默认是2000；已经设置，再次设置是更新，不传表示不进行更新
     */
    private Long prefetchCount;

    /**
     * 刷新个数，如果是首次设置，不传默认是50；已经设置，再次设置是更新，不传表示不进行更新
     */
    private Long dirCount;



    /**
    * get 子账号，只有传值才会设置子账号，其余不传或传空是设置主账号
    *
    * @return
    */
    public List<String> getSubUsers() {
        return subUsers;
    }

    /**
    * set 子账号，只有传值才会设置子账号，其余不传或传空是设置主账号
    *
    * @param subUsers
    */
    public void setSubUsers(List<String> subUsers) {
        this.subUsers = subUsers;
    }


    /**
     * get 刷新个数，如果是首次设置，不传默认是2000；已经设置，再次设置是更新，不传表示不进行更新
     *
     * @return
     */
    public Long getRefreshCount() {
        return refreshCount;
    }

    /**
     * set 刷新个数，如果是首次设置，不传默认是2000；已经设置，再次设置是更新，不传表示不进行更新
     *
     * @param refreshCount
     */
    public void setRefreshCount(Long refreshCount) {
        this.refreshCount = refreshCount;
    }


    /**
     * get 刷新个数，如果是首次设置，不传默认是2000；已经设置，再次设置是更新，不传表示不进行更新
     *
     * @return
     */
    public Long getPrefetchCount() {
        return prefetchCount;
    }

    /**
     * set 刷新个数，如果是首次设置，不传默认是2000；已经设置，再次设置是更新，不传表示不进行更新
     *
     * @param prefetchCount
     */
    public void setPrefetchCount(Long prefetchCount) {
        this.prefetchCount = prefetchCount;
    }


    /**
     * get 刷新个数，如果是首次设置，不传默认是50；已经设置，再次设置是更新，不传表示不进行更新
     *
     * @return
     */
    public Long getDirCount() {
        return dirCount;
    }

    /**
     * set 刷新个数，如果是首次设置，不传默认是50；已经设置，再次设置是更新，不传表示不进行更新
     *
     * @param dirCount
     */
    public void setDirCount(Long dirCount) {
        this.dirCount = dirCount;
    }



    /**
    * set 子账号，只有传值才会设置子账号，其余不传或传空是设置主账号
    *
    * @param subUsers
    */
    public SetRefreshLimitRequest subUsers(List<String> subUsers) {
        this.subUsers = subUsers;
        return this;
    }


    /**
     * set 刷新个数，如果是首次设置，不传默认是2000；已经设置，再次设置是更新，不传表示不进行更新
     *
     * @param refreshCount
     */
    public SetRefreshLimitRequest refreshCount(Long refreshCount) {
        this.refreshCount = refreshCount;
        return this;
    }


    /**
     * set 刷新个数，如果是首次设置，不传默认是2000；已经设置，再次设置是更新，不传表示不进行更新
     *
     * @param prefetchCount
     */
    public SetRefreshLimitRequest prefetchCount(Long prefetchCount) {
        this.prefetchCount = prefetchCount;
        return this;
    }


    /**
     * set 刷新个数，如果是首次设置，不传默认是50；已经设置，再次设置是更新，不传表示不进行更新
     *
     * @param dirCount
     */
    public SetRefreshLimitRequest dirCount(Long dirCount) {
        this.dirCount = dirCount;
        return this;
    }



    /**
     * add item to 子账号，只有传值才会设置子账号，其余不传或传空是设置主账号
     *
     * @param subUser
     */
    public void addSubUser(String subUser) {
        if (this.subUsers == null) {
            this.subUsers = new ArrayList<>();
        }
        this.subUsers.add(subUser);
    }
}