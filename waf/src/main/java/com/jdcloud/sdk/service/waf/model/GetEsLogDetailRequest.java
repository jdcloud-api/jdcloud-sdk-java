/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Data-Chart
 * Data-Chart API
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.waf.model;

import java.util.List;
import java.util.ArrayList;
import com.jdcloud.sdk.annotation.Required;
import com.jdcloud.sdk.service.JdcloudRequest;

/**
 * 获取网站在一定时间内的日志详情。
 */
public class GetEsLogDetailRequest extends JdcloudRequest implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 实例id，代表要查询的WAF实例，为空时表示当前用户下的所有实例
     */
    private String wafInstanceId;

    /**
     * 域名，为空时表示当前实例下的所有域名
     */
    private String domain;

    /**
     * 来源ip，检索字段
     */
    private String remote_addr;

    /**
     * URI，检索字段
     */
    private String document_uri;

    /**
     * url，检索字段
     */
    private String url;

    /**
     * 来源地域，检索字段
     */
    private String anti_geo;

    /**
     * 请求方法，检索字段
     */
    private String request_method;

    /**
     * 动作，检索字段，支持类型：&quot;&quot;(为空时，默认查询全部动作类型)，&quot;-&quot;(放行)，&quot;notice&quot;(观察)，&quot;forbidden&quot;(拦截)，&quot;redirect&quot;(浏览器跳转)，&quot;verify&quot;(人机交互)
     */
    private String action;

    /**
     * 状态码，检索字段
     */
    private String status;

    /**
     * 日志类型，检索字段，支持类型：&quot;&quot;(为空时，默认查询全部日志类型)，&quot;access&quot;(访问日志)，&quot;waf&quot;(wafSDK)，&quot;acl&quot;(自定义规则)，&quot;skip&quot;(白名单)，&quot;deny&quot;(黑名单)，&quot;cc&quot;(CC攻击)，&quot;webcache&quot;(网页防篡改)，&quot;css&quot;(跨站脚本攻击)，&quot;sqli&quot;(SQL注入攻击)，&quot;&quot;fileinc&quot;(文件读取/包含攻击)，&quot;cmding&quot;(命令/代码执行攻击)，&quot;sdd&quot;(敏感文件探测)，&quot;malscan&quot;(恶意扫描攻击)，&quot;bckack&quot;(恶意/后门文件攻击)，&quot;xmli&quot;(XML注入攻击)，&quot;dirt&quot;(目录遍历攻击)
     */
    private List<String> logType;

    /**
     * 日志Id，检索字段
     */
    private String logId;

    /**
     * 开始时间戳，单位秒，时间间隔要求大于5分钟，小于30天。
     * Required:true
     */
    @Required
    private Integer start;

    /**
     * 结束时间戳，单位秒，时间间隔要求大于5分钟，小于30天。
     * Required:true
     */
    @Required
    private Integer end;

    /**
     * 每页显示的个数，默认是10。
     * Required:true
     */
    @Required
    private Integer pageSize;

    /**
     * 页数，默认是1。
     * Required:true
     */
    @Required
    private Integer pageIndex;

    /**
     * 实例所属的地域ID
     * Required:true
     */
    @Required
    private String regionId;


    /**
     * get 实例id，代表要查询的WAF实例，为空时表示当前用户下的所有实例
     *
     * @return
     */
    public String getWafInstanceId() {
        return wafInstanceId;
    }

    /**
     * set 实例id，代表要查询的WAF实例，为空时表示当前用户下的所有实例
     *
     * @param wafInstanceId
     */
    public void setWafInstanceId(String wafInstanceId) {
        this.wafInstanceId = wafInstanceId;
    }

    /**
     * get 域名，为空时表示当前实例下的所有域名
     *
     * @return
     */
    public String getDomain() {
        return domain;
    }

    /**
     * set 域名，为空时表示当前实例下的所有域名
     *
     * @param domain
     */
    public void setDomain(String domain) {
        this.domain = domain;
    }

    /**
     * get 来源ip，检索字段
     *
     * @return
     */
    public String getRemote_addr() {
        return remote_addr;
    }

    /**
     * set 来源ip，检索字段
     *
     * @param remote_addr
     */
    public void setRemote_addr(String remote_addr) {
        this.remote_addr = remote_addr;
    }

    /**
     * get URI，检索字段
     *
     * @return
     */
    public String getDocument_uri() {
        return document_uri;
    }

    /**
     * set URI，检索字段
     *
     * @param document_uri
     */
    public void setDocument_uri(String document_uri) {
        this.document_uri = document_uri;
    }

    /**
     * get url，检索字段
     *
     * @return
     */
    public String getUrl() {
        return url;
    }

    /**
     * set url，检索字段
     *
     * @param url
     */
    public void setUrl(String url) {
        this.url = url;
    }

    /**
     * get 来源地域，检索字段
     *
     * @return
     */
    public String getAnti_geo() {
        return anti_geo;
    }

    /**
     * set 来源地域，检索字段
     *
     * @param anti_geo
     */
    public void setAnti_geo(String anti_geo) {
        this.anti_geo = anti_geo;
    }

    /**
     * get 请求方法，检索字段
     *
     * @return
     */
    public String getRequest_method() {
        return request_method;
    }

    /**
     * set 请求方法，检索字段
     *
     * @param request_method
     */
    public void setRequest_method(String request_method) {
        this.request_method = request_method;
    }

    /**
     * get 动作，检索字段，支持类型：&quot;&quot;(为空时，默认查询全部动作类型)，&quot;-&quot;(放行)，&quot;notice&quot;(观察)，&quot;forbidden&quot;(拦截)，&quot;redirect&quot;(浏览器跳转)，&quot;verify&quot;(人机交互)
     *
     * @return
     */
    public String getAction() {
        return action;
    }

    /**
     * set 动作，检索字段，支持类型：&quot;&quot;(为空时，默认查询全部动作类型)，&quot;-&quot;(放行)，&quot;notice&quot;(观察)，&quot;forbidden&quot;(拦截)，&quot;redirect&quot;(浏览器跳转)，&quot;verify&quot;(人机交互)
     *
     * @param action
     */
    public void setAction(String action) {
        this.action = action;
    }

    /**
     * get 状态码，检索字段
     *
     * @return
     */
    public String getStatus() {
        return status;
    }

    /**
     * set 状态码，检索字段
     *
     * @param status
     */
    public void setStatus(String status) {
        this.status = status;
    }

    /**
     * get 日志类型，检索字段，支持类型：&quot;&quot;(为空时，默认查询全部日志类型)，&quot;access&quot;(访问日志)，&quot;waf&quot;(wafSDK)，&quot;acl&quot;(自定义规则)，&quot;skip&quot;(白名单)，&quot;deny&quot;(黑名单)，&quot;cc&quot;(CC攻击)，&quot;webcache&quot;(网页防篡改)，&quot;css&quot;(跨站脚本攻击)，&quot;sqli&quot;(SQL注入攻击)，&quot;&quot;fileinc&quot;(文件读取/包含攻击)，&quot;cmding&quot;(命令/代码执行攻击)，&quot;sdd&quot;(敏感文件探测)，&quot;malscan&quot;(恶意扫描攻击)，&quot;bckack&quot;(恶意/后门文件攻击)，&quot;xmli&quot;(XML注入攻击)，&quot;dirt&quot;(目录遍历攻击)
     *
     * @return
     */
    public List<String> getLogType() {
        return logType;
    }

    /**
     * set 日志类型，检索字段，支持类型：&quot;&quot;(为空时，默认查询全部日志类型)，&quot;access&quot;(访问日志)，&quot;waf&quot;(wafSDK)，&quot;acl&quot;(自定义规则)，&quot;skip&quot;(白名单)，&quot;deny&quot;(黑名单)，&quot;cc&quot;(CC攻击)，&quot;webcache&quot;(网页防篡改)，&quot;css&quot;(跨站脚本攻击)，&quot;sqli&quot;(SQL注入攻击)，&quot;&quot;fileinc&quot;(文件读取/包含攻击)，&quot;cmding&quot;(命令/代码执行攻击)，&quot;sdd&quot;(敏感文件探测)，&quot;malscan&quot;(恶意扫描攻击)，&quot;bckack&quot;(恶意/后门文件攻击)，&quot;xmli&quot;(XML注入攻击)，&quot;dirt&quot;(目录遍历攻击)
     *
     * @param logType
     */
    public void setLogType(List<String> logType) {
        this.logType = logType;
    }

    /**
     * get 日志Id，检索字段
     *
     * @return
     */
    public String getLogId() {
        return logId;
    }

    /**
     * set 日志Id，检索字段
     *
     * @param logId
     */
    public void setLogId(String logId) {
        this.logId = logId;
    }

    /**
     * get 开始时间戳，单位秒，时间间隔要求大于5分钟，小于30天。
     *
     * @return
     */
    public Integer getStart() {
        return start;
    }

    /**
     * set 开始时间戳，单位秒，时间间隔要求大于5分钟，小于30天。
     *
     * @param start
     */
    public void setStart(Integer start) {
        this.start = start;
    }

    /**
     * get 结束时间戳，单位秒，时间间隔要求大于5分钟，小于30天。
     *
     * @return
     */
    public Integer getEnd() {
        return end;
    }

    /**
     * set 结束时间戳，单位秒，时间间隔要求大于5分钟，小于30天。
     *
     * @param end
     */
    public void setEnd(Integer end) {
        this.end = end;
    }

    /**
     * get 每页显示的个数，默认是10。
     *
     * @return
     */
    public Integer getPageSize() {
        return pageSize;
    }

    /**
     * set 每页显示的个数，默认是10。
     *
     * @param pageSize
     */
    public void setPageSize(Integer pageSize) {
        this.pageSize = pageSize;
    }

    /**
     * get 页数，默认是1。
     *
     * @return
     */
    public Integer getPageIndex() {
        return pageIndex;
    }

    /**
     * set 页数，默认是1。
     *
     * @param pageIndex
     */
    public void setPageIndex(Integer pageIndex) {
        this.pageIndex = pageIndex;
    }

    /**
     * get 实例所属的地域ID
     *
     * @return
     */
    public String getRegionId() {
        return regionId;
    }

    /**
     * set 实例所属的地域ID
     *
     * @param regionId
     */
    public void setRegionId(String regionId) {
        this.regionId = regionId;
    }


    /**
     * set 实例id，代表要查询的WAF实例，为空时表示当前用户下的所有实例
     *
     * @param wafInstanceId
     */
    public GetEsLogDetailRequest wafInstanceId(String wafInstanceId) {
        this.wafInstanceId = wafInstanceId;
        return this;
    }

    /**
     * set 域名，为空时表示当前实例下的所有域名
     *
     * @param domain
     */
    public GetEsLogDetailRequest domain(String domain) {
        this.domain = domain;
        return this;
    }

    /**
     * set 来源ip，检索字段
     *
     * @param remote_addr
     */
    public GetEsLogDetailRequest remote_addr(String remote_addr) {
        this.remote_addr = remote_addr;
        return this;
    }

    /**
     * set URI，检索字段
     *
     * @param document_uri
     */
    public GetEsLogDetailRequest document_uri(String document_uri) {
        this.document_uri = document_uri;
        return this;
    }

    /**
     * set url，检索字段
     *
     * @param url
     */
    public GetEsLogDetailRequest url(String url) {
        this.url = url;
        return this;
    }

    /**
     * set 来源地域，检索字段
     *
     * @param anti_geo
     */
    public GetEsLogDetailRequest anti_geo(String anti_geo) {
        this.anti_geo = anti_geo;
        return this;
    }

    /**
     * set 请求方法，检索字段
     *
     * @param request_method
     */
    public GetEsLogDetailRequest request_method(String request_method) {
        this.request_method = request_method;
        return this;
    }

    /**
     * set 动作，检索字段，支持类型：&quot;&quot;(为空时，默认查询全部动作类型)，&quot;-&quot;(放行)，&quot;notice&quot;(观察)，&quot;forbidden&quot;(拦截)，&quot;redirect&quot;(浏览器跳转)，&quot;verify&quot;(人机交互)
     *
     * @param action
     */
    public GetEsLogDetailRequest action(String action) {
        this.action = action;
        return this;
    }

    /**
     * set 状态码，检索字段
     *
     * @param status
     */
    public GetEsLogDetailRequest status(String status) {
        this.status = status;
        return this;
    }

    /**
     * set 日志类型，检索字段，支持类型：&quot;&quot;(为空时，默认查询全部日志类型)，&quot;access&quot;(访问日志)，&quot;waf&quot;(wafSDK)，&quot;acl&quot;(自定义规则)，&quot;skip&quot;(白名单)，&quot;deny&quot;(黑名单)，&quot;cc&quot;(CC攻击)，&quot;webcache&quot;(网页防篡改)，&quot;css&quot;(跨站脚本攻击)，&quot;sqli&quot;(SQL注入攻击)，&quot;&quot;fileinc&quot;(文件读取/包含攻击)，&quot;cmding&quot;(命令/代码执行攻击)，&quot;sdd&quot;(敏感文件探测)，&quot;malscan&quot;(恶意扫描攻击)，&quot;bckack&quot;(恶意/后门文件攻击)，&quot;xmli&quot;(XML注入攻击)，&quot;dirt&quot;(目录遍历攻击)
     *
     * @param logType
     */
    public GetEsLogDetailRequest logType(List<String> logType) {
        this.logType = logType;
        return this;
    }

    /**
     * set 日志Id，检索字段
     *
     * @param logId
     */
    public GetEsLogDetailRequest logId(String logId) {
        this.logId = logId;
        return this;
    }

    /**
     * set 开始时间戳，单位秒，时间间隔要求大于5分钟，小于30天。
     *
     * @param start
     */
    public GetEsLogDetailRequest start(Integer start) {
        this.start = start;
        return this;
    }

    /**
     * set 结束时间戳，单位秒，时间间隔要求大于5分钟，小于30天。
     *
     * @param end
     */
    public GetEsLogDetailRequest end(Integer end) {
        this.end = end;
        return this;
    }

    /**
     * set 每页显示的个数，默认是10。
     *
     * @param pageSize
     */
    public GetEsLogDetailRequest pageSize(Integer pageSize) {
        this.pageSize = pageSize;
        return this;
    }

    /**
     * set 页数，默认是1。
     *
     * @param pageIndex
     */
    public GetEsLogDetailRequest pageIndex(Integer pageIndex) {
        this.pageIndex = pageIndex;
        return this;
    }

    /**
     * set 实例所属的地域ID
     *
     * @param regionId
     */
    public GetEsLogDetailRequest regionId(String regionId) {
        this.regionId = regionId;
        return this;
    }


    /**
     * add item to 日志类型，检索字段，支持类型：&quot;&quot;(为空时，默认查询全部日志类型)，&quot;access&quot;(访问日志)，&quot;waf&quot;(wafSDK)，&quot;acl&quot;(自定义规则)，&quot;skip&quot;(白名单)，&quot;deny&quot;(黑名单)，&quot;cc&quot;(CC攻击)，&quot;webcache&quot;(网页防篡改)，&quot;css&quot;(跨站脚本攻击)，&quot;sqli&quot;(SQL注入攻击)，&quot;&quot;fileinc&quot;(文件读取/包含攻击)，&quot;cmding&quot;(命令/代码执行攻击)，&quot;sdd&quot;(敏感文件探测)，&quot;malscan&quot;(恶意扫描攻击)，&quot;bckack&quot;(恶意/后门文件攻击)，&quot;xmli&quot;(XML注入攻击)，&quot;dirt&quot;(目录遍历攻击)
     *
     * @param logType
     */
    public void addLogType(String logType) {
        if (this.logType == null) {
            this.logType = new ArrayList<>();
        }
        this.logType.add(logType);
    }

}