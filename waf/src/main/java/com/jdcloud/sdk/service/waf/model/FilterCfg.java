/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * 
 *
 * 
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.waf.model;


/**
 * filterCfg
 */
public class FilterCfg  implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 序号,不作更新使用
     */
    private Integer id;

    /**
     * 请求位置 当匹配类型为&quot;str&quot;/&quot;regex&quot;/&quot;size&quot;时，可选字段：[&quot;headers&quot;/&quot;cookie&quot;/&quot;args&quot;/&quot;body&quot;/&quot;uri&quot;/&quot;method&quot;] | 匹配类型为&quot;SQLi&quot;/&quot;XSS&quot;时:可选字段：[&quot;headers&quot;/&quot;cookie&quot;/&quot;args&quot;/&quot;body&quot;/&quot;uri&quot;]|当匹配类型为&quot;geo&quot;/&quot;ip&quot;时，该字段为空
     */
    private String partOfReq;

    /**
     * 指定key，匹配类型为&quot;geo&quot;/&quot;ip&quot;时，该字段为空,|  partOfReq为uri/body/method 时，该字段为空，header/cookie时非空，args时选填
     */
    private String reqKey;

    /**
     * 匹配类型&quot;str&quot;时：[&quot;startsWith&quot;/&quot;endsWith&quot;/&quot;contains&quot;/&quot;equal&quot;]|匹配类型为&quot;geo&quot;/&quot;SQLi&quot;/&quot;XSS&quot;/&quot;regex&quot;时：&quot;&quot;|匹配类型为&quot;size&quot;时：[&quot;equal&quot;/&quot;notEquals&quot;/&quot;greaterThan&quot;/&quot;greaterThanOrEqual&quot;/&quot;lessThan&quot;/&quot;lessThanOrEqual&quot;]
     */
    private String matchLogic;

    /**
     * // 匹配类型为&quot;SQLi&quot;/&quot;XSS&quot;时:&quot;&quot;，匹配类型为&quot;geo&quot;时:该值为省份名称。匹配类型为&quot;ip&quot;时，该值为 ipv4/8/16/24/32)/ipv6/64 ipv6/128)| 匹配类型为&quot;size&quot;时:数字字符串 其他类型不限
     */
    private String reqValue;

    /**
     * 仅type为str regex SQLi XSS时可非空，取值&quot;&quot;,&quot;lowercase&quot;,&quot;trim&quot;,&quot;base64Decode&quot;,&quot;urlDecode&quot;,&quot;htmlDecode&quot;,&quot;hexDecode&quot;,&quot;sqlTrim&quot;按先后顺序，多个时用 , 分隔
     */
    private String decodeFunc;

    /**
     * 不解码&quot;base64Decode&quot;解码,str时才有
     */
    private String isBase64Decode;


    /**
     * get 序号,不作更新使用
     *
     * @return
     */
    public Integer getId() {
        return id;
    }

    /**
     * set 序号,不作更新使用
     *
     * @param id
     */
    public void setId(Integer id) {
        this.id = id;
    }

    /**
     * get 请求位置 当匹配类型为&quot;str&quot;/&quot;regex&quot;/&quot;size&quot;时，可选字段：[&quot;headers&quot;/&quot;cookie&quot;/&quot;args&quot;/&quot;body&quot;/&quot;uri&quot;/&quot;method&quot;] | 匹配类型为&quot;SQLi&quot;/&quot;XSS&quot;时:可选字段：[&quot;headers&quot;/&quot;cookie&quot;/&quot;args&quot;/&quot;body&quot;/&quot;uri&quot;]|当匹配类型为&quot;geo&quot;/&quot;ip&quot;时，该字段为空
     *
     * @return
     */
    public String getPartOfReq() {
        return partOfReq;
    }

    /**
     * set 请求位置 当匹配类型为&quot;str&quot;/&quot;regex&quot;/&quot;size&quot;时，可选字段：[&quot;headers&quot;/&quot;cookie&quot;/&quot;args&quot;/&quot;body&quot;/&quot;uri&quot;/&quot;method&quot;] | 匹配类型为&quot;SQLi&quot;/&quot;XSS&quot;时:可选字段：[&quot;headers&quot;/&quot;cookie&quot;/&quot;args&quot;/&quot;body&quot;/&quot;uri&quot;]|当匹配类型为&quot;geo&quot;/&quot;ip&quot;时，该字段为空
     *
     * @param partOfReq
     */
    public void setPartOfReq(String partOfReq) {
        this.partOfReq = partOfReq;
    }

    /**
     * get 指定key，匹配类型为&quot;geo&quot;/&quot;ip&quot;时，该字段为空,|  partOfReq为uri/body/method 时，该字段为空，header/cookie时非空，args时选填
     *
     * @return
     */
    public String getReqKey() {
        return reqKey;
    }

    /**
     * set 指定key，匹配类型为&quot;geo&quot;/&quot;ip&quot;时，该字段为空,|  partOfReq为uri/body/method 时，该字段为空，header/cookie时非空，args时选填
     *
     * @param reqKey
     */
    public void setReqKey(String reqKey) {
        this.reqKey = reqKey;
    }

    /**
     * get 匹配类型&quot;str&quot;时：[&quot;startsWith&quot;/&quot;endsWith&quot;/&quot;contains&quot;/&quot;equal&quot;]|匹配类型为&quot;geo&quot;/&quot;SQLi&quot;/&quot;XSS&quot;/&quot;regex&quot;时：&quot;&quot;|匹配类型为&quot;size&quot;时：[&quot;equal&quot;/&quot;notEquals&quot;/&quot;greaterThan&quot;/&quot;greaterThanOrEqual&quot;/&quot;lessThan&quot;/&quot;lessThanOrEqual&quot;]
     *
     * @return
     */
    public String getMatchLogic() {
        return matchLogic;
    }

    /**
     * set 匹配类型&quot;str&quot;时：[&quot;startsWith&quot;/&quot;endsWith&quot;/&quot;contains&quot;/&quot;equal&quot;]|匹配类型为&quot;geo&quot;/&quot;SQLi&quot;/&quot;XSS&quot;/&quot;regex&quot;时：&quot;&quot;|匹配类型为&quot;size&quot;时：[&quot;equal&quot;/&quot;notEquals&quot;/&quot;greaterThan&quot;/&quot;greaterThanOrEqual&quot;/&quot;lessThan&quot;/&quot;lessThanOrEqual&quot;]
     *
     * @param matchLogic
     */
    public void setMatchLogic(String matchLogic) {
        this.matchLogic = matchLogic;
    }

    /**
     * get // 匹配类型为&quot;SQLi&quot;/&quot;XSS&quot;时:&quot;&quot;，匹配类型为&quot;geo&quot;时:该值为省份名称。匹配类型为&quot;ip&quot;时，该值为 ipv4/8/16/24/32)/ipv6/64 ipv6/128)| 匹配类型为&quot;size&quot;时:数字字符串 其他类型不限
     *
     * @return
     */
    public String getReqValue() {
        return reqValue;
    }

    /**
     * set // 匹配类型为&quot;SQLi&quot;/&quot;XSS&quot;时:&quot;&quot;，匹配类型为&quot;geo&quot;时:该值为省份名称。匹配类型为&quot;ip&quot;时，该值为 ipv4/8/16/24/32)/ipv6/64 ipv6/128)| 匹配类型为&quot;size&quot;时:数字字符串 其他类型不限
     *
     * @param reqValue
     */
    public void setReqValue(String reqValue) {
        this.reqValue = reqValue;
    }

    /**
     * get 仅type为str regex SQLi XSS时可非空，取值&quot;&quot;,&quot;lowercase&quot;,&quot;trim&quot;,&quot;base64Decode&quot;,&quot;urlDecode&quot;,&quot;htmlDecode&quot;,&quot;hexDecode&quot;,&quot;sqlTrim&quot;按先后顺序，多个时用 , 分隔
     *
     * @return
     */
    public String getDecodeFunc() {
        return decodeFunc;
    }

    /**
     * set 仅type为str regex SQLi XSS时可非空，取值&quot;&quot;,&quot;lowercase&quot;,&quot;trim&quot;,&quot;base64Decode&quot;,&quot;urlDecode&quot;,&quot;htmlDecode&quot;,&quot;hexDecode&quot;,&quot;sqlTrim&quot;按先后顺序，多个时用 , 分隔
     *
     * @param decodeFunc
     */
    public void setDecodeFunc(String decodeFunc) {
        this.decodeFunc = decodeFunc;
    }

    /**
     * get 不解码&quot;base64Decode&quot;解码,str时才有
     *
     * @return
     */
    public String getIsBase64Decode() {
        return isBase64Decode;
    }

    /**
     * set 不解码&quot;base64Decode&quot;解码,str时才有
     *
     * @param isBase64Decode
     */
    public void setIsBase64Decode(String isBase64Decode) {
        this.isBase64Decode = isBase64Decode;
    }


    /**
     * set 序号,不作更新使用
     *
     * @param id
     */
    public FilterCfg id(Integer id) {
        this.id = id;
        return this;
    }

    /**
     * set 请求位置 当匹配类型为&quot;str&quot;/&quot;regex&quot;/&quot;size&quot;时，可选字段：[&quot;headers&quot;/&quot;cookie&quot;/&quot;args&quot;/&quot;body&quot;/&quot;uri&quot;/&quot;method&quot;] | 匹配类型为&quot;SQLi&quot;/&quot;XSS&quot;时:可选字段：[&quot;headers&quot;/&quot;cookie&quot;/&quot;args&quot;/&quot;body&quot;/&quot;uri&quot;]|当匹配类型为&quot;geo&quot;/&quot;ip&quot;时，该字段为空
     *
     * @param partOfReq
     */
    public FilterCfg partOfReq(String partOfReq) {
        this.partOfReq = partOfReq;
        return this;
    }

    /**
     * set 指定key，匹配类型为&quot;geo&quot;/&quot;ip&quot;时，该字段为空,|  partOfReq为uri/body/method 时，该字段为空，header/cookie时非空，args时选填
     *
     * @param reqKey
     */
    public FilterCfg reqKey(String reqKey) {
        this.reqKey = reqKey;
        return this;
    }

    /**
     * set 匹配类型&quot;str&quot;时：[&quot;startsWith&quot;/&quot;endsWith&quot;/&quot;contains&quot;/&quot;equal&quot;]|匹配类型为&quot;geo&quot;/&quot;SQLi&quot;/&quot;XSS&quot;/&quot;regex&quot;时：&quot;&quot;|匹配类型为&quot;size&quot;时：[&quot;equal&quot;/&quot;notEquals&quot;/&quot;greaterThan&quot;/&quot;greaterThanOrEqual&quot;/&quot;lessThan&quot;/&quot;lessThanOrEqual&quot;]
     *
     * @param matchLogic
     */
    public FilterCfg matchLogic(String matchLogic) {
        this.matchLogic = matchLogic;
        return this;
    }

    /**
     * set // 匹配类型为&quot;SQLi&quot;/&quot;XSS&quot;时:&quot;&quot;，匹配类型为&quot;geo&quot;时:该值为省份名称。匹配类型为&quot;ip&quot;时，该值为 ipv4/8/16/24/32)/ipv6/64 ipv6/128)| 匹配类型为&quot;size&quot;时:数字字符串 其他类型不限
     *
     * @param reqValue
     */
    public FilterCfg reqValue(String reqValue) {
        this.reqValue = reqValue;
        return this;
    }

    /**
     * set 仅type为str regex SQLi XSS时可非空，取值&quot;&quot;,&quot;lowercase&quot;,&quot;trim&quot;,&quot;base64Decode&quot;,&quot;urlDecode&quot;,&quot;htmlDecode&quot;,&quot;hexDecode&quot;,&quot;sqlTrim&quot;按先后顺序，多个时用 , 分隔
     *
     * @param decodeFunc
     */
    public FilterCfg decodeFunc(String decodeFunc) {
        this.decodeFunc = decodeFunc;
        return this;
    }

    /**
     * set 不解码&quot;base64Decode&quot;解码,str时才有
     *
     * @param isBase64Decode
     */
    public FilterCfg isBase64Decode(String isBase64Decode) {
        this.isBase64Decode = isBase64Decode;
        return this;
    }


}