/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * 
 *
 * 
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.waf.model;

import java.util.List;
import java.util.ArrayList;

/**
 * domainMainConfig
 */
public class DomainMainConfig  implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 域名
     */
    private String domain;

    /**
     * cname域名
     */
    private String cname;

    /**
     * 绑定的证书名称
     */
    private String certName;

    /**
     * 使用协议，[&quot;http&quot;,&quot;https&quot;]
     */
    private List<String> protocols;

    /**
     * ssl协议，[&quot;TLSv1&quot;,&quot;TLSv1.1&quot;,&quot;TLSv1.2&quot;,&quot;SSLv2&quot;,&quot;SSLv3&quot;]
     */
    private List<String> sslProtocols;

    /**
     * 前置代理，1：使用 0：不使用
     */
    private Integer pureClient;

    /**
     * 协议状态，0：正常
     */
    private Integer httpStatus;

    /**
     * 防护状态，0：关闭 1：开启
     */
    private AntiStatus antiStatus;

    /**
     * 1：bypass 0：防护模式
     */
    private Integer disableWaf;

    /**
     * 近七天攻击详情
     */
    private AttackInfo attackInfo;

    /**
     * 网站dns配置
     */
    private DnsStatus dnsStatus;

    /**
     * cname解析状态。0为解析到VIP，1为解析到回源地址
     */
    private Integer enableCname2Rs;

    /**
     * cname解析状态。0为解析到VIP，1为解析到回源地址
     */
    private Integer enableIpv6;

    /**
     * 域名的地域信息，类型是map[string]regionVipInfo
     */
    private DomainRegionInfo region;


    /**
     * get 域名
     *
     * @return
     */
    public String getDomain() {
        return domain;
    }

    /**
     * set 域名
     *
     * @param domain
     */
    public void setDomain(String domain) {
        this.domain = domain;
    }

    /**
     * get cname域名
     *
     * @return
     */
    public String getCname() {
        return cname;
    }

    /**
     * set cname域名
     *
     * @param cname
     */
    public void setCname(String cname) {
        this.cname = cname;
    }

    /**
     * get 绑定的证书名称
     *
     * @return
     */
    public String getCertName() {
        return certName;
    }

    /**
     * set 绑定的证书名称
     *
     * @param certName
     */
    public void setCertName(String certName) {
        this.certName = certName;
    }

    /**
     * get 使用协议，[&quot;http&quot;,&quot;https&quot;]
     *
     * @return
     */
    public List<String> getProtocols() {
        return protocols;
    }

    /**
     * set 使用协议，[&quot;http&quot;,&quot;https&quot;]
     *
     * @param protocols
     */
    public void setProtocols(List<String> protocols) {
        this.protocols = protocols;
    }

    /**
     * get ssl协议，[&quot;TLSv1&quot;,&quot;TLSv1.1&quot;,&quot;TLSv1.2&quot;,&quot;SSLv2&quot;,&quot;SSLv3&quot;]
     *
     * @return
     */
    public List<String> getSslProtocols() {
        return sslProtocols;
    }

    /**
     * set ssl协议，[&quot;TLSv1&quot;,&quot;TLSv1.1&quot;,&quot;TLSv1.2&quot;,&quot;SSLv2&quot;,&quot;SSLv3&quot;]
     *
     * @param sslProtocols
     */
    public void setSslProtocols(List<String> sslProtocols) {
        this.sslProtocols = sslProtocols;
    }

    /**
     * get 前置代理，1：使用 0：不使用
     *
     * @return
     */
    public Integer getPureClient() {
        return pureClient;
    }

    /**
     * set 前置代理，1：使用 0：不使用
     *
     * @param pureClient
     */
    public void setPureClient(Integer pureClient) {
        this.pureClient = pureClient;
    }

    /**
     * get 协议状态，0：正常
     *
     * @return
     */
    public Integer getHttpStatus() {
        return httpStatus;
    }

    /**
     * set 协议状态，0：正常
     *
     * @param httpStatus
     */
    public void setHttpStatus(Integer httpStatus) {
        this.httpStatus = httpStatus;
    }

    /**
     * get 防护状态，0：关闭 1：开启
     *
     * @return
     */
    public AntiStatus getAntiStatus() {
        return antiStatus;
    }

    /**
     * set 防护状态，0：关闭 1：开启
     *
     * @param antiStatus
     */
    public void setAntiStatus(AntiStatus antiStatus) {
        this.antiStatus = antiStatus;
    }

    /**
     * get 1：bypass 0：防护模式
     *
     * @return
     */
    public Integer getDisableWaf() {
        return disableWaf;
    }

    /**
     * set 1：bypass 0：防护模式
     *
     * @param disableWaf
     */
    public void setDisableWaf(Integer disableWaf) {
        this.disableWaf = disableWaf;
    }

    /**
     * get 近七天攻击详情
     *
     * @return
     */
    public AttackInfo getAttackInfo() {
        return attackInfo;
    }

    /**
     * set 近七天攻击详情
     *
     * @param attackInfo
     */
    public void setAttackInfo(AttackInfo attackInfo) {
        this.attackInfo = attackInfo;
    }

    /**
     * get 网站dns配置
     *
     * @return
     */
    public DnsStatus getDnsStatus() {
        return dnsStatus;
    }

    /**
     * set 网站dns配置
     *
     * @param dnsStatus
     */
    public void setDnsStatus(DnsStatus dnsStatus) {
        this.dnsStatus = dnsStatus;
    }

    /**
     * get cname解析状态。0为解析到VIP，1为解析到回源地址
     *
     * @return
     */
    public Integer getEnableCname2Rs() {
        return enableCname2Rs;
    }

    /**
     * set cname解析状态。0为解析到VIP，1为解析到回源地址
     *
     * @param enableCname2Rs
     */
    public void setEnableCname2Rs(Integer enableCname2Rs) {
        this.enableCname2Rs = enableCname2Rs;
    }

    /**
     * get cname解析状态。0为解析到VIP，1为解析到回源地址
     *
     * @return
     */
    public Integer getEnableIpv6() {
        return enableIpv6;
    }

    /**
     * set cname解析状态。0为解析到VIP，1为解析到回源地址
     *
     * @param enableIpv6
     */
    public void setEnableIpv6(Integer enableIpv6) {
        this.enableIpv6 = enableIpv6;
    }

    /**
     * get 域名的地域信息，类型是map[string]regionVipInfo
     *
     * @return
     */
    public DomainRegionInfo getRegion() {
        return region;
    }

    /**
     * set 域名的地域信息，类型是map[string]regionVipInfo
     *
     * @param region
     */
    public void setRegion(DomainRegionInfo region) {
        this.region = region;
    }


    /**
     * set 域名
     *
     * @param domain
     */
    public DomainMainConfig domain(String domain) {
        this.domain = domain;
        return this;
    }

    /**
     * set cname域名
     *
     * @param cname
     */
    public DomainMainConfig cname(String cname) {
        this.cname = cname;
        return this;
    }

    /**
     * set 绑定的证书名称
     *
     * @param certName
     */
    public DomainMainConfig certName(String certName) {
        this.certName = certName;
        return this;
    }

    /**
     * set 使用协议，[&quot;http&quot;,&quot;https&quot;]
     *
     * @param protocols
     */
    public DomainMainConfig protocols(List<String> protocols) {
        this.protocols = protocols;
        return this;
    }

    /**
     * set ssl协议，[&quot;TLSv1&quot;,&quot;TLSv1.1&quot;,&quot;TLSv1.2&quot;,&quot;SSLv2&quot;,&quot;SSLv3&quot;]
     *
     * @param sslProtocols
     */
    public DomainMainConfig sslProtocols(List<String> sslProtocols) {
        this.sslProtocols = sslProtocols;
        return this;
    }

    /**
     * set 前置代理，1：使用 0：不使用
     *
     * @param pureClient
     */
    public DomainMainConfig pureClient(Integer pureClient) {
        this.pureClient = pureClient;
        return this;
    }

    /**
     * set 协议状态，0：正常
     *
     * @param httpStatus
     */
    public DomainMainConfig httpStatus(Integer httpStatus) {
        this.httpStatus = httpStatus;
        return this;
    }

    /**
     * set 防护状态，0：关闭 1：开启
     *
     * @param antiStatus
     */
    public DomainMainConfig antiStatus(AntiStatus antiStatus) {
        this.antiStatus = antiStatus;
        return this;
    }

    /**
     * set 1：bypass 0：防护模式
     *
     * @param disableWaf
     */
    public DomainMainConfig disableWaf(Integer disableWaf) {
        this.disableWaf = disableWaf;
        return this;
    }

    /**
     * set 近七天攻击详情
     *
     * @param attackInfo
     */
    public DomainMainConfig attackInfo(AttackInfo attackInfo) {
        this.attackInfo = attackInfo;
        return this;
    }

    /**
     * set 网站dns配置
     *
     * @param dnsStatus
     */
    public DomainMainConfig dnsStatus(DnsStatus dnsStatus) {
        this.dnsStatus = dnsStatus;
        return this;
    }

    /**
     * set cname解析状态。0为解析到VIP，1为解析到回源地址
     *
     * @param enableCname2Rs
     */
    public DomainMainConfig enableCname2Rs(Integer enableCname2Rs) {
        this.enableCname2Rs = enableCname2Rs;
        return this;
    }

    /**
     * set cname解析状态。0为解析到VIP，1为解析到回源地址
     *
     * @param enableIpv6
     */
    public DomainMainConfig enableIpv6(Integer enableIpv6) {
        this.enableIpv6 = enableIpv6;
        return this;
    }

    /**
     * set 域名的地域信息，类型是map[string]regionVipInfo
     *
     * @param region
     */
    public DomainMainConfig region(DomainRegionInfo region) {
        this.region = region;
        return this;
    }


    /**
     * add item to 使用协议，[&quot;http&quot;,&quot;https&quot;]
     *
     * @param protocol
     */
    public void addProtocol(String protocol) {
        if (this.protocols == null) {
            this.protocols = new ArrayList<>();
        }
        this.protocols.add(protocol);
    }

    /**
     * add item to ssl协议，[&quot;TLSv1&quot;,&quot;TLSv1.1&quot;,&quot;TLSv1.2&quot;,&quot;SSLv2&quot;,&quot;SSLv3&quot;]
     *
     * @param sslProtocol
     */
    public void addSslProtocol(String sslProtocol) {
        if (this.sslProtocols == null) {
            this.sslProtocols = new ArrayList<>();
        }
        this.sslProtocols.add(sslProtocol);
    }

}