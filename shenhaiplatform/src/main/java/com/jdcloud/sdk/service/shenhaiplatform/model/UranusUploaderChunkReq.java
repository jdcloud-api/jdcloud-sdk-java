/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * 
 *
 * 
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.shenhaiplatform.model;

import java.util.List;
import java.util.ArrayList;
import com.jdcloud.sdk.annotation.Required;

/**
 * uranusUploaderChunkReq
 */
public class UranusUploaderChunkReq  implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 文件类型
     */
    private Integer fileTypeCode;

    /**
     * 是否spark-jar的管理模块,spark-jar操作hdfs通过字段区分
     */
    private Boolean isJarManagement;

    /**
     * 任务流Code
     * Required:true
     */
    @Required
    private String flowCode;

    /**
     * 文件夹上传的时候文件的相对路径属性
     */
    private String relativePath;

    /**
     * 文件唯一标识
     */
    private String uploadId;

    /**
     * 当前块的次序，第一个块是 1，注意不是从 0 开始的
     */
    private Integer chunkNumber;

    /**
     * 文件被分成块的总数
     */
    private Integer totalChunks;

    /**
     * 分块大小，根据 totalSize 和这个值你就可以计算出总共的块数。注意最后一块的大小可能会比这个要大
     */
    private Long chunkSize;

    /**
     * 当前块的大小，实际大小
     */
    private Long currentChunkSize;

    /**
     * 文件总大小
     */
    private Long totalSize;

    /**
     * 文件名
     * Required:true
     */
    @Required
    private String filename;

    /**
     * file
     */
    private String file;

    /**
     * 文件字节数组
     */
    
    private List<String> fileBytes;
    /**
     * partETagList
     */
    
    private List<UranusUploaderPartETag> partETagList;


    /**
     * get 文件类型
     *
     * @return
     */
    public Integer getFileTypeCode() {
        return fileTypeCode;
    }

    /**
     * set 文件类型
     *
     * @param fileTypeCode
     */
    public void setFileTypeCode(Integer fileTypeCode) {
        this.fileTypeCode = fileTypeCode;
    }


    /**
     * get 是否spark-jar的管理模块,spark-jar操作hdfs通过字段区分
     *
     * @return
     */
    public Boolean getIsJarManagement() {
        return isJarManagement;
    }

    /**
     * set 是否spark-jar的管理模块,spark-jar操作hdfs通过字段区分
     *
     * @param isJarManagement
     */
    public void setIsJarManagement(Boolean isJarManagement) {
        this.isJarManagement = isJarManagement;
    }


    /**
     * get 任务流Code
     *
     * @return
     */
    public String getFlowCode() {
        return flowCode;
    }

    /**
     * set 任务流Code
     *
     * @param flowCode
     */
    public void setFlowCode(String flowCode) {
        this.flowCode = flowCode;
    }


    /**
     * get 文件夹上传的时候文件的相对路径属性
     *
     * @return
     */
    public String getRelativePath() {
        return relativePath;
    }

    /**
     * set 文件夹上传的时候文件的相对路径属性
     *
     * @param relativePath
     */
    public void setRelativePath(String relativePath) {
        this.relativePath = relativePath;
    }


    /**
     * get 文件唯一标识
     *
     * @return
     */
    public String getUploadId() {
        return uploadId;
    }

    /**
     * set 文件唯一标识
     *
     * @param uploadId
     */
    public void setUploadId(String uploadId) {
        this.uploadId = uploadId;
    }


    /**
     * get 当前块的次序，第一个块是 1，注意不是从 0 开始的
     *
     * @return
     */
    public Integer getChunkNumber() {
        return chunkNumber;
    }

    /**
     * set 当前块的次序，第一个块是 1，注意不是从 0 开始的
     *
     * @param chunkNumber
     */
    public void setChunkNumber(Integer chunkNumber) {
        this.chunkNumber = chunkNumber;
    }


    /**
     * get 文件被分成块的总数
     *
     * @return
     */
    public Integer getTotalChunks() {
        return totalChunks;
    }

    /**
     * set 文件被分成块的总数
     *
     * @param totalChunks
     */
    public void setTotalChunks(Integer totalChunks) {
        this.totalChunks = totalChunks;
    }


    /**
     * get 分块大小，根据 totalSize 和这个值你就可以计算出总共的块数。注意最后一块的大小可能会比这个要大
     *
     * @return
     */
    public Long getChunkSize() {
        return chunkSize;
    }

    /**
     * set 分块大小，根据 totalSize 和这个值你就可以计算出总共的块数。注意最后一块的大小可能会比这个要大
     *
     * @param chunkSize
     */
    public void setChunkSize(Long chunkSize) {
        this.chunkSize = chunkSize;
    }


    /**
     * get 当前块的大小，实际大小
     *
     * @return
     */
    public Long getCurrentChunkSize() {
        return currentChunkSize;
    }

    /**
     * set 当前块的大小，实际大小
     *
     * @param currentChunkSize
     */
    public void setCurrentChunkSize(Long currentChunkSize) {
        this.currentChunkSize = currentChunkSize;
    }


    /**
     * get 文件总大小
     *
     * @return
     */
    public Long getTotalSize() {
        return totalSize;
    }

    /**
     * set 文件总大小
     *
     * @param totalSize
     */
    public void setTotalSize(Long totalSize) {
        this.totalSize = totalSize;
    }


    /**
     * get 文件名
     *
     * @return
     */
    public String getFilename() {
        return filename;
    }

    /**
     * set 文件名
     *
     * @param filename
     */
    public void setFilename(String filename) {
        this.filename = filename;
    }


    /**
     * get file
     *
     * @return
     */
    public String getFile() {
        return file;
    }

    /**
     * set file
     *
     * @param file
     */
    public void setFile(String file) {
        this.file = file;
    }


    /**
    * get 文件字节数组
    *
    * @return
    */
    public List<String> getFileBytes() {
        return fileBytes;
    }

    /**
    * set 文件字节数组
    *
    * @param fileBytes
    */
    public void setFileBytes(List<String> fileBytes) {
        this.fileBytes = fileBytes;
    }


    /**
    * get partETagList
    *
    * @return
    */
    public List<UranusUploaderPartETag> getPartETagList() {
        return partETagList;
    }

    /**
    * set partETagList
    *
    * @param partETagList
    */
    public void setPartETagList(List<UranusUploaderPartETag> partETagList) {
        this.partETagList = partETagList;
    }



    /**
     * set 文件类型
     *
     * @param fileTypeCode
     */
    public UranusUploaderChunkReq fileTypeCode(Integer fileTypeCode) {
        this.fileTypeCode = fileTypeCode;
        return this;
    }


    /**
     * set 是否spark-jar的管理模块,spark-jar操作hdfs通过字段区分
     *
     * @param isJarManagement
     */
    public UranusUploaderChunkReq isJarManagement(Boolean isJarManagement) {
        this.isJarManagement = isJarManagement;
        return this;
    }


    /**
     * set 任务流Code
     *
     * @param flowCode
     */
    public UranusUploaderChunkReq flowCode(String flowCode) {
        this.flowCode = flowCode;
        return this;
    }


    /**
     * set 文件夹上传的时候文件的相对路径属性
     *
     * @param relativePath
     */
    public UranusUploaderChunkReq relativePath(String relativePath) {
        this.relativePath = relativePath;
        return this;
    }


    /**
     * set 文件唯一标识
     *
     * @param uploadId
     */
    public UranusUploaderChunkReq uploadId(String uploadId) {
        this.uploadId = uploadId;
        return this;
    }


    /**
     * set 当前块的次序，第一个块是 1，注意不是从 0 开始的
     *
     * @param chunkNumber
     */
    public UranusUploaderChunkReq chunkNumber(Integer chunkNumber) {
        this.chunkNumber = chunkNumber;
        return this;
    }


    /**
     * set 文件被分成块的总数
     *
     * @param totalChunks
     */
    public UranusUploaderChunkReq totalChunks(Integer totalChunks) {
        this.totalChunks = totalChunks;
        return this;
    }


    /**
     * set 分块大小，根据 totalSize 和这个值你就可以计算出总共的块数。注意最后一块的大小可能会比这个要大
     *
     * @param chunkSize
     */
    public UranusUploaderChunkReq chunkSize(Long chunkSize) {
        this.chunkSize = chunkSize;
        return this;
    }


    /**
     * set 当前块的大小，实际大小
     *
     * @param currentChunkSize
     */
    public UranusUploaderChunkReq currentChunkSize(Long currentChunkSize) {
        this.currentChunkSize = currentChunkSize;
        return this;
    }


    /**
     * set 文件总大小
     *
     * @param totalSize
     */
    public UranusUploaderChunkReq totalSize(Long totalSize) {
        this.totalSize = totalSize;
        return this;
    }


    /**
     * set 文件名
     *
     * @param filename
     */
    public UranusUploaderChunkReq filename(String filename) {
        this.filename = filename;
        return this;
    }


    /**
     * set file
     *
     * @param file
     */
    public UranusUploaderChunkReq file(String file) {
        this.file = file;
        return this;
    }


    /**
    * set 文件字节数组
    *
    * @param fileBytes
    */
    public UranusUploaderChunkReq fileBytes(List<String> fileBytes) {
        this.fileBytes = fileBytes;
        return this;
    }


    /**
    * set partETagList
    *
    * @param partETagList
    */
    public UranusUploaderChunkReq partETagList(List<UranusUploaderPartETag> partETagList) {
        this.partETagList = partETagList;
        return this;
    }



    /**
     * add item to 文件字节数组
     *
     * @param fileByte
     */
    public void addFileByte(String fileByte) {
        if (this.fileBytes == null) {
            this.fileBytes = new ArrayList<>();
        }
        this.fileBytes.add(fileByte);
    }

    /**
     * add item to partETagList
     *
     * @param partETagList
     */
    public void addPartETagList(UranusUploaderPartETag partETagList) {
        if (this.partETagList == null) {
            this.partETagList = new ArrayList<>();
        }
        this.partETagList.add(partETagList);
    }
}