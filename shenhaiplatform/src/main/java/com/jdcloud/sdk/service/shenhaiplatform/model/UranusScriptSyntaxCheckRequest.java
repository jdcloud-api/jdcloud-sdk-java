/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * ShenHaiPlatform Admin Manage APIs
 * 流程画布目录树管理
 *
 * OpenAPI spec version: v2
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.shenhaiplatform.model;

import java.util.List;
import java.util.ArrayList;
import com.jdcloud.sdk.annotation.Required;
import com.jdcloud.sdk.service.shenhaiplatform.model.UranusTaskParamReq;
import com.jdcloud.sdk.service.shenhaiplatform.model.TaskInfoLoopReq;
import com.jdcloud.sdk.service.JdcloudRequest;

/**
 * sql语法检测
 */
public class UranusScriptSyntaxCheckRequest extends JdcloudRequest implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 流程code
     * Required:true
     */
    @Required
    private String flowCode;

    /**
     * 数据源code
     * Required:true
     */
    @Required
    private String dataSourceCode;

    /**
     * 文件code
     * Required:true
     */
    @Required
    private String fileCode;

    /**
     * 文件名称
     * Required:true
     */
    @Required
    private String fileName;

    /**
     * 文件类型 SQL,SHELL,PYTHON,PERL,R,SparkJar,StarRocks,MySQL
     * Required:true
     */
    @Required
    private String fileType;

    /**
     * 脚本内容
     * Required:true
     */
    @Required
    private String content;

    /**
     * sql执行引擎 apReduce,Spark,Tez,presto,Python2,Python3,auto,StarRocks,MySQL
     * Required:true
     */
    @Required
    private String execEngine;

    /**
     * 脚本参数配置
     */
    
    private List<UranusTaskParamReq> args;
    /**
     * sql脚本是否全部执行 是false,否true
     * Required:true
     */
    @Required
    private Boolean segment;

    /**
     * 队列名称
     */
    private String resourceName;

    /**
     * 队列code
     */
    private String resourceCode;

    /**
     * 循环节点信息
     */
    
    private List<TaskInfoLoopReq> loopInfo;
    /**
     * 地域ID
     * Required:true
     */
    @Required
    private String regionId;

    /**
     * 应用名称
     * Required:true
     */
    @Required
    private String appName;



    /**
     * get 流程code
     *
     * @return
     */
    public String getFlowCode() {
        return flowCode;
    }

    /**
     * set 流程code
     *
     * @param flowCode
     */
    public void setFlowCode(String flowCode) {
        this.flowCode = flowCode;
    }


    /**
     * get 数据源code
     *
     * @return
     */
    public String getDataSourceCode() {
        return dataSourceCode;
    }

    /**
     * set 数据源code
     *
     * @param dataSourceCode
     */
    public void setDataSourceCode(String dataSourceCode) {
        this.dataSourceCode = dataSourceCode;
    }


    /**
     * get 文件code
     *
     * @return
     */
    public String getFileCode() {
        return fileCode;
    }

    /**
     * set 文件code
     *
     * @param fileCode
     */
    public void setFileCode(String fileCode) {
        this.fileCode = fileCode;
    }


    /**
     * get 文件名称
     *
     * @return
     */
    public String getFileName() {
        return fileName;
    }

    /**
     * set 文件名称
     *
     * @param fileName
     */
    public void setFileName(String fileName) {
        this.fileName = fileName;
    }


    /**
     * get 文件类型 SQL,SHELL,PYTHON,PERL,R,SparkJar,StarRocks,MySQL
     *
     * @return
     */
    public String getFileType() {
        return fileType;
    }

    /**
     * set 文件类型 SQL,SHELL,PYTHON,PERL,R,SparkJar,StarRocks,MySQL
     *
     * @param fileType
     */
    public void setFileType(String fileType) {
        this.fileType = fileType;
    }


    /**
     * get 脚本内容
     *
     * @return
     */
    public String getContent() {
        return content;
    }

    /**
     * set 脚本内容
     *
     * @param content
     */
    public void setContent(String content) {
        this.content = content;
    }


    /**
     * get sql执行引擎 apReduce,Spark,Tez,presto,Python2,Python3,auto,StarRocks,MySQL
     *
     * @return
     */
    public String getExecEngine() {
        return execEngine;
    }

    /**
     * set sql执行引擎 apReduce,Spark,Tez,presto,Python2,Python3,auto,StarRocks,MySQL
     *
     * @param execEngine
     */
    public void setExecEngine(String execEngine) {
        this.execEngine = execEngine;
    }


    /**
    * get 脚本参数配置
    *
    * @return
    */
    public List<UranusTaskParamReq> getArgs() {
        return args;
    }

    /**
    * set 脚本参数配置
    *
    * @param args
    */
    public void setArgs(List<UranusTaskParamReq> args) {
        this.args = args;
    }


    /**
     * get sql脚本是否全部执行 是false,否true
     *
     * @return
     */
    public Boolean getSegment() {
        return segment;
    }

    /**
     * set sql脚本是否全部执行 是false,否true
     *
     * @param segment
     */
    public void setSegment(Boolean segment) {
        this.segment = segment;
    }


    /**
     * get 队列名称
     *
     * @return
     */
    public String getResourceName() {
        return resourceName;
    }

    /**
     * set 队列名称
     *
     * @param resourceName
     */
    public void setResourceName(String resourceName) {
        this.resourceName = resourceName;
    }


    /**
     * get 队列code
     *
     * @return
     */
    public String getResourceCode() {
        return resourceCode;
    }

    /**
     * set 队列code
     *
     * @param resourceCode
     */
    public void setResourceCode(String resourceCode) {
        this.resourceCode = resourceCode;
    }


    /**
    * get 循环节点信息
    *
    * @return
    */
    public List<TaskInfoLoopReq> getLoopInfo() {
        return loopInfo;
    }

    /**
    * set 循环节点信息
    *
    * @param loopInfo
    */
    public void setLoopInfo(List<TaskInfoLoopReq> loopInfo) {
        this.loopInfo = loopInfo;
    }


    /**
     * get 地域ID
     *
     * @return
     */
    public String getRegionId() {
        return regionId;
    }

    /**
     * set 地域ID
     *
     * @param regionId
     */
    public void setRegionId(String regionId) {
        this.regionId = regionId;
    }


    /**
     * get 应用名称
     *
     * @return
     */
    public String getAppName() {
        return appName;
    }

    /**
     * set 应用名称
     *
     * @param appName
     */
    public void setAppName(String appName) {
        this.appName = appName;
    }



    /**
     * set 流程code
     *
     * @param flowCode
     */
    public UranusScriptSyntaxCheckRequest flowCode(String flowCode) {
        this.flowCode = flowCode;
        return this;
    }


    /**
     * set 数据源code
     *
     * @param dataSourceCode
     */
    public UranusScriptSyntaxCheckRequest dataSourceCode(String dataSourceCode) {
        this.dataSourceCode = dataSourceCode;
        return this;
    }


    /**
     * set 文件code
     *
     * @param fileCode
     */
    public UranusScriptSyntaxCheckRequest fileCode(String fileCode) {
        this.fileCode = fileCode;
        return this;
    }


    /**
     * set 文件名称
     *
     * @param fileName
     */
    public UranusScriptSyntaxCheckRequest fileName(String fileName) {
        this.fileName = fileName;
        return this;
    }


    /**
     * set 文件类型 SQL,SHELL,PYTHON,PERL,R,SparkJar,StarRocks,MySQL
     *
     * @param fileType
     */
    public UranusScriptSyntaxCheckRequest fileType(String fileType) {
        this.fileType = fileType;
        return this;
    }


    /**
     * set 脚本内容
     *
     * @param content
     */
    public UranusScriptSyntaxCheckRequest content(String content) {
        this.content = content;
        return this;
    }


    /**
     * set sql执行引擎 apReduce,Spark,Tez,presto,Python2,Python3,auto,StarRocks,MySQL
     *
     * @param execEngine
     */
    public UranusScriptSyntaxCheckRequest execEngine(String execEngine) {
        this.execEngine = execEngine;
        return this;
    }


    /**
    * set 脚本参数配置
    *
    * @param args
    */
    public UranusScriptSyntaxCheckRequest args(List<UranusTaskParamReq> args) {
        this.args = args;
        return this;
    }


    /**
     * set sql脚本是否全部执行 是false,否true
     *
     * @param segment
     */
    public UranusScriptSyntaxCheckRequest segment(Boolean segment) {
        this.segment = segment;
        return this;
    }


    /**
     * set 队列名称
     *
     * @param resourceName
     */
    public UranusScriptSyntaxCheckRequest resourceName(String resourceName) {
        this.resourceName = resourceName;
        return this;
    }


    /**
     * set 队列code
     *
     * @param resourceCode
     */
    public UranusScriptSyntaxCheckRequest resourceCode(String resourceCode) {
        this.resourceCode = resourceCode;
        return this;
    }


    /**
    * set 循环节点信息
    *
    * @param loopInfo
    */
    public UranusScriptSyntaxCheckRequest loopInfo(List<TaskInfoLoopReq> loopInfo) {
        this.loopInfo = loopInfo;
        return this;
    }


    /**
     * set 地域ID
     *
     * @param regionId
     */
    public UranusScriptSyntaxCheckRequest regionId(String regionId) {
        this.regionId = regionId;
        return this;
    }


    /**
     * set 应用名称
     *
     * @param appName
     */
    public UranusScriptSyntaxCheckRequest appName(String appName) {
        this.appName = appName;
        return this;
    }



    /**
     * add item to 脚本参数配置
     *
     * @param arg
     */
    public void addArg(UranusTaskParamReq arg) {
        if (this.args == null) {
            this.args = new ArrayList<>();
        }
        this.args.add(arg);
    }

    /**
     * add item to 循环节点信息
     *
     * @param loopInfo
     */
    public void addLoopInfo(TaskInfoLoopReq loopInfo) {
        if (this.loopInfo == null) {
            this.loopInfo = new ArrayList<>();
        }
        this.loopInfo.add(loopInfo);
    }
}