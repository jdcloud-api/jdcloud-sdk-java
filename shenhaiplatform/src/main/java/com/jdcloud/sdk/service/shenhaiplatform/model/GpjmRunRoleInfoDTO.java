/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * 
 *
 * 
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.shenhaiplatform.model;


/**
 * 作业运行规则
 */
public class GpjmRunRoleInfoDTO  implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 作业超时时间，单位分钟
     */
    private Integer runTimeOut;

    /**
     * 触发类型:dependency 依赖、time 时间、file 文件、manual 手工、once 一次性
     */
    private String triggerType;

    /**
     * 触发时间
     */
    private String triggerTime;

    /**
     * 是否重试过
     */
    private String flagRetry;

    /**
     * 重试次数
     */
    private String retryCount;

    /**
     * 间隔/秒
     */
    private String retryInterval;

    /**
     * 运行周期 ,F 分钟、H 小时、D 天、W 周、M 月、O 一次性运行、N 无周期
     */
    private String cycle;

    /**
     * 周期具体日期
     */
    private String sequence;

    /**
     * 周期间隔
     */
    private String sequenceInterval;

    /**
     * 周期开始时间
     */
    private String sequenceStartTime;

    /**
     * 周期结束时间
     */
    private String sequenceEndTime;

    /**
     * 作业优先级
     */
    private Integer priority;

    /**
     * 作业超时时间，单位分钟
     */
    private String timeout;

    /**
     * 是否可以并行运行
     */
    private String flagParallel;

    /**
     * 是否可以跨周期运行
     */
    private String flagAcross;

    /**
     * 是否级联触发，父任务重跑后是否被强制触发重跑
     */
    private String flagCascadedTrigger;

    /**
     * 运行周期
     */
    private String cycleLabel;

    /**
     * 触发类型
     */
    private String triggerTypeLabel;



    /**
     * get 作业超时时间，单位分钟
     *
     * @return
     */
    public Integer getRunTimeOut() {
        return runTimeOut;
    }

    /**
     * set 作业超时时间，单位分钟
     *
     * @param runTimeOut
     */
    public void setRunTimeOut(Integer runTimeOut) {
        this.runTimeOut = runTimeOut;
    }


    /**
     * get 触发类型:dependency 依赖、time 时间、file 文件、manual 手工、once 一次性
     *
     * @return
     */
    public String getTriggerType() {
        return triggerType;
    }

    /**
     * set 触发类型:dependency 依赖、time 时间、file 文件、manual 手工、once 一次性
     *
     * @param triggerType
     */
    public void setTriggerType(String triggerType) {
        this.triggerType = triggerType;
    }


    /**
     * get 触发时间
     *
     * @return
     */
    public String getTriggerTime() {
        return triggerTime;
    }

    /**
     * set 触发时间
     *
     * @param triggerTime
     */
    public void setTriggerTime(String triggerTime) {
        this.triggerTime = triggerTime;
    }


    /**
     * get 是否重试过
     *
     * @return
     */
    public String getFlagRetry() {
        return flagRetry;
    }

    /**
     * set 是否重试过
     *
     * @param flagRetry
     */
    public void setFlagRetry(String flagRetry) {
        this.flagRetry = flagRetry;
    }


    /**
     * get 重试次数
     *
     * @return
     */
    public String getRetryCount() {
        return retryCount;
    }

    /**
     * set 重试次数
     *
     * @param retryCount
     */
    public void setRetryCount(String retryCount) {
        this.retryCount = retryCount;
    }


    /**
     * get 间隔/秒
     *
     * @return
     */
    public String getRetryInterval() {
        return retryInterval;
    }

    /**
     * set 间隔/秒
     *
     * @param retryInterval
     */
    public void setRetryInterval(String retryInterval) {
        this.retryInterval = retryInterval;
    }


    /**
     * get 运行周期 ,F 分钟、H 小时、D 天、W 周、M 月、O 一次性运行、N 无周期
     *
     * @return
     */
    public String getCycle() {
        return cycle;
    }

    /**
     * set 运行周期 ,F 分钟、H 小时、D 天、W 周、M 月、O 一次性运行、N 无周期
     *
     * @param cycle
     */
    public void setCycle(String cycle) {
        this.cycle = cycle;
    }


    /**
     * get 周期具体日期
     *
     * @return
     */
    public String getSequence() {
        return sequence;
    }

    /**
     * set 周期具体日期
     *
     * @param sequence
     */
    public void setSequence(String sequence) {
        this.sequence = sequence;
    }


    /**
     * get 周期间隔
     *
     * @return
     */
    public String getSequenceInterval() {
        return sequenceInterval;
    }

    /**
     * set 周期间隔
     *
     * @param sequenceInterval
     */
    public void setSequenceInterval(String sequenceInterval) {
        this.sequenceInterval = sequenceInterval;
    }


    /**
     * get 周期开始时间
     *
     * @return
     */
    public String getSequenceStartTime() {
        return sequenceStartTime;
    }

    /**
     * set 周期开始时间
     *
     * @param sequenceStartTime
     */
    public void setSequenceStartTime(String sequenceStartTime) {
        this.sequenceStartTime = sequenceStartTime;
    }


    /**
     * get 周期结束时间
     *
     * @return
     */
    public String getSequenceEndTime() {
        return sequenceEndTime;
    }

    /**
     * set 周期结束时间
     *
     * @param sequenceEndTime
     */
    public void setSequenceEndTime(String sequenceEndTime) {
        this.sequenceEndTime = sequenceEndTime;
    }


    /**
     * get 作业优先级
     *
     * @return
     */
    public Integer getPriority() {
        return priority;
    }

    /**
     * set 作业优先级
     *
     * @param priority
     */
    public void setPriority(Integer priority) {
        this.priority = priority;
    }


    /**
     * get 作业超时时间，单位分钟
     *
     * @return
     */
    public String getTimeout() {
        return timeout;
    }

    /**
     * set 作业超时时间，单位分钟
     *
     * @param timeout
     */
    public void setTimeout(String timeout) {
        this.timeout = timeout;
    }


    /**
     * get 是否可以并行运行
     *
     * @return
     */
    public String getFlagParallel() {
        return flagParallel;
    }

    /**
     * set 是否可以并行运行
     *
     * @param flagParallel
     */
    public void setFlagParallel(String flagParallel) {
        this.flagParallel = flagParallel;
    }


    /**
     * get 是否可以跨周期运行
     *
     * @return
     */
    public String getFlagAcross() {
        return flagAcross;
    }

    /**
     * set 是否可以跨周期运行
     *
     * @param flagAcross
     */
    public void setFlagAcross(String flagAcross) {
        this.flagAcross = flagAcross;
    }


    /**
     * get 是否级联触发，父任务重跑后是否被强制触发重跑
     *
     * @return
     */
    public String getFlagCascadedTrigger() {
        return flagCascadedTrigger;
    }

    /**
     * set 是否级联触发，父任务重跑后是否被强制触发重跑
     *
     * @param flagCascadedTrigger
     */
    public void setFlagCascadedTrigger(String flagCascadedTrigger) {
        this.flagCascadedTrigger = flagCascadedTrigger;
    }


    /**
     * get 运行周期
     *
     * @return
     */
    public String getCycleLabel() {
        return cycleLabel;
    }

    /**
     * set 运行周期
     *
     * @param cycleLabel
     */
    public void setCycleLabel(String cycleLabel) {
        this.cycleLabel = cycleLabel;
    }


    /**
     * get 触发类型
     *
     * @return
     */
    public String getTriggerTypeLabel() {
        return triggerTypeLabel;
    }

    /**
     * set 触发类型
     *
     * @param triggerTypeLabel
     */
    public void setTriggerTypeLabel(String triggerTypeLabel) {
        this.triggerTypeLabel = triggerTypeLabel;
    }



    /**
     * set 作业超时时间，单位分钟
     *
     * @param runTimeOut
     */
    public GpjmRunRoleInfoDTO runTimeOut(Integer runTimeOut) {
        this.runTimeOut = runTimeOut;
        return this;
    }


    /**
     * set 触发类型:dependency 依赖、time 时间、file 文件、manual 手工、once 一次性
     *
     * @param triggerType
     */
    public GpjmRunRoleInfoDTO triggerType(String triggerType) {
        this.triggerType = triggerType;
        return this;
    }


    /**
     * set 触发时间
     *
     * @param triggerTime
     */
    public GpjmRunRoleInfoDTO triggerTime(String triggerTime) {
        this.triggerTime = triggerTime;
        return this;
    }


    /**
     * set 是否重试过
     *
     * @param flagRetry
     */
    public GpjmRunRoleInfoDTO flagRetry(String flagRetry) {
        this.flagRetry = flagRetry;
        return this;
    }


    /**
     * set 重试次数
     *
     * @param retryCount
     */
    public GpjmRunRoleInfoDTO retryCount(String retryCount) {
        this.retryCount = retryCount;
        return this;
    }


    /**
     * set 间隔/秒
     *
     * @param retryInterval
     */
    public GpjmRunRoleInfoDTO retryInterval(String retryInterval) {
        this.retryInterval = retryInterval;
        return this;
    }


    /**
     * set 运行周期 ,F 分钟、H 小时、D 天、W 周、M 月、O 一次性运行、N 无周期
     *
     * @param cycle
     */
    public GpjmRunRoleInfoDTO cycle(String cycle) {
        this.cycle = cycle;
        return this;
    }


    /**
     * set 周期具体日期
     *
     * @param sequence
     */
    public GpjmRunRoleInfoDTO sequence(String sequence) {
        this.sequence = sequence;
        return this;
    }


    /**
     * set 周期间隔
     *
     * @param sequenceInterval
     */
    public GpjmRunRoleInfoDTO sequenceInterval(String sequenceInterval) {
        this.sequenceInterval = sequenceInterval;
        return this;
    }


    /**
     * set 周期开始时间
     *
     * @param sequenceStartTime
     */
    public GpjmRunRoleInfoDTO sequenceStartTime(String sequenceStartTime) {
        this.sequenceStartTime = sequenceStartTime;
        return this;
    }


    /**
     * set 周期结束时间
     *
     * @param sequenceEndTime
     */
    public GpjmRunRoleInfoDTO sequenceEndTime(String sequenceEndTime) {
        this.sequenceEndTime = sequenceEndTime;
        return this;
    }


    /**
     * set 作业优先级
     *
     * @param priority
     */
    public GpjmRunRoleInfoDTO priority(Integer priority) {
        this.priority = priority;
        return this;
    }


    /**
     * set 作业超时时间，单位分钟
     *
     * @param timeout
     */
    public GpjmRunRoleInfoDTO timeout(String timeout) {
        this.timeout = timeout;
        return this;
    }


    /**
     * set 是否可以并行运行
     *
     * @param flagParallel
     */
    public GpjmRunRoleInfoDTO flagParallel(String flagParallel) {
        this.flagParallel = flagParallel;
        return this;
    }


    /**
     * set 是否可以跨周期运行
     *
     * @param flagAcross
     */
    public GpjmRunRoleInfoDTO flagAcross(String flagAcross) {
        this.flagAcross = flagAcross;
        return this;
    }


    /**
     * set 是否级联触发，父任务重跑后是否被强制触发重跑
     *
     * @param flagCascadedTrigger
     */
    public GpjmRunRoleInfoDTO flagCascadedTrigger(String flagCascadedTrigger) {
        this.flagCascadedTrigger = flagCascadedTrigger;
        return this;
    }


    /**
     * set 运行周期
     *
     * @param cycleLabel
     */
    public GpjmRunRoleInfoDTO cycleLabel(String cycleLabel) {
        this.cycleLabel = cycleLabel;
        return this;
    }


    /**
     * set 触发类型
     *
     * @param triggerTypeLabel
     */
    public GpjmRunRoleInfoDTO triggerTypeLabel(String triggerTypeLabel) {
        this.triggerTypeLabel = triggerTypeLabel;
        return this;
    }


}