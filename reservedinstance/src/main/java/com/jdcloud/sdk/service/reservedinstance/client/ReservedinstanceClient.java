/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * InstanceVoucher
 * 实例券API接口
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.reservedinstance.client;

import com.jdcloud.sdk.JdcloudSdkException;
import com.jdcloud.sdk.auth.CredentialsProvider;
import com.jdcloud.sdk.client.Environment;
import com.jdcloud.sdk.client.Jdcloud;
import com.jdcloud.sdk.client.JdcloudClient;
import com.jdcloud.sdk.client.JdcloudValidateException;
import com.jdcloud.sdk.http.HttpRequestConfig;
import com.jdcloud.sdk.service.reservedinstance.model.DescribeConsoleInstanceVouchersRequest;
import com.jdcloud.sdk.service.reservedinstance.model.DescribeConsoleInstanceVouchersResponse;
import com.jdcloud.sdk.service.reservedinstance.client.DescribeConsoleInstanceVouchersExecutor;
import com.jdcloud.sdk.service.reservedinstance.model.DescribeDeductionDetailsRequest;
import com.jdcloud.sdk.service.reservedinstance.model.DescribeDeductionDetailsResponse;
import com.jdcloud.sdk.service.reservedinstance.client.DescribeDeductionDetailsExecutor;

/**
 * reservedinstanceClient
 */
public class ReservedinstanceClient extends JdcloudClient {

    public final static String ApiVersion = "v1";
    private final static String UserAgentPrefix = "JdcloudSdkJava";
    public final static String ClientVersion = "1.2.9";
    public final static String DefaultEndpoint = "reservedinstance.jdcloud-api.com";
    public final static String ServiceName = "reservedinstance";
    public final static String UserAgent = UserAgentPrefix + "/" + ClientVersion + " " + ServiceName + "/" + ApiVersion;

    CredentialsProvider credentialsProvider;
    HttpRequestConfig httpRequestConfig;
    Environment environment = new Environment.Builder().endpoint(DefaultEndpoint).build();

    public CredentialsProvider getCredentialsProvider() {
        return credentialsProvider;
    }

    public HttpRequestConfig getHttpRequestConfig() {
        return httpRequestConfig;
    }

    public Environment getEnvironment() {
        return environment;
    }

    public String getUserAgent() {
        return UserAgent;
    }

    public String getServiceName() {
        return ServiceName;
    }

    public String getVersion() {
        return ApiVersion;
    }

    private ReservedinstanceClient() {

    }

    public static Builder builder() {
        return new DefaultBuilder();
    }


    /**
     * 查询实例抵扣券列表
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeConsoleInstanceVouchersResponse describeConsoleInstanceVouchers(DescribeConsoleInstanceVouchersRequest request) throws JdcloudSdkException {
        return new DescribeConsoleInstanceVouchersExecutor().client(this).execute(request);
    }

    /**
     * 查询实例券使用明细列表
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeDeductionDetailsResponse describeDeductionDetails(DescribeDeductionDetailsRequest request) throws JdcloudSdkException {
        return new DescribeDeductionDetailsExecutor().client(this).execute(request);
    }


    public interface Builder {
        public Builder credentialsProvider(CredentialsProvider provider);
        public Builder environment(Environment environment);
        public Builder httpRequestConfig(HttpRequestConfig config);
        public ReservedinstanceClient build() throws JdcloudSdkException;
    }

    private static class DefaultBuilder implements Builder {

        private ReservedinstanceClient reservedinstanceClient;

        public DefaultBuilder() {
            reservedinstanceClient = new ReservedinstanceClient();
        }

        public DefaultBuilder credentialsProvider(CredentialsProvider provider) {
            reservedinstanceClient.credentialsProvider = provider;
            return this;
        }

        public DefaultBuilder httpRequestConfig(HttpRequestConfig config) {
            reservedinstanceClient.httpRequestConfig = config;
            return this;
        }

        public ReservedinstanceClient build() throws JdcloudSdkException {

            if (reservedinstanceClient.credentialsProvider == null) {
                //if credentialsProvider not set, try load jdcloud global default  credentials provider
                reservedinstanceClient.credentialsProvider = Jdcloud.defaultInstance().getCredentialsProvider();
                if (reservedinstanceClient.credentialsProvider == null) {
                    throw new JdcloudValidateException("ReservedinstanceClient build error: jdcloud credentials provider not set");
                }
            }
            if (reservedinstanceClient.httpRequestConfig == null) {
                reservedinstanceClient.httpRequestConfig = Jdcloud.defaultInstance().getHttpRequestConfig();
                if (reservedinstanceClient.httpRequestConfig == null) {
                    throw new JdcloudValidateException("ReservedinstanceClient build error: http request config not set");
                }
            }
            return reservedinstanceClient;
        }

        public Builder environment(Environment environment) {
            reservedinstanceClient.environment = environment;
            return this;
        }
    }
}
