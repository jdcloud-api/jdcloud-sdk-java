/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 弹性伸缩定时任务管理
 * 弹性伸缩定时任务管理
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.ag.model;

import com.jdcloud.sdk.annotation.Required;
import com.jdcloud.sdk.service.JdcloudRequest;

/**
 * 修改定时任务
- 所有参数取值为字符串类型的都严格区分大小写
- 定时任务换绑高可用组，如果目前伸缩方式是执行简单规则，那么需要重新从新的高可用组中选择一个简单规则
- 伸缩功能开启或者关闭的情况下，都支持调用此接口

 */
public class UpdateAsCronRequest extends JdcloudRequest implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 高可用组ID
     */
    private String agId;

    /**
     * 名称，长度为1~32个字符，只允许中文、数字、大小写字母、英文下划线（_）、连字符（-）
     */
    private String name;

    /**
     * 描述，最大长度为256个字符
     */
    private String description;

    /**
     * 可以为定时任务绑定伸缩规则，目前只支持简单规则，即 &#x60;asRuleType&#x60; 为 &#x60;Simple&#x60; 的伸缩规则
- 如果指定了参数&#x60;asRuleId&#x60;，则不允许指定参数&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;
- 如果指定了参数&#x60;asRuleId&#x60;，并且当前伸缩方式为执行简单规则，那么表示更换定时任务关联的伸缩规则
- 如果指定了参数&#x60;asRuleId&#x60;，但是当前伸缩方式为修改伸缩组属性[&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;]，那么将会清空&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;的值，同时设置&#x60;asRuleId&#x60;的值

     */
    private String asRuleId;

    /**
     * 设置伸缩组最小实例数，必须大于等于0，如果没有设置此参数，则此参数将会保存为 -1
- 如果指定了参数&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;三者任意一个或多个，则不允许指定参数&#x60;asRuleId&#x60;
- 如果指定了参数&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;三者任意一个或多个，并且当前伸缩方式为修改伸缩组属性[&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;]，那么将会更新&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;指定的参数值
- 如果指定了参数&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;三者任意一个或多个，但是当前伸缩方式为执行简单规则，那么将会清空&#x60;asRuleId&#x60;的值，同时设置&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;指定的参数值

     */
    private Integer minSize;

    /**
     * 设置伸缩组最大实例数，必须大于等于0，如果没有设置此参数，则此参数将会保存为 -1
- 如果指定了参数&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;三者任意一个或多个，则不允许指定参数&#x60;asRuleId&#x60;
- 如果指定了参数&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;三者任意一个或多个，并且当前伸缩方式为修改伸缩组属性[&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;]，那么将会更新&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;指定的参数值
- 如果指定了参数&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;三者任意一个或多个，但是当前伸缩方式为执行简单规则，那么将会清空&#x60;asRuleId&#x60;的值，同时设置&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;指定的参数值

     */
    private Integer maxSize;

    /**
     * 设置伸缩组期望实例数，必须大于等于0，如果没有设置此参数，则此参数将会保存为 -1
- 如果指定了参数&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;三者任意一个或多个，则不允许指定参数&#x60;asRuleId&#x60;
- 如果指定了参数&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;三者任意一个或多个，并且当前伸缩方式为修改伸缩组属性[&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;]，那么将会更新&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;指定的参数值
- 如果指定了参数&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;三者任意一个或多个，但是当前伸缩方式为执行简单规则，那么将会清空&#x60;asRuleId&#x60;的值，同时设置&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;指定的参数值

     */
    private Integer desiredCapacity;

    /**
     * 定时任务触发的时间点
时间格式：&#x60;2023-05-10 10:10:00&#x60;，目前只支持到分钟，秒数会被忽略，但是需要严格按照此时间格式填写
- 如果未指定&#x60;repeatType&#x60;，则按指定的日期和时间执行一次
- 如果指定了&#x60;repeatType&#x60;，则此属性指定的时间点，表示从这个时间之后开始按照重复周期执行定时任务
时间限制如下：
- 时间必须大于当前时间
- 不能填写当前时间起30日后的时间
- 时间必须小于&#x60;repeatEndTime&#x60;

     */
    private String launchTime;

    /**
     * 重复执行定时任务的类型，如果指定了&#x60;repeatType&#x60;，则&#x60;repeatValue&#x60;必填
取值范围：[&#x60;Daily&#x60;,&#x60;Weekly&#x60;,&#x60;Monthly&#x60;,&#x60;Cron&#x60;]
- Daily：每多少天重复执行一次定时任务
- Weekly：每周指定几天重复执行一次定时任务
- Monthly：每月内指定几天重复执行一次定时任务
- Cron：按照指定的Cron表达式执行定时任务

     */
    private String repeatType;

    /**
     * 重复执行定时任务的数值，如果指定了&#x60;repeatType&#x60;，则&#x60;repeatValue&#x60;必填
- &#x60;repeatType&#x60;取值为&#x60;Daily&#x60;时，只能填一个值，取值范围：[ &#x60;1&#x60; ~ &#x60;31&#x60; ]，表示：每几天执行
- &#x60;repeatType&#x60;取值为&#x60;Weekly&#x60;时，可以填入多个值，填多个值时使用半角逗号（,）分隔。取值范围：[&#x60;0&#x60;,&#x60;1&#x60;,&#x60;2&#x60;,&#x60;3&#x60;,&#x60;4&#x60;,&#x60;5&#x60;,&#x60;6&#x60;]，分别对应：周日、周一、周二、周三、周四、周五、周六，表示：每周几执行
- &#x60;repeatType&#x60;取值为&#x60;Monthly&#x60;时，格式为A-B。A、B的取值范围：[ &#x60;1&#x60; ~ &#x60;31&#x60; ]，并且B必须大于等于A，表示：每个月的几号到几号执行
- &#x60;repeatType&#x60;取值为&#x60;Cron&#x60;时，必须填写Cron表达式，不支持秒，最小单位为分钟

支持的Cron格式如下：
*    *    *    *    *   从左到右依次表示：&#x60;[分] [小时] [日] [月] [周]&#x60;

- 分，取值范围：[&#x60;0&#x60; ~ &#x60;59&#x60;]，允许的连接符号取值范围：[&#x60;*&#x60; &#x60;/&#x60; &#x60;,&#x60; &#x60;-&#x60;]
- 小时，取值范围：[&#x60;0&#x60; ~ &#x60;23&#x60;]，允许的连接符号取值范围：[&#x60;*&#x60; &#x60;/&#x60; &#x60;,&#x60; &#x60;-&#x60;]
- 日，取值范围：[&#x60;1&#x60; ~ &#x60;31&#x60;]，允许的连接符号取值范围：[&#x60;*&#x60; &#x60;/&#x60; &#x60;,&#x60; &#x60;-&#x60; &#x60;?&#x60;]
- 月，取值范围：[&#x60;1&#x60; ~ &#x60;12&#x60;]，允许的连接符号取值范围：[&#x60;*&#x60; &#x60;/&#x60; &#x60;,&#x60; &#x60;-&#x60;]
- 周，取值范围：[&#x60;0&#x60; ~ &#x60;6&#x60;]，允许的连接符号取值范围：[&#x60;*&#x60; &#x60;/&#x60; &#x60;,&#x60; &#x60;-&#x60; &#x60;?&#x60;]

符号解析：&#x60;*&#x60;表示任意值，&#x60;/&#x60;表示步长，&#x60;,&#x60;表示多个值，&#x60;-&#x60;表示范围，&#x60;?&#x60;表示不指定值

示例：0 10 * * *  表示：每天10点执行

     */
    private String repeatValue;

    /**
     * 重复执行定时任务的结束时间
默认为空，表示不限制结束时间，一直重复执行
时间格式：&#x60;2023-05-10 10:10:00&#x60;，目前只支持到分钟，秒数会被忽略，但是需要严格按照此时间格式填写
时间限制如下：
- 时间必须大于&#x60;launchTime&#x60;

     */
    private String repeatEndTime;

    /**
     * 定时任务触发操作失败后，在此时间内重试，单位为秒，取值范围：[&#x60;0&#x60; ~ &#x60;1800&#x60;]
     */
    private Integer launchExpirationTime;

    /**
     * 地域ID
     * Required:true
     */
    @Required
    private String regionId;

    /**
     * 定时任务ID
     * Required:true
     */
    @Required
    private String asCronId;



    /**
     * get 高可用组ID
     *
     * @return
     */
    public String getAgId() {
        return agId;
    }

    /**
     * set 高可用组ID
     *
     * @param agId
     */
    public void setAgId(String agId) {
        this.agId = agId;
    }


    /**
     * get 名称，长度为1~32个字符，只允许中文、数字、大小写字母、英文下划线（_）、连字符（-）
     *
     * @return
     */
    public String getName() {
        return name;
    }

    /**
     * set 名称，长度为1~32个字符，只允许中文、数字、大小写字母、英文下划线（_）、连字符（-）
     *
     * @param name
     */
    public void setName(String name) {
        this.name = name;
    }


    /**
     * get 描述，最大长度为256个字符
     *
     * @return
     */
    public String getDescription() {
        return description;
    }

    /**
     * set 描述，最大长度为256个字符
     *
     * @param description
     */
    public void setDescription(String description) {
        this.description = description;
    }


    /**
     * get 可以为定时任务绑定伸缩规则，目前只支持简单规则，即 &#x60;asRuleType&#x60; 为 &#x60;Simple&#x60; 的伸缩规则
- 如果指定了参数&#x60;asRuleId&#x60;，则不允许指定参数&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;
- 如果指定了参数&#x60;asRuleId&#x60;，并且当前伸缩方式为执行简单规则，那么表示更换定时任务关联的伸缩规则
- 如果指定了参数&#x60;asRuleId&#x60;，但是当前伸缩方式为修改伸缩组属性[&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;]，那么将会清空&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;的值，同时设置&#x60;asRuleId&#x60;的值

     *
     * @return
     */
    public String getAsRuleId() {
        return asRuleId;
    }

    /**
     * set 可以为定时任务绑定伸缩规则，目前只支持简单规则，即 &#x60;asRuleType&#x60; 为 &#x60;Simple&#x60; 的伸缩规则
- 如果指定了参数&#x60;asRuleId&#x60;，则不允许指定参数&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;
- 如果指定了参数&#x60;asRuleId&#x60;，并且当前伸缩方式为执行简单规则，那么表示更换定时任务关联的伸缩规则
- 如果指定了参数&#x60;asRuleId&#x60;，但是当前伸缩方式为修改伸缩组属性[&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;]，那么将会清空&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;的值，同时设置&#x60;asRuleId&#x60;的值

     *
     * @param asRuleId
     */
    public void setAsRuleId(String asRuleId) {
        this.asRuleId = asRuleId;
    }


    /**
     * get 设置伸缩组最小实例数，必须大于等于0，如果没有设置此参数，则此参数将会保存为 -1
- 如果指定了参数&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;三者任意一个或多个，则不允许指定参数&#x60;asRuleId&#x60;
- 如果指定了参数&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;三者任意一个或多个，并且当前伸缩方式为修改伸缩组属性[&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;]，那么将会更新&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;指定的参数值
- 如果指定了参数&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;三者任意一个或多个，但是当前伸缩方式为执行简单规则，那么将会清空&#x60;asRuleId&#x60;的值，同时设置&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;指定的参数值

     *
     * @return
     */
    public Integer getMinSize() {
        return minSize;
    }

    /**
     * set 设置伸缩组最小实例数，必须大于等于0，如果没有设置此参数，则此参数将会保存为 -1
- 如果指定了参数&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;三者任意一个或多个，则不允许指定参数&#x60;asRuleId&#x60;
- 如果指定了参数&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;三者任意一个或多个，并且当前伸缩方式为修改伸缩组属性[&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;]，那么将会更新&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;指定的参数值
- 如果指定了参数&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;三者任意一个或多个，但是当前伸缩方式为执行简单规则，那么将会清空&#x60;asRuleId&#x60;的值，同时设置&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;指定的参数值

     *
     * @param minSize
     */
    public void setMinSize(Integer minSize) {
        this.minSize = minSize;
    }


    /**
     * get 设置伸缩组最大实例数，必须大于等于0，如果没有设置此参数，则此参数将会保存为 -1
- 如果指定了参数&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;三者任意一个或多个，则不允许指定参数&#x60;asRuleId&#x60;
- 如果指定了参数&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;三者任意一个或多个，并且当前伸缩方式为修改伸缩组属性[&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;]，那么将会更新&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;指定的参数值
- 如果指定了参数&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;三者任意一个或多个，但是当前伸缩方式为执行简单规则，那么将会清空&#x60;asRuleId&#x60;的值，同时设置&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;指定的参数值

     *
     * @return
     */
    public Integer getMaxSize() {
        return maxSize;
    }

    /**
     * set 设置伸缩组最大实例数，必须大于等于0，如果没有设置此参数，则此参数将会保存为 -1
- 如果指定了参数&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;三者任意一个或多个，则不允许指定参数&#x60;asRuleId&#x60;
- 如果指定了参数&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;三者任意一个或多个，并且当前伸缩方式为修改伸缩组属性[&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;]，那么将会更新&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;指定的参数值
- 如果指定了参数&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;三者任意一个或多个，但是当前伸缩方式为执行简单规则，那么将会清空&#x60;asRuleId&#x60;的值，同时设置&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;指定的参数值

     *
     * @param maxSize
     */
    public void setMaxSize(Integer maxSize) {
        this.maxSize = maxSize;
    }


    /**
     * get 设置伸缩组期望实例数，必须大于等于0，如果没有设置此参数，则此参数将会保存为 -1
- 如果指定了参数&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;三者任意一个或多个，则不允许指定参数&#x60;asRuleId&#x60;
- 如果指定了参数&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;三者任意一个或多个，并且当前伸缩方式为修改伸缩组属性[&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;]，那么将会更新&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;指定的参数值
- 如果指定了参数&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;三者任意一个或多个，但是当前伸缩方式为执行简单规则，那么将会清空&#x60;asRuleId&#x60;的值，同时设置&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;指定的参数值

     *
     * @return
     */
    public Integer getDesiredCapacity() {
        return desiredCapacity;
    }

    /**
     * set 设置伸缩组期望实例数，必须大于等于0，如果没有设置此参数，则此参数将会保存为 -1
- 如果指定了参数&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;三者任意一个或多个，则不允许指定参数&#x60;asRuleId&#x60;
- 如果指定了参数&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;三者任意一个或多个，并且当前伸缩方式为修改伸缩组属性[&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;]，那么将会更新&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;指定的参数值
- 如果指定了参数&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;三者任意一个或多个，但是当前伸缩方式为执行简单规则，那么将会清空&#x60;asRuleId&#x60;的值，同时设置&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;指定的参数值

     *
     * @param desiredCapacity
     */
    public void setDesiredCapacity(Integer desiredCapacity) {
        this.desiredCapacity = desiredCapacity;
    }


    /**
     * get 定时任务触发的时间点
时间格式：&#x60;2023-05-10 10:10:00&#x60;，目前只支持到分钟，秒数会被忽略，但是需要严格按照此时间格式填写
- 如果未指定&#x60;repeatType&#x60;，则按指定的日期和时间执行一次
- 如果指定了&#x60;repeatType&#x60;，则此属性指定的时间点，表示从这个时间之后开始按照重复周期执行定时任务
时间限制如下：
- 时间必须大于当前时间
- 不能填写当前时间起30日后的时间
- 时间必须小于&#x60;repeatEndTime&#x60;

     *
     * @return
     */
    public String getLaunchTime() {
        return launchTime;
    }

    /**
     * set 定时任务触发的时间点
时间格式：&#x60;2023-05-10 10:10:00&#x60;，目前只支持到分钟，秒数会被忽略，但是需要严格按照此时间格式填写
- 如果未指定&#x60;repeatType&#x60;，则按指定的日期和时间执行一次
- 如果指定了&#x60;repeatType&#x60;，则此属性指定的时间点，表示从这个时间之后开始按照重复周期执行定时任务
时间限制如下：
- 时间必须大于当前时间
- 不能填写当前时间起30日后的时间
- 时间必须小于&#x60;repeatEndTime&#x60;

     *
     * @param launchTime
     */
    public void setLaunchTime(String launchTime) {
        this.launchTime = launchTime;
    }


    /**
     * get 重复执行定时任务的类型，如果指定了&#x60;repeatType&#x60;，则&#x60;repeatValue&#x60;必填
取值范围：[&#x60;Daily&#x60;,&#x60;Weekly&#x60;,&#x60;Monthly&#x60;,&#x60;Cron&#x60;]
- Daily：每多少天重复执行一次定时任务
- Weekly：每周指定几天重复执行一次定时任务
- Monthly：每月内指定几天重复执行一次定时任务
- Cron：按照指定的Cron表达式执行定时任务

     *
     * @return
     */
    public String getRepeatType() {
        return repeatType;
    }

    /**
     * set 重复执行定时任务的类型，如果指定了&#x60;repeatType&#x60;，则&#x60;repeatValue&#x60;必填
取值范围：[&#x60;Daily&#x60;,&#x60;Weekly&#x60;,&#x60;Monthly&#x60;,&#x60;Cron&#x60;]
- Daily：每多少天重复执行一次定时任务
- Weekly：每周指定几天重复执行一次定时任务
- Monthly：每月内指定几天重复执行一次定时任务
- Cron：按照指定的Cron表达式执行定时任务

     *
     * @param repeatType
     */
    public void setRepeatType(String repeatType) {
        this.repeatType = repeatType;
    }


    /**
     * get 重复执行定时任务的数值，如果指定了&#x60;repeatType&#x60;，则&#x60;repeatValue&#x60;必填
- &#x60;repeatType&#x60;取值为&#x60;Daily&#x60;时，只能填一个值，取值范围：[ &#x60;1&#x60; ~ &#x60;31&#x60; ]，表示：每几天执行
- &#x60;repeatType&#x60;取值为&#x60;Weekly&#x60;时，可以填入多个值，填多个值时使用半角逗号（,）分隔。取值范围：[&#x60;0&#x60;,&#x60;1&#x60;,&#x60;2&#x60;,&#x60;3&#x60;,&#x60;4&#x60;,&#x60;5&#x60;,&#x60;6&#x60;]，分别对应：周日、周一、周二、周三、周四、周五、周六，表示：每周几执行
- &#x60;repeatType&#x60;取值为&#x60;Monthly&#x60;时，格式为A-B。A、B的取值范围：[ &#x60;1&#x60; ~ &#x60;31&#x60; ]，并且B必须大于等于A，表示：每个月的几号到几号执行
- &#x60;repeatType&#x60;取值为&#x60;Cron&#x60;时，必须填写Cron表达式，不支持秒，最小单位为分钟

支持的Cron格式如下：
*    *    *    *    *   从左到右依次表示：&#x60;[分] [小时] [日] [月] [周]&#x60;

- 分，取值范围：[&#x60;0&#x60; ~ &#x60;59&#x60;]，允许的连接符号取值范围：[&#x60;*&#x60; &#x60;/&#x60; &#x60;,&#x60; &#x60;-&#x60;]
- 小时，取值范围：[&#x60;0&#x60; ~ &#x60;23&#x60;]，允许的连接符号取值范围：[&#x60;*&#x60; &#x60;/&#x60; &#x60;,&#x60; &#x60;-&#x60;]
- 日，取值范围：[&#x60;1&#x60; ~ &#x60;31&#x60;]，允许的连接符号取值范围：[&#x60;*&#x60; &#x60;/&#x60; &#x60;,&#x60; &#x60;-&#x60; &#x60;?&#x60;]
- 月，取值范围：[&#x60;1&#x60; ~ &#x60;12&#x60;]，允许的连接符号取值范围：[&#x60;*&#x60; &#x60;/&#x60; &#x60;,&#x60; &#x60;-&#x60;]
- 周，取值范围：[&#x60;0&#x60; ~ &#x60;6&#x60;]，允许的连接符号取值范围：[&#x60;*&#x60; &#x60;/&#x60; &#x60;,&#x60; &#x60;-&#x60; &#x60;?&#x60;]

符号解析：&#x60;*&#x60;表示任意值，&#x60;/&#x60;表示步长，&#x60;,&#x60;表示多个值，&#x60;-&#x60;表示范围，&#x60;?&#x60;表示不指定值

示例：0 10 * * *  表示：每天10点执行

     *
     * @return
     */
    public String getRepeatValue() {
        return repeatValue;
    }

    /**
     * set 重复执行定时任务的数值，如果指定了&#x60;repeatType&#x60;，则&#x60;repeatValue&#x60;必填
- &#x60;repeatType&#x60;取值为&#x60;Daily&#x60;时，只能填一个值，取值范围：[ &#x60;1&#x60; ~ &#x60;31&#x60; ]，表示：每几天执行
- &#x60;repeatType&#x60;取值为&#x60;Weekly&#x60;时，可以填入多个值，填多个值时使用半角逗号（,）分隔。取值范围：[&#x60;0&#x60;,&#x60;1&#x60;,&#x60;2&#x60;,&#x60;3&#x60;,&#x60;4&#x60;,&#x60;5&#x60;,&#x60;6&#x60;]，分别对应：周日、周一、周二、周三、周四、周五、周六，表示：每周几执行
- &#x60;repeatType&#x60;取值为&#x60;Monthly&#x60;时，格式为A-B。A、B的取值范围：[ &#x60;1&#x60; ~ &#x60;31&#x60; ]，并且B必须大于等于A，表示：每个月的几号到几号执行
- &#x60;repeatType&#x60;取值为&#x60;Cron&#x60;时，必须填写Cron表达式，不支持秒，最小单位为分钟

支持的Cron格式如下：
*    *    *    *    *   从左到右依次表示：&#x60;[分] [小时] [日] [月] [周]&#x60;

- 分，取值范围：[&#x60;0&#x60; ~ &#x60;59&#x60;]，允许的连接符号取值范围：[&#x60;*&#x60; &#x60;/&#x60; &#x60;,&#x60; &#x60;-&#x60;]
- 小时，取值范围：[&#x60;0&#x60; ~ &#x60;23&#x60;]，允许的连接符号取值范围：[&#x60;*&#x60; &#x60;/&#x60; &#x60;,&#x60; &#x60;-&#x60;]
- 日，取值范围：[&#x60;1&#x60; ~ &#x60;31&#x60;]，允许的连接符号取值范围：[&#x60;*&#x60; &#x60;/&#x60; &#x60;,&#x60; &#x60;-&#x60; &#x60;?&#x60;]
- 月，取值范围：[&#x60;1&#x60; ~ &#x60;12&#x60;]，允许的连接符号取值范围：[&#x60;*&#x60; &#x60;/&#x60; &#x60;,&#x60; &#x60;-&#x60;]
- 周，取值范围：[&#x60;0&#x60; ~ &#x60;6&#x60;]，允许的连接符号取值范围：[&#x60;*&#x60; &#x60;/&#x60; &#x60;,&#x60; &#x60;-&#x60; &#x60;?&#x60;]

符号解析：&#x60;*&#x60;表示任意值，&#x60;/&#x60;表示步长，&#x60;,&#x60;表示多个值，&#x60;-&#x60;表示范围，&#x60;?&#x60;表示不指定值

示例：0 10 * * *  表示：每天10点执行

     *
     * @param repeatValue
     */
    public void setRepeatValue(String repeatValue) {
        this.repeatValue = repeatValue;
    }


    /**
     * get 重复执行定时任务的结束时间
默认为空，表示不限制结束时间，一直重复执行
时间格式：&#x60;2023-05-10 10:10:00&#x60;，目前只支持到分钟，秒数会被忽略，但是需要严格按照此时间格式填写
时间限制如下：
- 时间必须大于&#x60;launchTime&#x60;

     *
     * @return
     */
    public String getRepeatEndTime() {
        return repeatEndTime;
    }

    /**
     * set 重复执行定时任务的结束时间
默认为空，表示不限制结束时间，一直重复执行
时间格式：&#x60;2023-05-10 10:10:00&#x60;，目前只支持到分钟，秒数会被忽略，但是需要严格按照此时间格式填写
时间限制如下：
- 时间必须大于&#x60;launchTime&#x60;

     *
     * @param repeatEndTime
     */
    public void setRepeatEndTime(String repeatEndTime) {
        this.repeatEndTime = repeatEndTime;
    }


    /**
     * get 定时任务触发操作失败后，在此时间内重试，单位为秒，取值范围：[&#x60;0&#x60; ~ &#x60;1800&#x60;]
     *
     * @return
     */
    public Integer getLaunchExpirationTime() {
        return launchExpirationTime;
    }

    /**
     * set 定时任务触发操作失败后，在此时间内重试，单位为秒，取值范围：[&#x60;0&#x60; ~ &#x60;1800&#x60;]
     *
     * @param launchExpirationTime
     */
    public void setLaunchExpirationTime(Integer launchExpirationTime) {
        this.launchExpirationTime = launchExpirationTime;
    }


    /**
     * get 地域ID
     *
     * @return
     */
    public String getRegionId() {
        return regionId;
    }

    /**
     * set 地域ID
     *
     * @param regionId
     */
    public void setRegionId(String regionId) {
        this.regionId = regionId;
    }


    /**
     * get 定时任务ID
     *
     * @return
     */
    public String getAsCronId() {
        return asCronId;
    }

    /**
     * set 定时任务ID
     *
     * @param asCronId
     */
    public void setAsCronId(String asCronId) {
        this.asCronId = asCronId;
    }



    /**
     * set 高可用组ID
     *
     * @param agId
     */
    public UpdateAsCronRequest agId(String agId) {
        this.agId = agId;
        return this;
    }


    /**
     * set 名称，长度为1~32个字符，只允许中文、数字、大小写字母、英文下划线（_）、连字符（-）
     *
     * @param name
     */
    public UpdateAsCronRequest name(String name) {
        this.name = name;
        return this;
    }


    /**
     * set 描述，最大长度为256个字符
     *
     * @param description
     */
    public UpdateAsCronRequest description(String description) {
        this.description = description;
        return this;
    }


    /**
     * set 可以为定时任务绑定伸缩规则，目前只支持简单规则，即 &#x60;asRuleType&#x60; 为 &#x60;Simple&#x60; 的伸缩规则
- 如果指定了参数&#x60;asRuleId&#x60;，则不允许指定参数&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;
- 如果指定了参数&#x60;asRuleId&#x60;，并且当前伸缩方式为执行简单规则，那么表示更换定时任务关联的伸缩规则
- 如果指定了参数&#x60;asRuleId&#x60;，但是当前伸缩方式为修改伸缩组属性[&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;]，那么将会清空&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;的值，同时设置&#x60;asRuleId&#x60;的值

     *
     * @param asRuleId
     */
    public UpdateAsCronRequest asRuleId(String asRuleId) {
        this.asRuleId = asRuleId;
        return this;
    }


    /**
     * set 设置伸缩组最小实例数，必须大于等于0，如果没有设置此参数，则此参数将会保存为 -1
- 如果指定了参数&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;三者任意一个或多个，则不允许指定参数&#x60;asRuleId&#x60;
- 如果指定了参数&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;三者任意一个或多个，并且当前伸缩方式为修改伸缩组属性[&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;]，那么将会更新&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;指定的参数值
- 如果指定了参数&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;三者任意一个或多个，但是当前伸缩方式为执行简单规则，那么将会清空&#x60;asRuleId&#x60;的值，同时设置&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;指定的参数值

     *
     * @param minSize
     */
    public UpdateAsCronRequest minSize(Integer minSize) {
        this.minSize = minSize;
        return this;
    }


    /**
     * set 设置伸缩组最大实例数，必须大于等于0，如果没有设置此参数，则此参数将会保存为 -1
- 如果指定了参数&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;三者任意一个或多个，则不允许指定参数&#x60;asRuleId&#x60;
- 如果指定了参数&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;三者任意一个或多个，并且当前伸缩方式为修改伸缩组属性[&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;]，那么将会更新&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;指定的参数值
- 如果指定了参数&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;三者任意一个或多个，但是当前伸缩方式为执行简单规则，那么将会清空&#x60;asRuleId&#x60;的值，同时设置&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;指定的参数值

     *
     * @param maxSize
     */
    public UpdateAsCronRequest maxSize(Integer maxSize) {
        this.maxSize = maxSize;
        return this;
    }


    /**
     * set 设置伸缩组期望实例数，必须大于等于0，如果没有设置此参数，则此参数将会保存为 -1
- 如果指定了参数&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;三者任意一个或多个，则不允许指定参数&#x60;asRuleId&#x60;
- 如果指定了参数&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;三者任意一个或多个，并且当前伸缩方式为修改伸缩组属性[&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;]，那么将会更新&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;指定的参数值
- 如果指定了参数&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;三者任意一个或多个，但是当前伸缩方式为执行简单规则，那么将会清空&#x60;asRuleId&#x60;的值，同时设置&#x60;minSize&#x60;,&#x60;maxSize&#x60;,&#x60;desiredCapacity&#x60;指定的参数值

     *
     * @param desiredCapacity
     */
    public UpdateAsCronRequest desiredCapacity(Integer desiredCapacity) {
        this.desiredCapacity = desiredCapacity;
        return this;
    }


    /**
     * set 定时任务触发的时间点
时间格式：&#x60;2023-05-10 10:10:00&#x60;，目前只支持到分钟，秒数会被忽略，但是需要严格按照此时间格式填写
- 如果未指定&#x60;repeatType&#x60;，则按指定的日期和时间执行一次
- 如果指定了&#x60;repeatType&#x60;，则此属性指定的时间点，表示从这个时间之后开始按照重复周期执行定时任务
时间限制如下：
- 时间必须大于当前时间
- 不能填写当前时间起30日后的时间
- 时间必须小于&#x60;repeatEndTime&#x60;

     *
     * @param launchTime
     */
    public UpdateAsCronRequest launchTime(String launchTime) {
        this.launchTime = launchTime;
        return this;
    }


    /**
     * set 重复执行定时任务的类型，如果指定了&#x60;repeatType&#x60;，则&#x60;repeatValue&#x60;必填
取值范围：[&#x60;Daily&#x60;,&#x60;Weekly&#x60;,&#x60;Monthly&#x60;,&#x60;Cron&#x60;]
- Daily：每多少天重复执行一次定时任务
- Weekly：每周指定几天重复执行一次定时任务
- Monthly：每月内指定几天重复执行一次定时任务
- Cron：按照指定的Cron表达式执行定时任务

     *
     * @param repeatType
     */
    public UpdateAsCronRequest repeatType(String repeatType) {
        this.repeatType = repeatType;
        return this;
    }


    /**
     * set 重复执行定时任务的数值，如果指定了&#x60;repeatType&#x60;，则&#x60;repeatValue&#x60;必填
- &#x60;repeatType&#x60;取值为&#x60;Daily&#x60;时，只能填一个值，取值范围：[ &#x60;1&#x60; ~ &#x60;31&#x60; ]，表示：每几天执行
- &#x60;repeatType&#x60;取值为&#x60;Weekly&#x60;时，可以填入多个值，填多个值时使用半角逗号（,）分隔。取值范围：[&#x60;0&#x60;,&#x60;1&#x60;,&#x60;2&#x60;,&#x60;3&#x60;,&#x60;4&#x60;,&#x60;5&#x60;,&#x60;6&#x60;]，分别对应：周日、周一、周二、周三、周四、周五、周六，表示：每周几执行
- &#x60;repeatType&#x60;取值为&#x60;Monthly&#x60;时，格式为A-B。A、B的取值范围：[ &#x60;1&#x60; ~ &#x60;31&#x60; ]，并且B必须大于等于A，表示：每个月的几号到几号执行
- &#x60;repeatType&#x60;取值为&#x60;Cron&#x60;时，必须填写Cron表达式，不支持秒，最小单位为分钟

支持的Cron格式如下：
*    *    *    *    *   从左到右依次表示：&#x60;[分] [小时] [日] [月] [周]&#x60;

- 分，取值范围：[&#x60;0&#x60; ~ &#x60;59&#x60;]，允许的连接符号取值范围：[&#x60;*&#x60; &#x60;/&#x60; &#x60;,&#x60; &#x60;-&#x60;]
- 小时，取值范围：[&#x60;0&#x60; ~ &#x60;23&#x60;]，允许的连接符号取值范围：[&#x60;*&#x60; &#x60;/&#x60; &#x60;,&#x60; &#x60;-&#x60;]
- 日，取值范围：[&#x60;1&#x60; ~ &#x60;31&#x60;]，允许的连接符号取值范围：[&#x60;*&#x60; &#x60;/&#x60; &#x60;,&#x60; &#x60;-&#x60; &#x60;?&#x60;]
- 月，取值范围：[&#x60;1&#x60; ~ &#x60;12&#x60;]，允许的连接符号取值范围：[&#x60;*&#x60; &#x60;/&#x60; &#x60;,&#x60; &#x60;-&#x60;]
- 周，取值范围：[&#x60;0&#x60; ~ &#x60;6&#x60;]，允许的连接符号取值范围：[&#x60;*&#x60; &#x60;/&#x60; &#x60;,&#x60; &#x60;-&#x60; &#x60;?&#x60;]

符号解析：&#x60;*&#x60;表示任意值，&#x60;/&#x60;表示步长，&#x60;,&#x60;表示多个值，&#x60;-&#x60;表示范围，&#x60;?&#x60;表示不指定值

示例：0 10 * * *  表示：每天10点执行

     *
     * @param repeatValue
     */
    public UpdateAsCronRequest repeatValue(String repeatValue) {
        this.repeatValue = repeatValue;
        return this;
    }


    /**
     * set 重复执行定时任务的结束时间
默认为空，表示不限制结束时间，一直重复执行
时间格式：&#x60;2023-05-10 10:10:00&#x60;，目前只支持到分钟，秒数会被忽略，但是需要严格按照此时间格式填写
时间限制如下：
- 时间必须大于&#x60;launchTime&#x60;

     *
     * @param repeatEndTime
     */
    public UpdateAsCronRequest repeatEndTime(String repeatEndTime) {
        this.repeatEndTime = repeatEndTime;
        return this;
    }


    /**
     * set 定时任务触发操作失败后，在此时间内重试，单位为秒，取值范围：[&#x60;0&#x60; ~ &#x60;1800&#x60;]
     *
     * @param launchExpirationTime
     */
    public UpdateAsCronRequest launchExpirationTime(Integer launchExpirationTime) {
        this.launchExpirationTime = launchExpirationTime;
        return this;
    }


    /**
     * set 地域ID
     *
     * @param regionId
     */
    public UpdateAsCronRequest regionId(String regionId) {
        this.regionId = regionId;
        return this;
    }


    /**
     * set 定时任务ID
     *
     * @param asCronId
     */
    public UpdateAsCronRequest asCronId(String asCronId) {
        this.asCronId = asCronId;
        return this;
    }


}