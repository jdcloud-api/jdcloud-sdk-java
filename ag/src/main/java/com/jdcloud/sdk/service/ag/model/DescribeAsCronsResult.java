/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 弹性伸缩定时任务管理
 * 弹性伸缩定时任务管理
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.ag.model;

import java.util.List;
import java.util.ArrayList;
import com.jdcloud.sdk.service.ag.model.AsCronInfo;
import com.jdcloud.sdk.service.JdcloudResult;

/**
 * 查看定时任务
- 所有参数取值为字符串类型的都严格区分大小写
- 所有参数都为非必传，但是至少需要传入一个参数，否则报错
- 伸缩功能开启或者关闭的情况下，都支持调用此接口
- 定时任务如果关联伸缩规则，只能关联简单规则，且一个定时任务只能关联一个简单规则

 */
public class DescribeAsCronsResult extends JdcloudResult implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 本次查询可匹配到的总记录数，使用者需要结合 &#x60;pageNumber&#x60; 和 &#x60;pageSize&#x60; 计算是否可以继续分页。
     */
    private Integer totalCount;

    /**
     * asCrons
     */
    
    private List<AsCronInfo> asCrons;


    /**
     * get 本次查询可匹配到的总记录数，使用者需要结合 &#x60;pageNumber&#x60; 和 &#x60;pageSize&#x60; 计算是否可以继续分页。
     *
     * @return
     */
    public Integer getTotalCount() {
        return totalCount;
    }

    /**
     * set 本次查询可匹配到的总记录数，使用者需要结合 &#x60;pageNumber&#x60; 和 &#x60;pageSize&#x60; 计算是否可以继续分页。
     *
     * @param totalCount
     */
    public void setTotalCount(Integer totalCount) {
        this.totalCount = totalCount;
    }


    /**
    * get asCrons
    *
    * @return
    */
    public List<AsCronInfo> getAsCrons() {
        return asCrons;
    }

    /**
    * set asCrons
    *
    * @param asCrons
    */
    public void setAsCrons(List<AsCronInfo> asCrons) {
        this.asCrons = asCrons;
    }



    /**
     * set 本次查询可匹配到的总记录数，使用者需要结合 &#x60;pageNumber&#x60; 和 &#x60;pageSize&#x60; 计算是否可以继续分页。
     *
     * @param totalCount
     */
    public DescribeAsCronsResult totalCount(Integer totalCount) {
        this.totalCount = totalCount;
        return this;
    }


    /**
    * set asCrons
    *
    * @param asCrons
    */
    public DescribeAsCronsResult asCrons(List<AsCronInfo> asCrons) {
        this.asCrons = asCrons;
        return this;
    }



    /**
     * add item to asCrons
     *
     * @param asCron
     */
    public void addAsCron(AsCronInfo asCron) {
        if (this.asCrons == null) {
            this.asCrons = new ArrayList<>();
        }
        this.asCrons.add(asCron);
    }
}