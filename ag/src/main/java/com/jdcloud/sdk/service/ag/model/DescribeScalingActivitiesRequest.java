/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 弹性伸缩管理
 * 弹性伸缩组的接口
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.ag.model;

import java.util.List;
import java.util.ArrayList;
import com.jdcloud.sdk.service.ag.model.Filter;
import com.jdcloud.sdk.service.ag.model.Sort;
import com.jdcloud.sdk.annotation.Required;
import com.jdcloud.sdk.service.JdcloudRequest;

/**
 * 使用过滤条件查询一个或多个弹性伸缩活动
 */
public class DescribeScalingActivitiesRequest extends JdcloudRequest implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 页码；默认为1
     */
    private Integer pageNumber;

    /**
     * 分页大小；默认为20；取值范围[10, 100]
     */
    private Integer pageSize;

    /**
     * status - 状态，包括成功：SUCCESS,拒绝：REJECTED,失败：FAILED,执行中：RUNNING,部分成功：WARN，精确匹配
beginTime - 开始时间，精确匹配，查询大于等于这个时间的记录
endTime - 结束时间，精确匹配，查询小于等于这个时间的记录
以上每个filter项仅支持单个值查询,如果传多个值仅取第一个值

     */
    
    private List<Filter> filters;
    /**
     * 排序条件列表，目前只支持单个排序条件，不支持多个排序条件，默认按照 &#x60;startTime&#x60; 降序排序
支持使用以下关键字进行排序
- &#x60;startTime&#x60;: 活动开始时间

     */
    
    private List<Sort> sorts;
    /**
     * 地域
     * Required:true
     */
    @Required
    private String regionId;

    /**
     * 高可用组 ID
     * Required:true
     */
    @Required
    private String agId;



    /**
     * get 页码；默认为1
     *
     * @return
     */
    public Integer getPageNumber() {
        return pageNumber;
    }

    /**
     * set 页码；默认为1
     *
     * @param pageNumber
     */
    public void setPageNumber(Integer pageNumber) {
        this.pageNumber = pageNumber;
    }


    /**
     * get 分页大小；默认为20；取值范围[10, 100]
     *
     * @return
     */
    public Integer getPageSize() {
        return pageSize;
    }

    /**
     * set 分页大小；默认为20；取值范围[10, 100]
     *
     * @param pageSize
     */
    public void setPageSize(Integer pageSize) {
        this.pageSize = pageSize;
    }


    /**
    * get status - 状态，包括成功：SUCCESS,拒绝：REJECTED,失败：FAILED,执行中：RUNNING,部分成功：WARN，精确匹配
beginTime - 开始时间，精确匹配，查询大于等于这个时间的记录
endTime - 结束时间，精确匹配，查询小于等于这个时间的记录
以上每个filter项仅支持单个值查询,如果传多个值仅取第一个值

    *
    * @return
    */
    public List<Filter> getFilters() {
        return filters;
    }

    /**
    * set status - 状态，包括成功：SUCCESS,拒绝：REJECTED,失败：FAILED,执行中：RUNNING,部分成功：WARN，精确匹配
beginTime - 开始时间，精确匹配，查询大于等于这个时间的记录
endTime - 结束时间，精确匹配，查询小于等于这个时间的记录
以上每个filter项仅支持单个值查询,如果传多个值仅取第一个值

    *
    * @param filters
    */
    public void setFilters(List<Filter> filters) {
        this.filters = filters;
    }


    /**
    * get 排序条件列表，目前只支持单个排序条件，不支持多个排序条件，默认按照 &#x60;startTime&#x60; 降序排序
支持使用以下关键字进行排序
- &#x60;startTime&#x60;: 活动开始时间

    *
    * @return
    */
    public List<Sort> getSorts() {
        return sorts;
    }

    /**
    * set 排序条件列表，目前只支持单个排序条件，不支持多个排序条件，默认按照 &#x60;startTime&#x60; 降序排序
支持使用以下关键字进行排序
- &#x60;startTime&#x60;: 活动开始时间

    *
    * @param sorts
    */
    public void setSorts(List<Sort> sorts) {
        this.sorts = sorts;
    }


    /**
     * get 地域
     *
     * @return
     */
    public String getRegionId() {
        return regionId;
    }

    /**
     * set 地域
     *
     * @param regionId
     */
    public void setRegionId(String regionId) {
        this.regionId = regionId;
    }


    /**
     * get 高可用组 ID
     *
     * @return
     */
    public String getAgId() {
        return agId;
    }

    /**
     * set 高可用组 ID
     *
     * @param agId
     */
    public void setAgId(String agId) {
        this.agId = agId;
    }



    /**
     * set 页码；默认为1
     *
     * @param pageNumber
     */
    public DescribeScalingActivitiesRequest pageNumber(Integer pageNumber) {
        this.pageNumber = pageNumber;
        return this;
    }


    /**
     * set 分页大小；默认为20；取值范围[10, 100]
     *
     * @param pageSize
     */
    public DescribeScalingActivitiesRequest pageSize(Integer pageSize) {
        this.pageSize = pageSize;
        return this;
    }


    /**
    * set status - 状态，包括成功：SUCCESS,拒绝：REJECTED,失败：FAILED,执行中：RUNNING,部分成功：WARN，精确匹配
beginTime - 开始时间，精确匹配，查询大于等于这个时间的记录
endTime - 结束时间，精确匹配，查询小于等于这个时间的记录
以上每个filter项仅支持单个值查询,如果传多个值仅取第一个值

    *
    * @param filters
    */
    public DescribeScalingActivitiesRequest filters(List<Filter> filters) {
        this.filters = filters;
        return this;
    }


    /**
    * set 排序条件列表，目前只支持单个排序条件，不支持多个排序条件，默认按照 &#x60;startTime&#x60; 降序排序
支持使用以下关键字进行排序
- &#x60;startTime&#x60;: 活动开始时间

    *
    * @param sorts
    */
    public DescribeScalingActivitiesRequest sorts(List<Sort> sorts) {
        this.sorts = sorts;
        return this;
    }


    /**
     * set 地域
     *
     * @param regionId
     */
    public DescribeScalingActivitiesRequest regionId(String regionId) {
        this.regionId = regionId;
        return this;
    }


    /**
     * set 高可用组 ID
     *
     * @param agId
     */
    public DescribeScalingActivitiesRequest agId(String agId) {
        this.agId = agId;
        return this;
    }



    /**
     * add item to status - 状态，包括成功：SUCCESS,拒绝：REJECTED,失败：FAILED,执行中：RUNNING,部分成功：WARN，精确匹配
beginTime - 开始时间，精确匹配，查询大于等于这个时间的记录
endTime - 结束时间，精确匹配，查询小于等于这个时间的记录
以上每个filter项仅支持单个值查询,如果传多个值仅取第一个值

     *
     * @param filter
     */
    public void addFilter(Filter filter) {
        if (this.filters == null) {
            this.filters = new ArrayList<>();
        }
        this.filters.add(filter);
    }

    /**
     * add item to 排序条件列表，目前只支持单个排序条件，不支持多个排序条件，默认按照 &#x60;startTime&#x60; 降序排序
支持使用以下关键字进行排序
- &#x60;startTime&#x60;: 活动开始时间

     *
     * @param sort
     */
    public void addSort(Sort sort) {
        if (this.sorts == null) {
            this.sorts = new ArrayList<>();
        }
        this.sorts.add(sort);
    }
}