/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * 
 *
 * 
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.ag.model;


/**
 * autoscalingSpecByUpdate
 */
public class AutoscalingSpecByUpdate  implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 伸缩组最小实例数，最大值1000。若高可用组分散策略为host或、switch，组内最小实例数及最大实例数不能大于组quota限制
     */
    private Integer minSize;

    /**
     * 伸缩组最大实例数，最大值1000。若高可用组分散策略为host或、switch，组内最小实例数及最大实例数不能大于组quota限制
     */
    private Integer maxSize;

    /**
     * 伸缩组期望实例数
     */
    private Integer desiredCapacity;

    /**
     * 伸缩组内实例是否需要健康检查，默认是开启
     */
    private Boolean healthCheck;

    /**
     * 冷却时间，默认值为300（单位为秒）,范围为0-86400（24小时）
     */
    private Integer coolDownSeconds;

    /**
     * 默认值为均衡分布，Balance
     */
    private String scalingPolicy;

    /**
     * 实例移出策略，默认值为最早创建的实例,支持：OldestResource（最早创建实例）,NewestResource（最新创建实例）
     */
    private String removalPolicy;



    /**
     * get 伸缩组最小实例数，最大值1000。若高可用组分散策略为host或、switch，组内最小实例数及最大实例数不能大于组quota限制
     *
     * @return
     */
    public Integer getMinSize() {
        return minSize;
    }

    /**
     * set 伸缩组最小实例数，最大值1000。若高可用组分散策略为host或、switch，组内最小实例数及最大实例数不能大于组quota限制
     *
     * @param minSize
     */
    public void setMinSize(Integer minSize) {
        this.minSize = minSize;
    }


    /**
     * get 伸缩组最大实例数，最大值1000。若高可用组分散策略为host或、switch，组内最小实例数及最大实例数不能大于组quota限制
     *
     * @return
     */
    public Integer getMaxSize() {
        return maxSize;
    }

    /**
     * set 伸缩组最大实例数，最大值1000。若高可用组分散策略为host或、switch，组内最小实例数及最大实例数不能大于组quota限制
     *
     * @param maxSize
     */
    public void setMaxSize(Integer maxSize) {
        this.maxSize = maxSize;
    }


    /**
     * get 伸缩组期望实例数
     *
     * @return
     */
    public Integer getDesiredCapacity() {
        return desiredCapacity;
    }

    /**
     * set 伸缩组期望实例数
     *
     * @param desiredCapacity
     */
    public void setDesiredCapacity(Integer desiredCapacity) {
        this.desiredCapacity = desiredCapacity;
    }


    /**
     * get 伸缩组内实例是否需要健康检查，默认是开启
     *
     * @return
     */
    public Boolean getHealthCheck() {
        return healthCheck;
    }

    /**
     * set 伸缩组内实例是否需要健康检查，默认是开启
     *
     * @param healthCheck
     */
    public void setHealthCheck(Boolean healthCheck) {
        this.healthCheck = healthCheck;
    }


    /**
     * get 冷却时间，默认值为300（单位为秒）,范围为0-86400（24小时）
     *
     * @return
     */
    public Integer getCoolDownSeconds() {
        return coolDownSeconds;
    }

    /**
     * set 冷却时间，默认值为300（单位为秒）,范围为0-86400（24小时）
     *
     * @param coolDownSeconds
     */
    public void setCoolDownSeconds(Integer coolDownSeconds) {
        this.coolDownSeconds = coolDownSeconds;
    }


    /**
     * get 默认值为均衡分布，Balance
     *
     * @return
     */
    public String getScalingPolicy() {
        return scalingPolicy;
    }

    /**
     * set 默认值为均衡分布，Balance
     *
     * @param scalingPolicy
     */
    public void setScalingPolicy(String scalingPolicy) {
        this.scalingPolicy = scalingPolicy;
    }


    /**
     * get 实例移出策略，默认值为最早创建的实例,支持：OldestResource（最早创建实例）,NewestResource（最新创建实例）
     *
     * @return
     */
    public String getRemovalPolicy() {
        return removalPolicy;
    }

    /**
     * set 实例移出策略，默认值为最早创建的实例,支持：OldestResource（最早创建实例）,NewestResource（最新创建实例）
     *
     * @param removalPolicy
     */
    public void setRemovalPolicy(String removalPolicy) {
        this.removalPolicy = removalPolicy;
    }



    /**
     * set 伸缩组最小实例数，最大值1000。若高可用组分散策略为host或、switch，组内最小实例数及最大实例数不能大于组quota限制
     *
     * @param minSize
     */
    public AutoscalingSpecByUpdate minSize(Integer minSize) {
        this.minSize = minSize;
        return this;
    }


    /**
     * set 伸缩组最大实例数，最大值1000。若高可用组分散策略为host或、switch，组内最小实例数及最大实例数不能大于组quota限制
     *
     * @param maxSize
     */
    public AutoscalingSpecByUpdate maxSize(Integer maxSize) {
        this.maxSize = maxSize;
        return this;
    }


    /**
     * set 伸缩组期望实例数
     *
     * @param desiredCapacity
     */
    public AutoscalingSpecByUpdate desiredCapacity(Integer desiredCapacity) {
        this.desiredCapacity = desiredCapacity;
        return this;
    }


    /**
     * set 伸缩组内实例是否需要健康检查，默认是开启
     *
     * @param healthCheck
     */
    public AutoscalingSpecByUpdate healthCheck(Boolean healthCheck) {
        this.healthCheck = healthCheck;
        return this;
    }


    /**
     * set 冷却时间，默认值为300（单位为秒）,范围为0-86400（24小时）
     *
     * @param coolDownSeconds
     */
    public AutoscalingSpecByUpdate coolDownSeconds(Integer coolDownSeconds) {
        this.coolDownSeconds = coolDownSeconds;
        return this;
    }


    /**
     * set 默认值为均衡分布，Balance
     *
     * @param scalingPolicy
     */
    public AutoscalingSpecByUpdate scalingPolicy(String scalingPolicy) {
        this.scalingPolicy = scalingPolicy;
        return this;
    }


    /**
     * set 实例移出策略，默认值为最早创建的实例,支持：OldestResource（最早创建实例）,NewestResource（最新创建实例）
     *
     * @param removalPolicy
     */
    public AutoscalingSpecByUpdate removalPolicy(String removalPolicy) {
        this.removalPolicy = removalPolicy;
        return this;
    }


}