/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * 
 *
 * 
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.pod.model;

import java.util.List;
import java.util.ArrayList;

/**
 * 容器详情
 */
public class Container  implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 容器名称
     */
    private String name;

    /**
     * 容器执行的命令。
     */
    
    private List<String> command;
    /**
     * 容器执行命令的参数。
     */
    
    private List<String> args;
    /**
     * 容器执行的环境变量。
     */
    
    private List<Env> env;
    /**
     * 容器镜像名称。
     */
    private String image;

    /**
     * 容器镜像仓库认证信息。
     */
    private String secret;

    /**
     * 容器是否分配tty。
     */
    private Boolean tty;

    /**
     * 容器的工作目录。
     */
    private String workingDir;

    /**
     * 容器存活探针配置
     */
    private Probe livenessProbe;

    /**
     * 容器服务就绪探针配置
     */
    private Probe readinessProbe;

    /**
     * 容器计算资源配置
     */
    private ResourceRequests resources;

    /**
     * 容器计算资源配置
     */
    private CloudDisk systemDisk;

    /**
     * 容器计算资源配置
     */
    
    private List<VolumeMount> volumeMounts;
    /**
     * 容器状态信息
     */
    private ContainerStatus containerStatus;



    /**
     * get 容器名称
     *
     * @return
     */
    public String getName() {
        return name;
    }

    /**
     * set 容器名称
     *
     * @param name
     */
    public void setName(String name) {
        this.name = name;
    }


    /**
    * get 容器执行的命令。
    *
    * @return
    */
    public List<String> getCommand() {
        return command;
    }

    /**
    * set 容器执行的命令。
    *
    * @param command
    */
    public void setCommand(List<String> command) {
        this.command = command;
    }


    /**
    * get 容器执行命令的参数。
    *
    * @return
    */
    public List<String> getArgs() {
        return args;
    }

    /**
    * set 容器执行命令的参数。
    *
    * @param args
    */
    public void setArgs(List<String> args) {
        this.args = args;
    }


    /**
    * get 容器执行的环境变量。
    *
    * @return
    */
    public List<Env> getEnv() {
        return env;
    }

    /**
    * set 容器执行的环境变量。
    *
    * @param env
    */
    public void setEnv(List<Env> env) {
        this.env = env;
    }


    /**
     * get 容器镜像名称。
     *
     * @return
     */
    public String getImage() {
        return image;
    }

    /**
     * set 容器镜像名称。
     *
     * @param image
     */
    public void setImage(String image) {
        this.image = image;
    }


    /**
     * get 容器镜像仓库认证信息。
     *
     * @return
     */
    public String getSecret() {
        return secret;
    }

    /**
     * set 容器镜像仓库认证信息。
     *
     * @param secret
     */
    public void setSecret(String secret) {
        this.secret = secret;
    }


    /**
     * get 容器是否分配tty。
     *
     * @return
     */
    public Boolean getTty() {
        return tty;
    }

    /**
     * set 容器是否分配tty。
     *
     * @param tty
     */
    public void setTty(Boolean tty) {
        this.tty = tty;
    }


    /**
     * get 容器的工作目录。
     *
     * @return
     */
    public String getWorkingDir() {
        return workingDir;
    }

    /**
     * set 容器的工作目录。
     *
     * @param workingDir
     */
    public void setWorkingDir(String workingDir) {
        this.workingDir = workingDir;
    }


    /**
     * get 容器存活探针配置
     *
     * @return
     */
    public Probe getLivenessProbe() {
        return livenessProbe;
    }

    /**
     * set 容器存活探针配置
     *
     * @param livenessProbe
     */
    public void setLivenessProbe(Probe livenessProbe) {
        this.livenessProbe = livenessProbe;
    }


    /**
     * get 容器服务就绪探针配置
     *
     * @return
     */
    public Probe getReadinessProbe() {
        return readinessProbe;
    }

    /**
     * set 容器服务就绪探针配置
     *
     * @param readinessProbe
     */
    public void setReadinessProbe(Probe readinessProbe) {
        this.readinessProbe = readinessProbe;
    }


    /**
     * get 容器计算资源配置
     *
     * @return
     */
    public ResourceRequests getResources() {
        return resources;
    }

    /**
     * set 容器计算资源配置
     *
     * @param resources
     */
    public void setResources(ResourceRequests resources) {
        this.resources = resources;
    }


    /**
     * get 容器计算资源配置
     *
     * @return
     */
    public CloudDisk getSystemDisk() {
        return systemDisk;
    }

    /**
     * set 容器计算资源配置
     *
     * @param systemDisk
     */
    public void setSystemDisk(CloudDisk systemDisk) {
        this.systemDisk = systemDisk;
    }


    /**
    * get 容器计算资源配置
    *
    * @return
    */
    public List<VolumeMount> getVolumeMounts() {
        return volumeMounts;
    }

    /**
    * set 容器计算资源配置
    *
    * @param volumeMounts
    */
    public void setVolumeMounts(List<VolumeMount> volumeMounts) {
        this.volumeMounts = volumeMounts;
    }


    /**
     * get 容器状态信息
     *
     * @return
     */
    public ContainerStatus getContainerStatus() {
        return containerStatus;
    }

    /**
     * set 容器状态信息
     *
     * @param containerStatus
     */
    public void setContainerStatus(ContainerStatus containerStatus) {
        this.containerStatus = containerStatus;
    }



    /**
     * set 容器名称
     *
     * @param name
     */
    public Container name(String name) {
        this.name = name;
        return this;
    }


    /**
    * set 容器执行的命令。
    *
    * @param command
    */
    public Container command(List<String> command) {
        this.command = command;
        return this;
    }


    /**
    * set 容器执行命令的参数。
    *
    * @param args
    */
    public Container args(List<String> args) {
        this.args = args;
        return this;
    }


    /**
    * set 容器执行的环境变量。
    *
    * @param env
    */
    public Container env(List<Env> env) {
        this.env = env;
        return this;
    }


    /**
     * set 容器镜像名称。
     *
     * @param image
     */
    public Container image(String image) {
        this.image = image;
        return this;
    }


    /**
     * set 容器镜像仓库认证信息。
     *
     * @param secret
     */
    public Container secret(String secret) {
        this.secret = secret;
        return this;
    }


    /**
     * set 容器是否分配tty。
     *
     * @param tty
     */
    public Container tty(Boolean tty) {
        this.tty = tty;
        return this;
    }


    /**
     * set 容器的工作目录。
     *
     * @param workingDir
     */
    public Container workingDir(String workingDir) {
        this.workingDir = workingDir;
        return this;
    }


    /**
     * set 容器存活探针配置
     *
     * @param livenessProbe
     */
    public Container livenessProbe(Probe livenessProbe) {
        this.livenessProbe = livenessProbe;
        return this;
    }


    /**
     * set 容器服务就绪探针配置
     *
     * @param readinessProbe
     */
    public Container readinessProbe(Probe readinessProbe) {
        this.readinessProbe = readinessProbe;
        return this;
    }


    /**
     * set 容器计算资源配置
     *
     * @param resources
     */
    public Container resources(ResourceRequests resources) {
        this.resources = resources;
        return this;
    }


    /**
     * set 容器计算资源配置
     *
     * @param systemDisk
     */
    public Container systemDisk(CloudDisk systemDisk) {
        this.systemDisk = systemDisk;
        return this;
    }


    /**
    * set 容器计算资源配置
    *
    * @param volumeMounts
    */
    public Container volumeMounts(List<VolumeMount> volumeMounts) {
        this.volumeMounts = volumeMounts;
        return this;
    }


    /**
     * set 容器状态信息
     *
     * @param containerStatus
     */
    public Container containerStatus(ContainerStatus containerStatus) {
        this.containerStatus = containerStatus;
        return this;
    }



    /**
     * add item to 容器执行的命令。
     *
     * @param command
     */
    public void addCommand(String command) {
        if (this.command == null) {
            this.command = new ArrayList<>();
        }
        this.command.add(command);
    }

    /**
     * add item to 容器执行命令的参数。
     *
     * @param arg
     */
    public void addArg(String arg) {
        if (this.args == null) {
            this.args = new ArrayList<>();
        }
        this.args.add(arg);
    }

    /**
     * add item to 容器执行的环境变量。
     *
     * @param env
     */
    public void addEnv(Env env) {
        if (this.env == null) {
            this.env = new ArrayList<>();
        }
        this.env.add(env);
    }

    /**
     * add item to 容器计算资源配置
     *
     * @param volumeMount
     */
    public void addVolumeMount(VolumeMount volumeMount) {
        if (this.volumeMounts == null) {
            this.volumeMounts = new ArrayList<>();
        }
        this.volumeMounts.add(volumeMount);
    }
}