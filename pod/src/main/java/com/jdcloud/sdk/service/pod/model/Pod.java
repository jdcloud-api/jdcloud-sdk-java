/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * 
 *
 * 
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.pod.model;

import java.util.List;
import java.util.ArrayList;
import com.jdcloud.sdk.service.charge.model.Charge;

/**
 * pod 详情
 */
public class Pod  implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * pod ID
     */
    private String podId;

    /**
     * pod 名称
     */
    private String name;

    /**
     * 描述信息，默认为空。
     */
    private String description;

    /**
     * 可用区
     */
    private String az;

    /**
     * 主机名
     */
    private String hostname;

    /**
     * 高可用组
     */
    private AvailablityGroup ag;

    /**
     * pod 所需的计算资源规格
     */
    private String instanceType;

    /**
     * pod重启策略
     */
    private String restartPolicy;

    /**
     * 优雅关闭的时间
     */
    private Integer terminationGracePeriodSeconds;

    /**
     * 主网卡所属vpcId
     */
    private String vpcId;

    /**
     * 主网卡所属子网的ID
     */
    private String subnetId;

    /**
     * 主网卡主IP地址
     */
    private String privateIpAddress;

    /**
     * pod内容器的/etc/resolv.conf配置
     */
    private DnsConfig dnsConfig;

    /**
     * 容器日志配置信息；默认会在本地分配10MB的存储空间
     */
    private LogConfig logConfig;

    /**
     * pod内容器的/etc/hosts配置
     */
    private List<HostAlias> hostAliases;

    /**
     * 属于Pod的volume列表，提供挂载到containers上。
     */
    private List<Volume> volumes;

    /**
     * pod内的容器信息
     */
    private List<Container> containers;

    /**
     * pod状态信息
     */
    private PodStatus podStatus;

    /**
     * 主网卡主IP关联的弹性IP规格
     */
    private ElasticIp elasticIp;

    /**
     * 主网卡配置信息
     */
    private NetworkInterfaceAttachment primaryNetworkInterface;

    /**
     * tags
     */
    private List<Tag> tags;

    /**
     * 计费配置；如不指定，默认计费类型是后付费-按使用时常付费
     */
    private Charge charge;

    /**
     * Pod创建时间
     */
    private String createTime;


    /**
     * get pod ID
     *
     * @return
     */
    public String getPodId() {
        return podId;
    }

    /**
     * set pod ID
     *
     * @param podId
     */
    public void setPodId(String podId) {
        this.podId = podId;
    }

    /**
     * get pod 名称
     *
     * @return
     */
    public String getName() {
        return name;
    }

    /**
     * set pod 名称
     *
     * @param name
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * get 描述信息，默认为空。
     *
     * @return
     */
    public String getDescription() {
        return description;
    }

    /**
     * set 描述信息，默认为空。
     *
     * @param description
     */
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * get 可用区
     *
     * @return
     */
    public String getAz() {
        return az;
    }

    /**
     * set 可用区
     *
     * @param az
     */
    public void setAz(String az) {
        this.az = az;
    }

    /**
     * get 主机名
     *
     * @return
     */
    public String getHostname() {
        return hostname;
    }

    /**
     * set 主机名
     *
     * @param hostname
     */
    public void setHostname(String hostname) {
        this.hostname = hostname;
    }

    /**
     * get 高可用组
     *
     * @return
     */
    public AvailablityGroup getAg() {
        return ag;
    }

    /**
     * set 高可用组
     *
     * @param ag
     */
    public void setAg(AvailablityGroup ag) {
        this.ag = ag;
    }

    /**
     * get pod 所需的计算资源规格
     *
     * @return
     */
    public String getInstanceType() {
        return instanceType;
    }

    /**
     * set pod 所需的计算资源规格
     *
     * @param instanceType
     */
    public void setInstanceType(String instanceType) {
        this.instanceType = instanceType;
    }

    /**
     * get pod重启策略
     *
     * @return
     */
    public String getRestartPolicy() {
        return restartPolicy;
    }

    /**
     * set pod重启策略
     *
     * @param restartPolicy
     */
    public void setRestartPolicy(String restartPolicy) {
        this.restartPolicy = restartPolicy;
    }

    /**
     * get 优雅关闭的时间
     *
     * @return
     */
    public Integer getTerminationGracePeriodSeconds() {
        return terminationGracePeriodSeconds;
    }

    /**
     * set 优雅关闭的时间
     *
     * @param terminationGracePeriodSeconds
     */
    public void setTerminationGracePeriodSeconds(Integer terminationGracePeriodSeconds) {
        this.terminationGracePeriodSeconds = terminationGracePeriodSeconds;
    }

    /**
     * get 主网卡所属vpcId
     *
     * @return
     */
    public String getVpcId() {
        return vpcId;
    }

    /**
     * set 主网卡所属vpcId
     *
     * @param vpcId
     */
    public void setVpcId(String vpcId) {
        this.vpcId = vpcId;
    }

    /**
     * get 主网卡所属子网的ID
     *
     * @return
     */
    public String getSubnetId() {
        return subnetId;
    }

    /**
     * set 主网卡所属子网的ID
     *
     * @param subnetId
     */
    public void setSubnetId(String subnetId) {
        this.subnetId = subnetId;
    }

    /**
     * get 主网卡主IP地址
     *
     * @return
     */
    public String getPrivateIpAddress() {
        return privateIpAddress;
    }

    /**
     * set 主网卡主IP地址
     *
     * @param privateIpAddress
     */
    public void setPrivateIpAddress(String privateIpAddress) {
        this.privateIpAddress = privateIpAddress;
    }

    /**
     * get pod内容器的/etc/resolv.conf配置
     *
     * @return
     */
    public DnsConfig getDnsConfig() {
        return dnsConfig;
    }

    /**
     * set pod内容器的/etc/resolv.conf配置
     *
     * @param dnsConfig
     */
    public void setDnsConfig(DnsConfig dnsConfig) {
        this.dnsConfig = dnsConfig;
    }

    /**
     * get 容器日志配置信息；默认会在本地分配10MB的存储空间
     *
     * @return
     */
    public LogConfig getLogConfig() {
        return logConfig;
    }

    /**
     * set 容器日志配置信息；默认会在本地分配10MB的存储空间
     *
     * @param logConfig
     */
    public void setLogConfig(LogConfig logConfig) {
        this.logConfig = logConfig;
    }

    /**
     * get pod内容器的/etc/hosts配置
     *
     * @return
     */
    public List<HostAlias> getHostAliases() {
        return hostAliases;
    }

    /**
     * set pod内容器的/etc/hosts配置
     *
     * @param hostAliases
     */
    public void setHostAliases(List<HostAlias> hostAliases) {
        this.hostAliases = hostAliases;
    }

    /**
     * get 属于Pod的volume列表，提供挂载到containers上。
     *
     * @return
     */
    public List<Volume> getVolumes() {
        return volumes;
    }

    /**
     * set 属于Pod的volume列表，提供挂载到containers上。
     *
     * @param volumes
     */
    public void setVolumes(List<Volume> volumes) {
        this.volumes = volumes;
    }

    /**
     * get pod内的容器信息
     *
     * @return
     */
    public List<Container> getContainers() {
        return containers;
    }

    /**
     * set pod内的容器信息
     *
     * @param containers
     */
    public void setContainers(List<Container> containers) {
        this.containers = containers;
    }

    /**
     * get pod状态信息
     *
     * @return
     */
    public PodStatus getPodStatus() {
        return podStatus;
    }

    /**
     * set pod状态信息
     *
     * @param podStatus
     */
    public void setPodStatus(PodStatus podStatus) {
        this.podStatus = podStatus;
    }

    /**
     * get 主网卡主IP关联的弹性IP规格
     *
     * @return
     */
    public ElasticIp getElasticIp() {
        return elasticIp;
    }

    /**
     * set 主网卡主IP关联的弹性IP规格
     *
     * @param elasticIp
     */
    public void setElasticIp(ElasticIp elasticIp) {
        this.elasticIp = elasticIp;
    }

    /**
     * get 主网卡配置信息
     *
     * @return
     */
    public NetworkInterfaceAttachment getPrimaryNetworkInterface() {
        return primaryNetworkInterface;
    }

    /**
     * set 主网卡配置信息
     *
     * @param primaryNetworkInterface
     */
    public void setPrimaryNetworkInterface(NetworkInterfaceAttachment primaryNetworkInterface) {
        this.primaryNetworkInterface = primaryNetworkInterface;
    }

    /**
     * get tags
     *
     * @return
     */
    public List<Tag> getTags() {
        return tags;
    }

    /**
     * set tags
     *
     * @param tags
     */
    public void setTags(List<Tag> tags) {
        this.tags = tags;
    }

    /**
     * get 计费配置；如不指定，默认计费类型是后付费-按使用时常付费
     *
     * @return
     */
    public Charge getCharge() {
        return charge;
    }

    /**
     * set 计费配置；如不指定，默认计费类型是后付费-按使用时常付费
     *
     * @param charge
     */
    public void setCharge(Charge charge) {
        this.charge = charge;
    }

    /**
     * get Pod创建时间
     *
     * @return
     */
    public String getCreateTime() {
        return createTime;
    }

    /**
     * set Pod创建时间
     *
     * @param createTime
     */
    public void setCreateTime(String createTime) {
        this.createTime = createTime;
    }


    /**
     * set pod ID
     *
     * @param podId
     */
    public Pod podId(String podId) {
        this.podId = podId;
        return this;
    }

    /**
     * set pod 名称
     *
     * @param name
     */
    public Pod name(String name) {
        this.name = name;
        return this;
    }

    /**
     * set 描述信息，默认为空。
     *
     * @param description
     */
    public Pod description(String description) {
        this.description = description;
        return this;
    }

    /**
     * set 可用区
     *
     * @param az
     */
    public Pod az(String az) {
        this.az = az;
        return this;
    }

    /**
     * set 主机名
     *
     * @param hostname
     */
    public Pod hostname(String hostname) {
        this.hostname = hostname;
        return this;
    }

    /**
     * set 高可用组
     *
     * @param ag
     */
    public Pod ag(AvailablityGroup ag) {
        this.ag = ag;
        return this;
    }

    /**
     * set pod 所需的计算资源规格
     *
     * @param instanceType
     */
    public Pod instanceType(String instanceType) {
        this.instanceType = instanceType;
        return this;
    }

    /**
     * set pod重启策略
     *
     * @param restartPolicy
     */
    public Pod restartPolicy(String restartPolicy) {
        this.restartPolicy = restartPolicy;
        return this;
    }

    /**
     * set 优雅关闭的时间
     *
     * @param terminationGracePeriodSeconds
     */
    public Pod terminationGracePeriodSeconds(Integer terminationGracePeriodSeconds) {
        this.terminationGracePeriodSeconds = terminationGracePeriodSeconds;
        return this;
    }

    /**
     * set 主网卡所属vpcId
     *
     * @param vpcId
     */
    public Pod vpcId(String vpcId) {
        this.vpcId = vpcId;
        return this;
    }

    /**
     * set 主网卡所属子网的ID
     *
     * @param subnetId
     */
    public Pod subnetId(String subnetId) {
        this.subnetId = subnetId;
        return this;
    }

    /**
     * set 主网卡主IP地址
     *
     * @param privateIpAddress
     */
    public Pod privateIpAddress(String privateIpAddress) {
        this.privateIpAddress = privateIpAddress;
        return this;
    }

    /**
     * set pod内容器的/etc/resolv.conf配置
     *
     * @param dnsConfig
     */
    public Pod dnsConfig(DnsConfig dnsConfig) {
        this.dnsConfig = dnsConfig;
        return this;
    }

    /**
     * set 容器日志配置信息；默认会在本地分配10MB的存储空间
     *
     * @param logConfig
     */
    public Pod logConfig(LogConfig logConfig) {
        this.logConfig = logConfig;
        return this;
    }

    /**
     * set pod内容器的/etc/hosts配置
     *
     * @param hostAliases
     */
    public Pod hostAliases(List<HostAlias> hostAliases) {
        this.hostAliases = hostAliases;
        return this;
    }

    /**
     * set 属于Pod的volume列表，提供挂载到containers上。
     *
     * @param volumes
     */
    public Pod volumes(List<Volume> volumes) {
        this.volumes = volumes;
        return this;
    }

    /**
     * set pod内的容器信息
     *
     * @param containers
     */
    public Pod containers(List<Container> containers) {
        this.containers = containers;
        return this;
    }

    /**
     * set pod状态信息
     *
     * @param podStatus
     */
    public Pod podStatus(PodStatus podStatus) {
        this.podStatus = podStatus;
        return this;
    }

    /**
     * set 主网卡主IP关联的弹性IP规格
     *
     * @param elasticIp
     */
    public Pod elasticIp(ElasticIp elasticIp) {
        this.elasticIp = elasticIp;
        return this;
    }

    /**
     * set 主网卡配置信息
     *
     * @param primaryNetworkInterface
     */
    public Pod primaryNetworkInterface(NetworkInterfaceAttachment primaryNetworkInterface) {
        this.primaryNetworkInterface = primaryNetworkInterface;
        return this;
    }

    /**
     * set tags
     *
     * @param tags
     */
    public Pod tags(List<Tag> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * set 计费配置；如不指定，默认计费类型是后付费-按使用时常付费
     *
     * @param charge
     */
    public Pod charge(Charge charge) {
        this.charge = charge;
        return this;
    }

    /**
     * set Pod创建时间
     *
     * @param createTime
     */
    public Pod createTime(String createTime) {
        this.createTime = createTime;
        return this;
    }


    /**
     * add item to pod内容器的/etc/hosts配置
     *
     * @param hostAliase
     */
    public void addHostAliase(HostAlias hostAliase) {
        if (this.hostAliases == null) {
            this.hostAliases = new ArrayList<>();
        }
        this.hostAliases.add(hostAliase);
    }

    /**
     * add item to 属于Pod的volume列表，提供挂载到containers上。
     *
     * @param volume
     */
    public void addVolume(Volume volume) {
        if (this.volumes == null) {
            this.volumes = new ArrayList<>();
        }
        this.volumes.add(volume);
    }

    /**
     * add item to pod内的容器信息
     *
     * @param container
     */
    public void addContainer(Container container) {
        if (this.containers == null) {
            this.containers = new ArrayList<>();
        }
        this.containers.add(container);
    }

    /**
     * add item to tags
     *
     * @param tag
     */
    public void addTag(Tag tag) {
        if (this.tags == null) {
            this.tags = new ArrayList<>();
        }
        this.tags.add(tag);
    }

}