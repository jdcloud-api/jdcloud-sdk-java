/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * 
 *
 * 
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.pod.model;


/**
 * 容器的状态信息
 */
public class ContainerState  implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 容器运行的详细信息
     */
    private ContainerStateRunning running;

    /**
     * 容器终止的详细信息
     */
    private ContainerStateTerminated terminated;

    /**
     * 容器等待的详细信息
     */
    private ContainerStateWaiting waiting;



    /**
     * get 容器运行的详细信息
     *
     * @return
     */
    public ContainerStateRunning getRunning() {
        return running;
    }

    /**
     * set 容器运行的详细信息
     *
     * @param running
     */
    public void setRunning(ContainerStateRunning running) {
        this.running = running;
    }


    /**
     * get 容器终止的详细信息
     *
     * @return
     */
    public ContainerStateTerminated getTerminated() {
        return terminated;
    }

    /**
     * set 容器终止的详细信息
     *
     * @param terminated
     */
    public void setTerminated(ContainerStateTerminated terminated) {
        this.terminated = terminated;
    }


    /**
     * get 容器等待的详细信息
     *
     * @return
     */
    public ContainerStateWaiting getWaiting() {
        return waiting;
    }

    /**
     * set 容器等待的详细信息
     *
     * @param waiting
     */
    public void setWaiting(ContainerStateWaiting waiting) {
        this.waiting = waiting;
    }



    /**
     * set 容器运行的详细信息
     *
     * @param running
     */
    public ContainerState running(ContainerStateRunning running) {
        this.running = running;
        return this;
    }


    /**
     * set 容器终止的详细信息
     *
     * @param terminated
     */
    public ContainerState terminated(ContainerStateTerminated terminated) {
        this.terminated = terminated;
        return this;
    }


    /**
     * set 容器等待的详细信息
     *
     * @param waiting
     */
    public ContainerState waiting(ContainerStateWaiting waiting) {
        this.waiting = waiting;
        return this;
    }


}