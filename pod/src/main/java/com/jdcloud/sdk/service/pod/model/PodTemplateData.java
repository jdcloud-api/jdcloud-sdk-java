/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * PodTemplate
 * Pod模板相关接口
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.pod.model;

import java.util.List;
import java.util.ArrayList;

/**
 * Pod模板详细配置。
 */
public class PodTemplateData  implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 实例规格。
     */
    private String instanceType;

    /**
     * 主网卡所属VPC的ID。
     */
    private String vpcId;

    /**
     * 主网卡所属子网的ID。
     */
    private String subnetId;

    /**
     * pod重启策略。
     */
    private String restartPolicy;

    /**
     * 优雅关闭的时间。
     */
    private Integer terminationGracePeriodSeconds;

    /**
     * pod内容器的/etc/resolv.conf配置
     */
    private DnsConfig dnsConfig;

    /**
     * 容器日志配置信息；默认会在本地分配10MB的存储空间
     */
    private LogConfig logConfig;

    /**
     * pod内容器的/etc/hosts配置
     */
    
    private List<HostAlias> hostAliases;
    /**
     * 容器配置信息
     */
    
    private List<PodTemplateContainer> containers;
    /**
     * 主网卡主IP关联的弹性IP规格
     */
    private PodTemplateElasticIp elasticIp;

    /**
     * pod的云盘挂载配置信息
     */
    
    private List<PodTemplateVolume> volumes;
    /**
     * pod网卡配置
     */
    private PodTemplateNetworkInterfaceAttachment primaryNetworkInterface;

    /**
     * pod辅助网卡配置
     */
    
    private List<PodTemplateNetworkInterfaceAttachment> secondaryNetworkInterfaces;
    /**
     * tags
     */
    
    private List<Tag> tags;


    /**
     * get 实例规格。
     *
     * @return
     */
    public String getInstanceType() {
        return instanceType;
    }

    /**
     * set 实例规格。
     *
     * @param instanceType
     */
    public void setInstanceType(String instanceType) {
        this.instanceType = instanceType;
    }


    /**
     * get 主网卡所属VPC的ID。
     *
     * @return
     */
    public String getVpcId() {
        return vpcId;
    }

    /**
     * set 主网卡所属VPC的ID。
     *
     * @param vpcId
     */
    public void setVpcId(String vpcId) {
        this.vpcId = vpcId;
    }


    /**
     * get 主网卡所属子网的ID。
     *
     * @return
     */
    public String getSubnetId() {
        return subnetId;
    }

    /**
     * set 主网卡所属子网的ID。
     *
     * @param subnetId
     */
    public void setSubnetId(String subnetId) {
        this.subnetId = subnetId;
    }


    /**
     * get pod重启策略。
     *
     * @return
     */
    public String getRestartPolicy() {
        return restartPolicy;
    }

    /**
     * set pod重启策略。
     *
     * @param restartPolicy
     */
    public void setRestartPolicy(String restartPolicy) {
        this.restartPolicy = restartPolicy;
    }


    /**
     * get 优雅关闭的时间。
     *
     * @return
     */
    public Integer getTerminationGracePeriodSeconds() {
        return terminationGracePeriodSeconds;
    }

    /**
     * set 优雅关闭的时间。
     *
     * @param terminationGracePeriodSeconds
     */
    public void setTerminationGracePeriodSeconds(Integer terminationGracePeriodSeconds) {
        this.terminationGracePeriodSeconds = terminationGracePeriodSeconds;
    }


    /**
     * get pod内容器的/etc/resolv.conf配置
     *
     * @return
     */
    public DnsConfig getDnsConfig() {
        return dnsConfig;
    }

    /**
     * set pod内容器的/etc/resolv.conf配置
     *
     * @param dnsConfig
     */
    public void setDnsConfig(DnsConfig dnsConfig) {
        this.dnsConfig = dnsConfig;
    }


    /**
     * get 容器日志配置信息；默认会在本地分配10MB的存储空间
     *
     * @return
     */
    public LogConfig getLogConfig() {
        return logConfig;
    }

    /**
     * set 容器日志配置信息；默认会在本地分配10MB的存储空间
     *
     * @param logConfig
     */
    public void setLogConfig(LogConfig logConfig) {
        this.logConfig = logConfig;
    }


    /**
    * get pod内容器的/etc/hosts配置
    *
    * @return
    */
    public List<HostAlias> getHostAliases() {
        return hostAliases;
    }

    /**
    * set pod内容器的/etc/hosts配置
    *
    * @param hostAliases
    */
    public void setHostAliases(List<HostAlias> hostAliases) {
        this.hostAliases = hostAliases;
    }


    /**
    * get 容器配置信息
    *
    * @return
    */
    public List<PodTemplateContainer> getContainers() {
        return containers;
    }

    /**
    * set 容器配置信息
    *
    * @param containers
    */
    public void setContainers(List<PodTemplateContainer> containers) {
        this.containers = containers;
    }


    /**
     * get 主网卡主IP关联的弹性IP规格
     *
     * @return
     */
    public PodTemplateElasticIp getElasticIp() {
        return elasticIp;
    }

    /**
     * set 主网卡主IP关联的弹性IP规格
     *
     * @param elasticIp
     */
    public void setElasticIp(PodTemplateElasticIp elasticIp) {
        this.elasticIp = elasticIp;
    }


    /**
    * get pod的云盘挂载配置信息
    *
    * @return
    */
    public List<PodTemplateVolume> getVolumes() {
        return volumes;
    }

    /**
    * set pod的云盘挂载配置信息
    *
    * @param volumes
    */
    public void setVolumes(List<PodTemplateVolume> volumes) {
        this.volumes = volumes;
    }


    /**
     * get pod网卡配置
     *
     * @return
     */
    public PodTemplateNetworkInterfaceAttachment getPrimaryNetworkInterface() {
        return primaryNetworkInterface;
    }

    /**
     * set pod网卡配置
     *
     * @param primaryNetworkInterface
     */
    public void setPrimaryNetworkInterface(PodTemplateNetworkInterfaceAttachment primaryNetworkInterface) {
        this.primaryNetworkInterface = primaryNetworkInterface;
    }


    /**
    * get pod辅助网卡配置
    *
    * @return
    */
    public List<PodTemplateNetworkInterfaceAttachment> getSecondaryNetworkInterfaces() {
        return secondaryNetworkInterfaces;
    }

    /**
    * set pod辅助网卡配置
    *
    * @param secondaryNetworkInterfaces
    */
    public void setSecondaryNetworkInterfaces(List<PodTemplateNetworkInterfaceAttachment> secondaryNetworkInterfaces) {
        this.secondaryNetworkInterfaces = secondaryNetworkInterfaces;
    }


    /**
    * get tags
    *
    * @return
    */
    public List<Tag> getTags() {
        return tags;
    }

    /**
    * set tags
    *
    * @param tags
    */
    public void setTags(List<Tag> tags) {
        this.tags = tags;
    }



    /**
     * set 实例规格。
     *
     * @param instanceType
     */
    public PodTemplateData instanceType(String instanceType) {
        this.instanceType = instanceType;
        return this;
    }


    /**
     * set 主网卡所属VPC的ID。
     *
     * @param vpcId
     */
    public PodTemplateData vpcId(String vpcId) {
        this.vpcId = vpcId;
        return this;
    }


    /**
     * set 主网卡所属子网的ID。
     *
     * @param subnetId
     */
    public PodTemplateData subnetId(String subnetId) {
        this.subnetId = subnetId;
        return this;
    }


    /**
     * set pod重启策略。
     *
     * @param restartPolicy
     */
    public PodTemplateData restartPolicy(String restartPolicy) {
        this.restartPolicy = restartPolicy;
        return this;
    }


    /**
     * set 优雅关闭的时间。
     *
     * @param terminationGracePeriodSeconds
     */
    public PodTemplateData terminationGracePeriodSeconds(Integer terminationGracePeriodSeconds) {
        this.terminationGracePeriodSeconds = terminationGracePeriodSeconds;
        return this;
    }


    /**
     * set pod内容器的/etc/resolv.conf配置
     *
     * @param dnsConfig
     */
    public PodTemplateData dnsConfig(DnsConfig dnsConfig) {
        this.dnsConfig = dnsConfig;
        return this;
    }


    /**
     * set 容器日志配置信息；默认会在本地分配10MB的存储空间
     *
     * @param logConfig
     */
    public PodTemplateData logConfig(LogConfig logConfig) {
        this.logConfig = logConfig;
        return this;
    }


    /**
    * set pod内容器的/etc/hosts配置
    *
    * @param hostAliases
    */
    public PodTemplateData hostAliases(List<HostAlias> hostAliases) {
        this.hostAliases = hostAliases;
        return this;
    }


    /**
    * set 容器配置信息
    *
    * @param containers
    */
    public PodTemplateData containers(List<PodTemplateContainer> containers) {
        this.containers = containers;
        return this;
    }


    /**
     * set 主网卡主IP关联的弹性IP规格
     *
     * @param elasticIp
     */
    public PodTemplateData elasticIp(PodTemplateElasticIp elasticIp) {
        this.elasticIp = elasticIp;
        return this;
    }


    /**
    * set pod的云盘挂载配置信息
    *
    * @param volumes
    */
    public PodTemplateData volumes(List<PodTemplateVolume> volumes) {
        this.volumes = volumes;
        return this;
    }


    /**
     * set pod网卡配置
     *
     * @param primaryNetworkInterface
     */
    public PodTemplateData primaryNetworkInterface(PodTemplateNetworkInterfaceAttachment primaryNetworkInterface) {
        this.primaryNetworkInterface = primaryNetworkInterface;
        return this;
    }


    /**
    * set pod辅助网卡配置
    *
    * @param secondaryNetworkInterfaces
    */
    public PodTemplateData secondaryNetworkInterfaces(List<PodTemplateNetworkInterfaceAttachment> secondaryNetworkInterfaces) {
        this.secondaryNetworkInterfaces = secondaryNetworkInterfaces;
        return this;
    }


    /**
    * set tags
    *
    * @param tags
    */
    public PodTemplateData tags(List<Tag> tags) {
        this.tags = tags;
        return this;
    }



    /**
     * add item to pod内容器的/etc/hosts配置
     *
     * @param hostAliase
     */
    public void addHostAliase(HostAlias hostAliase) {
        if (this.hostAliases == null) {
            this.hostAliases = new ArrayList<>();
        }
        this.hostAliases.add(hostAliase);
    }

    /**
     * add item to 容器配置信息
     *
     * @param container
     */
    public void addContainer(PodTemplateContainer container) {
        if (this.containers == null) {
            this.containers = new ArrayList<>();
        }
        this.containers.add(container);
    }

    /**
     * add item to pod的云盘挂载配置信息
     *
     * @param volume
     */
    public void addVolume(PodTemplateVolume volume) {
        if (this.volumes == null) {
            this.volumes = new ArrayList<>();
        }
        this.volumes.add(volume);
    }

    /**
     * add item to pod辅助网卡配置
     *
     * @param secondaryNetworkInterface
     */
    public void addSecondaryNetworkInterface(PodTemplateNetworkInterfaceAttachment secondaryNetworkInterface) {
        if (this.secondaryNetworkInterfaces == null) {
            this.secondaryNetworkInterfaces = new ArrayList<>();
        }
        this.secondaryNetworkInterfaces.add(secondaryNetworkInterface);
    }

    /**
     * add item to tags
     *
     * @param tag
     */
    public void addTag(Tag tag) {
        if (this.tags == null) {
            this.tags = new ArrayList<>();
        }
        this.tags.add(tag);
    }
}