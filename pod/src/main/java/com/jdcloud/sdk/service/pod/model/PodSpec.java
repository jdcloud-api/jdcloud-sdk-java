/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * 
 *
 * 
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.pod.model;

import java.util.List;
import java.util.ArrayList;
import com.jdcloud.sdk.annotation.Required;
import com.jdcloud.sdk.service.charge.model.ChargeSpec;

/**
 * 指定的创建 pod 参数
 */
public class PodSpec  implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Pod名称，符合DNS-1123 subdomain规范；名称不可重复、不支持修改
     * Required:true
     */
    @Required
    private String name;

    /**
     * 描述信息，默认为空；允许输入UTF-8编码下的全部字符，不超过256字符。
     */
    private String description;

    /**
     * 主机名；符合hostname规范，默认值为 podId
     */
    private String hostname;

    /**
     * pod中容器重启策略；Always, OnFailure, Never；默认：Always
     */
    private String restartPolicy;

    /**
     * 优雅关机宽限时长，如果超时，则触发强制关机。默认：30s，值不能是负数，范围：[0-300]
     */
    private Integer terminationGracePeriodSeconds;

    /**
     * 实例类型；参考[文档](https://www.jdcloud.com/help/detail/1992/isCatalog/1)
     * Required:true
     */
    @Required
    private String instanceType;

    /**
     * 容器所属可用区
     * Required:true
     */
    @Required
    private String az;

    /**
     * pod内容器的/etc/resolv.conf配置
     */
    private DnsConfigSpec dnsConfig;

    /**
     * 容器日志配置信息；默认会在本地分配10MB的存储空间
     */
    private LogConfigSpec logConfig;

    /**
     * 域名和IP映射的信息；&lt;/br&gt; 最大10个alias
     */
    private List<HostAliasSpec> hostAliases;

    /**
     * Pod的volume列表，可以挂载到container上。长度范围：[0,7]
     */
    private List<VolumeSpec> volumes;

    /**
     * Pod的容器列表，至少一个容器。长度范围[1,8]
     * Required:true
     */
    @Required
    private List<ContainerSpec> containers;

    /**
     * 计费模式：包年包月预付费（prepaid_by_duration）, 按配置后付费（postpaid_by_duration）。默认：按配置后付费
     */
    private ChargeSpec charge;

    /**
     * 主网卡主IP关联的弹性IP规格
     */
    private ElasticIpSpec elasticIp;

    /**
     * 主网卡配置信息
     * Required:true
     */
    @Required
    private NetworkInterfaceAttachmentSpec primaryNetworkInterface;

    /**
     * 用户普通标签集合
     */
    private List<Tag> userTags;


    /**
     * get Pod名称，符合DNS-1123 subdomain规范；名称不可重复、不支持修改
     *
     * @return
     */
    public String getName() {
        return name;
    }

    /**
     * set Pod名称，符合DNS-1123 subdomain规范；名称不可重复、不支持修改
     *
     * @param name
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * get 描述信息，默认为空；允许输入UTF-8编码下的全部字符，不超过256字符。
     *
     * @return
     */
    public String getDescription() {
        return description;
    }

    /**
     * set 描述信息，默认为空；允许输入UTF-8编码下的全部字符，不超过256字符。
     *
     * @param description
     */
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * get 主机名；符合hostname规范，默认值为 podId
     *
     * @return
     */
    public String getHostname() {
        return hostname;
    }

    /**
     * set 主机名；符合hostname规范，默认值为 podId
     *
     * @param hostname
     */
    public void setHostname(String hostname) {
        this.hostname = hostname;
    }

    /**
     * get pod中容器重启策略；Always, OnFailure, Never；默认：Always
     *
     * @return
     */
    public String getRestartPolicy() {
        return restartPolicy;
    }

    /**
     * set pod中容器重启策略；Always, OnFailure, Never；默认：Always
     *
     * @param restartPolicy
     */
    public void setRestartPolicy(String restartPolicy) {
        this.restartPolicy = restartPolicy;
    }

    /**
     * get 优雅关机宽限时长，如果超时，则触发强制关机。默认：30s，值不能是负数，范围：[0-300]
     *
     * @return
     */
    public Integer getTerminationGracePeriodSeconds() {
        return terminationGracePeriodSeconds;
    }

    /**
     * set 优雅关机宽限时长，如果超时，则触发强制关机。默认：30s，值不能是负数，范围：[0-300]
     *
     * @param terminationGracePeriodSeconds
     */
    public void setTerminationGracePeriodSeconds(Integer terminationGracePeriodSeconds) {
        this.terminationGracePeriodSeconds = terminationGracePeriodSeconds;
    }

    /**
     * get 实例类型；参考[文档](https://www.jdcloud.com/help/detail/1992/isCatalog/1)
     *
     * @return
     */
    public String getInstanceType() {
        return instanceType;
    }

    /**
     * set 实例类型；参考[文档](https://www.jdcloud.com/help/detail/1992/isCatalog/1)
     *
     * @param instanceType
     */
    public void setInstanceType(String instanceType) {
        this.instanceType = instanceType;
    }

    /**
     * get 容器所属可用区
     *
     * @return
     */
    public String getAz() {
        return az;
    }

    /**
     * set 容器所属可用区
     *
     * @param az
     */
    public void setAz(String az) {
        this.az = az;
    }

    /**
     * get pod内容器的/etc/resolv.conf配置
     *
     * @return
     */
    public DnsConfigSpec getDnsConfig() {
        return dnsConfig;
    }

    /**
     * set pod内容器的/etc/resolv.conf配置
     *
     * @param dnsConfig
     */
    public void setDnsConfig(DnsConfigSpec dnsConfig) {
        this.dnsConfig = dnsConfig;
    }

    /**
     * get 容器日志配置信息；默认会在本地分配10MB的存储空间
     *
     * @return
     */
    public LogConfigSpec getLogConfig() {
        return logConfig;
    }

    /**
     * set 容器日志配置信息；默认会在本地分配10MB的存储空间
     *
     * @param logConfig
     */
    public void setLogConfig(LogConfigSpec logConfig) {
        this.logConfig = logConfig;
    }

    /**
     * get 域名和IP映射的信息；&lt;/br&gt; 最大10个alias
     *
     * @return
     */
    public List<HostAliasSpec> getHostAliases() {
        return hostAliases;
    }

    /**
     * set 域名和IP映射的信息；&lt;/br&gt; 最大10个alias
     *
     * @param hostAliases
     */
    public void setHostAliases(List<HostAliasSpec> hostAliases) {
        this.hostAliases = hostAliases;
    }

    /**
     * get Pod的volume列表，可以挂载到container上。长度范围：[0,7]
     *
     * @return
     */
    public List<VolumeSpec> getVolumes() {
        return volumes;
    }

    /**
     * set Pod的volume列表，可以挂载到container上。长度范围：[0,7]
     *
     * @param volumes
     */
    public void setVolumes(List<VolumeSpec> volumes) {
        this.volumes = volumes;
    }

    /**
     * get Pod的容器列表，至少一个容器。长度范围[1,8]
     *
     * @return
     */
    public List<ContainerSpec> getContainers() {
        return containers;
    }

    /**
     * set Pod的容器列表，至少一个容器。长度范围[1,8]
     *
     * @param containers
     */
    public void setContainers(List<ContainerSpec> containers) {
        this.containers = containers;
    }

    /**
     * get 计费模式：包年包月预付费（prepaid_by_duration）, 按配置后付费（postpaid_by_duration）。默认：按配置后付费
     *
     * @return
     */
    public ChargeSpec getCharge() {
        return charge;
    }

    /**
     * set 计费模式：包年包月预付费（prepaid_by_duration）, 按配置后付费（postpaid_by_duration）。默认：按配置后付费
     *
     * @param charge
     */
    public void setCharge(ChargeSpec charge) {
        this.charge = charge;
    }

    /**
     * get 主网卡主IP关联的弹性IP规格
     *
     * @return
     */
    public ElasticIpSpec getElasticIp() {
        return elasticIp;
    }

    /**
     * set 主网卡主IP关联的弹性IP规格
     *
     * @param elasticIp
     */
    public void setElasticIp(ElasticIpSpec elasticIp) {
        this.elasticIp = elasticIp;
    }

    /**
     * get 主网卡配置信息
     *
     * @return
     */
    public NetworkInterfaceAttachmentSpec getPrimaryNetworkInterface() {
        return primaryNetworkInterface;
    }

    /**
     * set 主网卡配置信息
     *
     * @param primaryNetworkInterface
     */
    public void setPrimaryNetworkInterface(NetworkInterfaceAttachmentSpec primaryNetworkInterface) {
        this.primaryNetworkInterface = primaryNetworkInterface;
    }

    /**
     * get 用户普通标签集合
     *
     * @return
     */
    public List<Tag> getUserTags() {
        return userTags;
    }

    /**
     * set 用户普通标签集合
     *
     * @param userTags
     */
    public void setUserTags(List<Tag> userTags) {
        this.userTags = userTags;
    }


    /**
     * set Pod名称，符合DNS-1123 subdomain规范；名称不可重复、不支持修改
     *
     * @param name
     */
    public PodSpec name(String name) {
        this.name = name;
        return this;
    }

    /**
     * set 描述信息，默认为空；允许输入UTF-8编码下的全部字符，不超过256字符。
     *
     * @param description
     */
    public PodSpec description(String description) {
        this.description = description;
        return this;
    }

    /**
     * set 主机名；符合hostname规范，默认值为 podId
     *
     * @param hostname
     */
    public PodSpec hostname(String hostname) {
        this.hostname = hostname;
        return this;
    }

    /**
     * set pod中容器重启策略；Always, OnFailure, Never；默认：Always
     *
     * @param restartPolicy
     */
    public PodSpec restartPolicy(String restartPolicy) {
        this.restartPolicy = restartPolicy;
        return this;
    }

    /**
     * set 优雅关机宽限时长，如果超时，则触发强制关机。默认：30s，值不能是负数，范围：[0-300]
     *
     * @param terminationGracePeriodSeconds
     */
    public PodSpec terminationGracePeriodSeconds(Integer terminationGracePeriodSeconds) {
        this.terminationGracePeriodSeconds = terminationGracePeriodSeconds;
        return this;
    }

    /**
     * set 实例类型；参考[文档](https://www.jdcloud.com/help/detail/1992/isCatalog/1)
     *
     * @param instanceType
     */
    public PodSpec instanceType(String instanceType) {
        this.instanceType = instanceType;
        return this;
    }

    /**
     * set 容器所属可用区
     *
     * @param az
     */
    public PodSpec az(String az) {
        this.az = az;
        return this;
    }

    /**
     * set pod内容器的/etc/resolv.conf配置
     *
     * @param dnsConfig
     */
    public PodSpec dnsConfig(DnsConfigSpec dnsConfig) {
        this.dnsConfig = dnsConfig;
        return this;
    }

    /**
     * set 容器日志配置信息；默认会在本地分配10MB的存储空间
     *
     * @param logConfig
     */
    public PodSpec logConfig(LogConfigSpec logConfig) {
        this.logConfig = logConfig;
        return this;
    }

    /**
     * set 域名和IP映射的信息；&lt;/br&gt; 最大10个alias
     *
     * @param hostAliases
     */
    public PodSpec hostAliases(List<HostAliasSpec> hostAliases) {
        this.hostAliases = hostAliases;
        return this;
    }

    /**
     * set Pod的volume列表，可以挂载到container上。长度范围：[0,7]
     *
     * @param volumes
     */
    public PodSpec volumes(List<VolumeSpec> volumes) {
        this.volumes = volumes;
        return this;
    }

    /**
     * set Pod的容器列表，至少一个容器。长度范围[1,8]
     *
     * @param containers
     */
    public PodSpec containers(List<ContainerSpec> containers) {
        this.containers = containers;
        return this;
    }

    /**
     * set 计费模式：包年包月预付费（prepaid_by_duration）, 按配置后付费（postpaid_by_duration）。默认：按配置后付费
     *
     * @param charge
     */
    public PodSpec charge(ChargeSpec charge) {
        this.charge = charge;
        return this;
    }

    /**
     * set 主网卡主IP关联的弹性IP规格
     *
     * @param elasticIp
     */
    public PodSpec elasticIp(ElasticIpSpec elasticIp) {
        this.elasticIp = elasticIp;
        return this;
    }

    /**
     * set 主网卡配置信息
     *
     * @param primaryNetworkInterface
     */
    public PodSpec primaryNetworkInterface(NetworkInterfaceAttachmentSpec primaryNetworkInterface) {
        this.primaryNetworkInterface = primaryNetworkInterface;
        return this;
    }

    /**
     * set 用户普通标签集合
     *
     * @param userTags
     */
    public PodSpec userTags(List<Tag> userTags) {
        this.userTags = userTags;
        return this;
    }


    /**
     * add item to 域名和IP映射的信息；&lt;/br&gt; 最大10个alias
     *
     * @param hostAliase
     */
    public void addHostAliase(HostAliasSpec hostAliase) {
        if (this.hostAliases == null) {
            this.hostAliases = new ArrayList<>();
        }
        this.hostAliases.add(hostAliase);
    }

    /**
     * add item to Pod的volume列表，可以挂载到container上。长度范围：[0,7]
     *
     * @param volume
     */
    public void addVolume(VolumeSpec volume) {
        if (this.volumes == null) {
            this.volumes = new ArrayList<>();
        }
        this.volumes.add(volume);
    }

    /**
     * add item to Pod的容器列表，至少一个容器。长度范围[1,8]
     *
     * @param container
     */
    public void addContainer(ContainerSpec container) {
        if (this.containers == null) {
            this.containers = new ArrayList<>();
        }
        this.containers.add(container);
    }

    /**
     * add item to 用户普通标签集合
     *
     * @param userTag
     */
    public void addUserTag(Tag userTag) {
        if (this.userTags == null) {
            this.userTags = new ArrayList<>();
        }
        this.userTags.add(userTag);
    }

}