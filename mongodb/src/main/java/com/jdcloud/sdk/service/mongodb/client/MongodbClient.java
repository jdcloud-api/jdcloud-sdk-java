/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 京东云数据库MongoDB接口
 * 数据库MongoDB相关接口
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.mongodb.client;

import com.jdcloud.sdk.JdcloudSdkException;
import com.jdcloud.sdk.auth.CredentialsProvider;
import com.jdcloud.sdk.client.Environment;
import com.jdcloud.sdk.client.Jdcloud;
import com.jdcloud.sdk.client.JdcloudClient;
import com.jdcloud.sdk.client.JdcloudValidateException;
import com.jdcloud.sdk.http.HttpRequestConfig;
import com.jdcloud.sdk.service.mongodb.model.DescribeSecurityIpsRequest;
import com.jdcloud.sdk.service.mongodb.model.DescribeSecurityIpsResponse;
import com.jdcloud.sdk.service.mongodb.client.DescribeSecurityIpsExecutor;
import com.jdcloud.sdk.service.mongodb.model.ModifyInstanceNameRequest;
import com.jdcloud.sdk.service.mongodb.model.ModifyInstanceNameResponse;
import com.jdcloud.sdk.service.mongodb.client.ModifyInstanceNameExecutor;
import com.jdcloud.sdk.service.mongodb.model.ModifySecurityIpsRequest;
import com.jdcloud.sdk.service.mongodb.model.ModifySecurityIpsResponse;
import com.jdcloud.sdk.service.mongodb.client.ModifySecurityIpsExecutor;
import com.jdcloud.sdk.service.mongodb.model.ResetPasswordRequest;
import com.jdcloud.sdk.service.mongodb.model.ResetPasswordResponse;
import com.jdcloud.sdk.service.mongodb.client.ResetPasswordExecutor;
import com.jdcloud.sdk.service.mongodb.model.RestoreInstanceRequest;
import com.jdcloud.sdk.service.mongodb.model.RestoreInstanceResponse;
import com.jdcloud.sdk.service.mongodb.client.RestoreInstanceExecutor;
import com.jdcloud.sdk.service.mongodb.model.DeleteInstanceRequest;
import com.jdcloud.sdk.service.mongodb.model.DeleteInstanceResponse;
import com.jdcloud.sdk.service.mongodb.client.DeleteInstanceExecutor;
import com.jdcloud.sdk.service.mongodb.model.DescribeBackupPolicyRequest;
import com.jdcloud.sdk.service.mongodb.model.DescribeBackupPolicyResponse;
import com.jdcloud.sdk.service.mongodb.client.DescribeBackupPolicyExecutor;
import com.jdcloud.sdk.service.mongodb.model.DescribeFlavorsRequest;
import com.jdcloud.sdk.service.mongodb.model.DescribeFlavorsResponse;
import com.jdcloud.sdk.service.mongodb.client.DescribeFlavorsExecutor;
import com.jdcloud.sdk.service.mongodb.model.BackupDownloadURLRequest;
import com.jdcloud.sdk.service.mongodb.model.BackupDownloadURLResponse;
import com.jdcloud.sdk.service.mongodb.client.BackupDownloadURLExecutor;
import com.jdcloud.sdk.service.mongodb.model.DescribeInstancesRequest;
import com.jdcloud.sdk.service.mongodb.model.DescribeInstancesResponse;
import com.jdcloud.sdk.service.mongodb.client.DescribeInstancesExecutor;
import com.jdcloud.sdk.service.mongodb.model.DescribeBackupsRequest;
import com.jdcloud.sdk.service.mongodb.model.DescribeBackupsResponse;
import com.jdcloud.sdk.service.mongodb.client.DescribeBackupsExecutor;
import com.jdcloud.sdk.service.mongodb.model.ModifyInstanceSpecRequest;
import com.jdcloud.sdk.service.mongodb.model.ModifyInstanceSpecResponse;
import com.jdcloud.sdk.service.mongodb.client.ModifyInstanceSpecExecutor;
import com.jdcloud.sdk.service.mongodb.model.CreateBackupRequest;
import com.jdcloud.sdk.service.mongodb.model.CreateBackupResponse;
import com.jdcloud.sdk.service.mongodb.client.CreateBackupExecutor;
import com.jdcloud.sdk.service.mongodb.model.ModifyBackupPolicyRequest;
import com.jdcloud.sdk.service.mongodb.model.ModifyBackupPolicyResponse;
import com.jdcloud.sdk.service.mongodb.client.ModifyBackupPolicyExecutor;
import com.jdcloud.sdk.service.mongodb.model.CreateInstanceRequest;
import com.jdcloud.sdk.service.mongodb.model.CreateInstanceResponse;
import com.jdcloud.sdk.service.mongodb.client.CreateInstanceExecutor;
import com.jdcloud.sdk.service.mongodb.model.DeleteBackupRequest;
import com.jdcloud.sdk.service.mongodb.model.DeleteBackupResponse;
import com.jdcloud.sdk.service.mongodb.client.DeleteBackupExecutor;
import com.jdcloud.sdk.service.mongodb.model.DescribeAvailableZonesRequest;
import com.jdcloud.sdk.service.mongodb.model.DescribeAvailableZonesResponse;
import com.jdcloud.sdk.service.mongodb.client.DescribeAvailableZonesExecutor;

/**
 * mongodbClient
 */
public class MongodbClient extends JdcloudClient {

    public final static String ApiVersion = "v1";
    private final static String UserAgentPrefix = "JdcloudSdkJava";
    public final static String ClientVersion = "1.0.6";
    public final static String DefaultEndpoint = "mongodb.jdcloud-api.com";
    public final static String ServiceName = "mongodb";
    public final static String UserAgent = UserAgentPrefix + "/" + ClientVersion + " " + ServiceName + "/" + ApiVersion;

    CredentialsProvider credentialsProvider;
    HttpRequestConfig httpRequestConfig;
    Environment environment = new Environment.Builder().endpoint(DefaultEndpoint).build();

    public CredentialsProvider getCredentialsProvider() {
        return credentialsProvider;
    }

    public HttpRequestConfig getHttpRequestConfig() {
        return httpRequestConfig;
    }

    public Environment getEnvironment() {
        return environment;
    }

    public String getUserAgent() {
        return UserAgent;
    }

    public String getServiceName() {
        return ServiceName;
    }

    public String getVersion() {
        return ApiVersion;
    }

    private MongodbClient() {

    }

    public static Builder builder() {
        return new DefaultBuilder();
    }


    /**
     * 查询实例访问白名单
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeSecurityIpsResponse describeSecurityIps(DescribeSecurityIpsRequest request) throws JdcloudSdkException {
        return new DescribeSecurityIpsExecutor().client(this).execute(request);
    }

    /**
     * 修改实例名称
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ModifyInstanceNameResponse modifyInstanceName(ModifyInstanceNameRequest request) throws JdcloudSdkException {
        return new ModifyInstanceNameExecutor().client(this).execute(request);
    }

    /**
     * 修改实例访问白名单
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ModifySecurityIpsResponse modifySecurityIps(ModifySecurityIpsRequest request) throws JdcloudSdkException {
        return new ModifySecurityIpsExecutor().client(this).execute(request);
    }

    /**
     * 重置密码
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ResetPasswordResponse resetPassword(ResetPasswordRequest request) throws JdcloudSdkException {
        return new ResetPasswordExecutor().client(this).execute(request);
    }

    /**
     * 数据恢复
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public RestoreInstanceResponse restoreInstance(RestoreInstanceRequest request) throws JdcloudSdkException {
        return new RestoreInstanceExecutor().client(this).execute(request);
    }

    /**
     * 删除实例
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteInstanceResponse deleteInstance(DeleteInstanceRequest request) throws JdcloudSdkException {
        return new DeleteInstanceExecutor().client(this).execute(request);
    }

    /**
     * 获取备份策略
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeBackupPolicyResponse describeBackupPolicy(DescribeBackupPolicyRequest request) throws JdcloudSdkException {
        return new DescribeBackupPolicyExecutor().client(this).execute(request);
    }

    /**
     * 获取规格
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeFlavorsResponse describeFlavors(DescribeFlavorsRequest request) throws JdcloudSdkException {
        return new DescribeFlavorsExecutor().client(this).execute(request);
    }

    /**
     * 获取备份下载链接
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public BackupDownloadURLResponse backupDownloadURL(BackupDownloadURLRequest request) throws JdcloudSdkException {
        return new BackupDownloadURLExecutor().client(this).execute(request);
    }

    /**
     * 查询实例信息
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeInstancesResponse describeInstances(DescribeInstancesRequest request) throws JdcloudSdkException {
        return new DescribeInstancesExecutor().client(this).execute(request);
    }

    /**
     * 查看备份
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeBackupsResponse describeBackups(DescribeBackupsRequest request) throws JdcloudSdkException {
        return new DescribeBackupsExecutor().client(this).execute(request);
    }

    /**
     * 变更实例规格
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ModifyInstanceSpecResponse modifyInstanceSpec(ModifyInstanceSpecRequest request) throws JdcloudSdkException {
        return new ModifyInstanceSpecExecutor().client(this).execute(request);
    }

    /**
     * 创建备份
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreateBackupResponse createBackup(CreateBackupRequest request) throws JdcloudSdkException {
        return new CreateBackupExecutor().client(this).execute(request);
    }

    /**
     * 修改备份策略
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ModifyBackupPolicyResponse modifyBackupPolicy(ModifyBackupPolicyRequest request) throws JdcloudSdkException {
        return new ModifyBackupPolicyExecutor().client(this).execute(request);
    }

    /**
     * 创建实例
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreateInstanceResponse createInstance(CreateInstanceRequest request) throws JdcloudSdkException {
        return new CreateInstanceExecutor().client(this).execute(request);
    }

    /**
     * 删除备份
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteBackupResponse deleteBackup(DeleteBackupRequest request) throws JdcloudSdkException {
        return new DeleteBackupExecutor().client(this).execute(request);
    }

    /**
     * 获取可用区
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeAvailableZonesResponse describeAvailableZones(DescribeAvailableZonesRequest request) throws JdcloudSdkException {
        return new DescribeAvailableZonesExecutor().client(this).execute(request);
    }


    public interface Builder {
        public Builder credentialsProvider(CredentialsProvider provider);
        public Builder environment(Environment environment);
        public Builder httpRequestConfig(HttpRequestConfig config);
        public MongodbClient build() throws JdcloudSdkException;
    }

    private static class DefaultBuilder implements Builder {

        private MongodbClient mongodbClient;

        public DefaultBuilder() {
            mongodbClient = new MongodbClient();
        }

        public DefaultBuilder credentialsProvider(CredentialsProvider provider) {
            mongodbClient.credentialsProvider = provider;
            return this;
        }

        public DefaultBuilder httpRequestConfig(HttpRequestConfig config) {
            mongodbClient.httpRequestConfig = config;
            return this;
        }

        public MongodbClient build() throws JdcloudSdkException {

            if (mongodbClient.credentialsProvider == null) {
                //if credentialsProvider not set, try load jdcloud global default  credentials provider
                mongodbClient.credentialsProvider = Jdcloud.defaultInstance().getCredentialsProvider();
                if (mongodbClient.credentialsProvider == null) {
                    throw new JdcloudValidateException("MongodbClient build error: jdcloud credentials provider not set");
                }
            }
            if (mongodbClient.httpRequestConfig == null) {
                mongodbClient.httpRequestConfig = Jdcloud.defaultInstance().getHttpRequestConfig();
                if (mongodbClient.httpRequestConfig == null) {
                    throw new JdcloudValidateException("MongodbClient build error: http request config not set");
                }
            }
            return mongodbClient;
        }

        public Builder environment(Environment environment) {
            mongodbClient.environment = environment;
            return this;
        }
    }
}
