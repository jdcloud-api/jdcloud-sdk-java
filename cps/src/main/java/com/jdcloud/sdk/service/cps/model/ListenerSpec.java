/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * 
 *
 * 
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.cps.model;

import java.util.List;
import java.util.ArrayList;
import com.jdcloud.sdk.annotation.Required;

/**
 * listenerSpec
 */
public class ListenerSpec  implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 负载均衡实例ID
     * Required:true
     */
    @Required
    private String loadBalancerId;

    /**
     * 协议, 如TCP
     * Required:true
     */
    @Required
    private String protocol;

    /**
     * 端口1-65535
     * Required:true
     */
    @Required
    private Integer port;

    /**
     * 调度算法，取值wrr（加权轮询）|wlc（加权最小连接数）|conhash（源IP）)
     * Required:true
     */
    @Required
    private String algorithm;

    /**
     * 是否开启会话保持，取值on|off
     * Required:true
     */
    @Required
    private String stickySession;

    /**
     * 是否获取真实ip，取值on|off
     */
    private String realIp;

    /**
     * 名称
     * Required:true
     */
    @Required
    private String name;

    /**
     * 描述
     */
    private String description;

    /**
     * 是否开启健康检查，取值on|off
     * Required:true
     */
    @Required
    private String healthCheck;

    /**
     * 健康检查响应的最大超时时间，单位s
     */
    private Integer healthCheckTimeout;

    /**
     * 健康检查响应的最大间隔时间，单位s
     */
    private Integer healthCheckInterval;

    /**
     * 健康检查结果为success的阈值
     */
    private Integer healthyThreshold;

    /**
     * 健康检查结果为fail的阈值
     */
    private Integer unhealthyThreshold;

    /**
     * 服务器组id
     */
    private String serverGroupId;

    /**
     * 会话保持超时时间，单位s
     */
    private Integer stickySessionTimeout;

    /**
     * 会话类型，植入Cookie or 重写Cookie
     */
    private String cookieType;

    /**
     * 检查路径
     */
    private String healthCheckUri;

    /**
     * 正常态码，要使用的Http状态码
     */
    private String healthCheckHttpCode;

    /**
     * 证书ID
     */
    private String certificateId;

    /**
     * 获取HTTP头字段：X-Forwarded-For、X-Forwarded-Proto、X- Forwarded-Port、X-Forwarded-LBIP
     */
    private List<String> headers;


    /**
     * get 负载均衡实例ID
     *
     * @return
     */
    public String getLoadBalancerId() {
        return loadBalancerId;
    }

    /**
     * set 负载均衡实例ID
     *
     * @param loadBalancerId
     */
    public void setLoadBalancerId(String loadBalancerId) {
        this.loadBalancerId = loadBalancerId;
    }

    /**
     * get 协议, 如TCP
     *
     * @return
     */
    public String getProtocol() {
        return protocol;
    }

    /**
     * set 协议, 如TCP
     *
     * @param protocol
     */
    public void setProtocol(String protocol) {
        this.protocol = protocol;
    }

    /**
     * get 端口1-65535
     *
     * @return
     */
    public Integer getPort() {
        return port;
    }

    /**
     * set 端口1-65535
     *
     * @param port
     */
    public void setPort(Integer port) {
        this.port = port;
    }

    /**
     * get 调度算法，取值wrr（加权轮询）|wlc（加权最小连接数）|conhash（源IP）)
     *
     * @return
     */
    public String getAlgorithm() {
        return algorithm;
    }

    /**
     * set 调度算法，取值wrr（加权轮询）|wlc（加权最小连接数）|conhash（源IP）)
     *
     * @param algorithm
     */
    public void setAlgorithm(String algorithm) {
        this.algorithm = algorithm;
    }

    /**
     * get 是否开启会话保持，取值on|off
     *
     * @return
     */
    public String getStickySession() {
        return stickySession;
    }

    /**
     * set 是否开启会话保持，取值on|off
     *
     * @param stickySession
     */
    public void setStickySession(String stickySession) {
        this.stickySession = stickySession;
    }

    /**
     * get 是否获取真实ip，取值on|off
     *
     * @return
     */
    public String getRealIp() {
        return realIp;
    }

    /**
     * set 是否获取真实ip，取值on|off
     *
     * @param realIp
     */
    public void setRealIp(String realIp) {
        this.realIp = realIp;
    }

    /**
     * get 名称
     *
     * @return
     */
    public String getName() {
        return name;
    }

    /**
     * set 名称
     *
     * @param name
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * get 描述
     *
     * @return
     */
    public String getDescription() {
        return description;
    }

    /**
     * set 描述
     *
     * @param description
     */
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * get 是否开启健康检查，取值on|off
     *
     * @return
     */
    public String getHealthCheck() {
        return healthCheck;
    }

    /**
     * set 是否开启健康检查，取值on|off
     *
     * @param healthCheck
     */
    public void setHealthCheck(String healthCheck) {
        this.healthCheck = healthCheck;
    }

    /**
     * get 健康检查响应的最大超时时间，单位s
     *
     * @return
     */
    public Integer getHealthCheckTimeout() {
        return healthCheckTimeout;
    }

    /**
     * set 健康检查响应的最大超时时间，单位s
     *
     * @param healthCheckTimeout
     */
    public void setHealthCheckTimeout(Integer healthCheckTimeout) {
        this.healthCheckTimeout = healthCheckTimeout;
    }

    /**
     * get 健康检查响应的最大间隔时间，单位s
     *
     * @return
     */
    public Integer getHealthCheckInterval() {
        return healthCheckInterval;
    }

    /**
     * set 健康检查响应的最大间隔时间，单位s
     *
     * @param healthCheckInterval
     */
    public void setHealthCheckInterval(Integer healthCheckInterval) {
        this.healthCheckInterval = healthCheckInterval;
    }

    /**
     * get 健康检查结果为success的阈值
     *
     * @return
     */
    public Integer getHealthyThreshold() {
        return healthyThreshold;
    }

    /**
     * set 健康检查结果为success的阈值
     *
     * @param healthyThreshold
     */
    public void setHealthyThreshold(Integer healthyThreshold) {
        this.healthyThreshold = healthyThreshold;
    }

    /**
     * get 健康检查结果为fail的阈值
     *
     * @return
     */
    public Integer getUnhealthyThreshold() {
        return unhealthyThreshold;
    }

    /**
     * set 健康检查结果为fail的阈值
     *
     * @param unhealthyThreshold
     */
    public void setUnhealthyThreshold(Integer unhealthyThreshold) {
        this.unhealthyThreshold = unhealthyThreshold;
    }

    /**
     * get 服务器组id
     *
     * @return
     */
    public String getServerGroupId() {
        return serverGroupId;
    }

    /**
     * set 服务器组id
     *
     * @param serverGroupId
     */
    public void setServerGroupId(String serverGroupId) {
        this.serverGroupId = serverGroupId;
    }

    /**
     * get 会话保持超时时间，单位s
     *
     * @return
     */
    public Integer getStickySessionTimeout() {
        return stickySessionTimeout;
    }

    /**
     * set 会话保持超时时间，单位s
     *
     * @param stickySessionTimeout
     */
    public void setStickySessionTimeout(Integer stickySessionTimeout) {
        this.stickySessionTimeout = stickySessionTimeout;
    }

    /**
     * get 会话类型，植入Cookie or 重写Cookie
     *
     * @return
     */
    public String getCookieType() {
        return cookieType;
    }

    /**
     * set 会话类型，植入Cookie or 重写Cookie
     *
     * @param cookieType
     */
    public void setCookieType(String cookieType) {
        this.cookieType = cookieType;
    }

    /**
     * get 检查路径
     *
     * @return
     */
    public String getHealthCheckUri() {
        return healthCheckUri;
    }

    /**
     * set 检查路径
     *
     * @param healthCheckUri
     */
    public void setHealthCheckUri(String healthCheckUri) {
        this.healthCheckUri = healthCheckUri;
    }

    /**
     * get 正常态码，要使用的Http状态码
     *
     * @return
     */
    public String getHealthCheckHttpCode() {
        return healthCheckHttpCode;
    }

    /**
     * set 正常态码，要使用的Http状态码
     *
     * @param healthCheckHttpCode
     */
    public void setHealthCheckHttpCode(String healthCheckHttpCode) {
        this.healthCheckHttpCode = healthCheckHttpCode;
    }

    /**
     * get 证书ID
     *
     * @return
     */
    public String getCertificateId() {
        return certificateId;
    }

    /**
     * set 证书ID
     *
     * @param certificateId
     */
    public void setCertificateId(String certificateId) {
        this.certificateId = certificateId;
    }

    /**
     * get 获取HTTP头字段：X-Forwarded-For、X-Forwarded-Proto、X- Forwarded-Port、X-Forwarded-LBIP
     *
     * @return
     */
    public List<String> getHeaders() {
        return headers;
    }

    /**
     * set 获取HTTP头字段：X-Forwarded-For、X-Forwarded-Proto、X- Forwarded-Port、X-Forwarded-LBIP
     *
     * @param headers
     */
    public void setHeaders(List<String> headers) {
        this.headers = headers;
    }


    /**
     * set 负载均衡实例ID
     *
     * @param loadBalancerId
     */
    public ListenerSpec loadBalancerId(String loadBalancerId) {
        this.loadBalancerId = loadBalancerId;
        return this;
    }

    /**
     * set 协议, 如TCP
     *
     * @param protocol
     */
    public ListenerSpec protocol(String protocol) {
        this.protocol = protocol;
        return this;
    }

    /**
     * set 端口1-65535
     *
     * @param port
     */
    public ListenerSpec port(Integer port) {
        this.port = port;
        return this;
    }

    /**
     * set 调度算法，取值wrr（加权轮询）|wlc（加权最小连接数）|conhash（源IP）)
     *
     * @param algorithm
     */
    public ListenerSpec algorithm(String algorithm) {
        this.algorithm = algorithm;
        return this;
    }

    /**
     * set 是否开启会话保持，取值on|off
     *
     * @param stickySession
     */
    public ListenerSpec stickySession(String stickySession) {
        this.stickySession = stickySession;
        return this;
    }

    /**
     * set 是否获取真实ip，取值on|off
     *
     * @param realIp
     */
    public ListenerSpec realIp(String realIp) {
        this.realIp = realIp;
        return this;
    }

    /**
     * set 名称
     *
     * @param name
     */
    public ListenerSpec name(String name) {
        this.name = name;
        return this;
    }

    /**
     * set 描述
     *
     * @param description
     */
    public ListenerSpec description(String description) {
        this.description = description;
        return this;
    }

    /**
     * set 是否开启健康检查，取值on|off
     *
     * @param healthCheck
     */
    public ListenerSpec healthCheck(String healthCheck) {
        this.healthCheck = healthCheck;
        return this;
    }

    /**
     * set 健康检查响应的最大超时时间，单位s
     *
     * @param healthCheckTimeout
     */
    public ListenerSpec healthCheckTimeout(Integer healthCheckTimeout) {
        this.healthCheckTimeout = healthCheckTimeout;
        return this;
    }

    /**
     * set 健康检查响应的最大间隔时间，单位s
     *
     * @param healthCheckInterval
     */
    public ListenerSpec healthCheckInterval(Integer healthCheckInterval) {
        this.healthCheckInterval = healthCheckInterval;
        return this;
    }

    /**
     * set 健康检查结果为success的阈值
     *
     * @param healthyThreshold
     */
    public ListenerSpec healthyThreshold(Integer healthyThreshold) {
        this.healthyThreshold = healthyThreshold;
        return this;
    }

    /**
     * set 健康检查结果为fail的阈值
     *
     * @param unhealthyThreshold
     */
    public ListenerSpec unhealthyThreshold(Integer unhealthyThreshold) {
        this.unhealthyThreshold = unhealthyThreshold;
        return this;
    }

    /**
     * set 服务器组id
     *
     * @param serverGroupId
     */
    public ListenerSpec serverGroupId(String serverGroupId) {
        this.serverGroupId = serverGroupId;
        return this;
    }

    /**
     * set 会话保持超时时间，单位s
     *
     * @param stickySessionTimeout
     */
    public ListenerSpec stickySessionTimeout(Integer stickySessionTimeout) {
        this.stickySessionTimeout = stickySessionTimeout;
        return this;
    }

    /**
     * set 会话类型，植入Cookie or 重写Cookie
     *
     * @param cookieType
     */
    public ListenerSpec cookieType(String cookieType) {
        this.cookieType = cookieType;
        return this;
    }

    /**
     * set 检查路径
     *
     * @param healthCheckUri
     */
    public ListenerSpec healthCheckUri(String healthCheckUri) {
        this.healthCheckUri = healthCheckUri;
        return this;
    }

    /**
     * set 正常态码，要使用的Http状态码
     *
     * @param healthCheckHttpCode
     */
    public ListenerSpec healthCheckHttpCode(String healthCheckHttpCode) {
        this.healthCheckHttpCode = healthCheckHttpCode;
        return this;
    }

    /**
     * set 证书ID
     *
     * @param certificateId
     */
    public ListenerSpec certificateId(String certificateId) {
        this.certificateId = certificateId;
        return this;
    }

    /**
     * set 获取HTTP头字段：X-Forwarded-For、X-Forwarded-Proto、X- Forwarded-Port、X-Forwarded-LBIP
     *
     * @param headers
     */
    public ListenerSpec headers(List<String> headers) {
        this.headers = headers;
        return this;
    }


    /**
     * add item to 获取HTTP头字段：X-Forwarded-For、X-Forwarded-Proto、X- Forwarded-Port、X-Forwarded-LBIP
     *
     * @param header
     */
    public void addHeader(String header) {
        if (this.headers == null) {
            this.headers = new ArrayList<>();
        }
        this.headers.add(header);
    }

}