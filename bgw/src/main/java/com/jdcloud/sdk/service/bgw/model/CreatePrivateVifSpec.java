/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * 
 *
 * 
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.bgw.model;

import java.util.List;
import java.util.ArrayList;
import com.jdcloud.sdk.annotation.Required;

/**
 * createPrivateVifSpec
 */
public class CreatePrivateVifSpec  implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * PrivateVif的名称参考
     * Required:true
     */
    @Required
    private String privateVifName;

    /**
     * 物理连接的Id
     * Required:true
     */
    @Required
    private String connectionId;

    /**
     * 通道的owner:用户pin
     */
    private String privateVifOwner;

    /**
     * 边界网关的Id
     * Required:true
     */
    @Required
    private String bgwId;

    /**
     * 通道的业务vlan,取值范围 [1,4000]
     * Required:true
     */
    @Required
    private Integer vlan;

    /**
     * 通道涉及BgpPeer信息(即将弃用)
     */
    
    private List<BgpPeerSpec> bgpPeers;
    /**
     * PrivateVif的描述
     */
    private String description;

    /**
     * 是否开启bgp，仅支持开启
     */
    private Boolean enableBgp;

    /**
     * 通道Peer的ip信息
     */
    
    private List<PeerIpsSpec> peerIps;
    /**
     * 通道Bgp相关信息详情
     */
    private BgpSpec bgpSpec;

    /**
     * 通道健康检查相关信息详情
     */
    private HealthCheckSpec healthCheck;



    /**
     * get PrivateVif的名称参考
     *
     * @return
     */
    public String getPrivateVifName() {
        return privateVifName;
    }

    /**
     * set PrivateVif的名称参考
     *
     * @param privateVifName
     */
    public void setPrivateVifName(String privateVifName) {
        this.privateVifName = privateVifName;
    }


    /**
     * get 物理连接的Id
     *
     * @return
     */
    public String getConnectionId() {
        return connectionId;
    }

    /**
     * set 物理连接的Id
     *
     * @param connectionId
     */
    public void setConnectionId(String connectionId) {
        this.connectionId = connectionId;
    }


    /**
     * get 通道的owner:用户pin
     *
     * @return
     */
    public String getPrivateVifOwner() {
        return privateVifOwner;
    }

    /**
     * set 通道的owner:用户pin
     *
     * @param privateVifOwner
     */
    public void setPrivateVifOwner(String privateVifOwner) {
        this.privateVifOwner = privateVifOwner;
    }


    /**
     * get 边界网关的Id
     *
     * @return
     */
    public String getBgwId() {
        return bgwId;
    }

    /**
     * set 边界网关的Id
     *
     * @param bgwId
     */
    public void setBgwId(String bgwId) {
        this.bgwId = bgwId;
    }


    /**
     * get 通道的业务vlan,取值范围 [1,4000]
     *
     * @return
     */
    public Integer getVlan() {
        return vlan;
    }

    /**
     * set 通道的业务vlan,取值范围 [1,4000]
     *
     * @param vlan
     */
    public void setVlan(Integer vlan) {
        this.vlan = vlan;
    }


    /**
    * get 通道涉及BgpPeer信息(即将弃用)
    *
    * @return
    */
    public List<BgpPeerSpec> getBgpPeers() {
        return bgpPeers;
    }

    /**
    * set 通道涉及BgpPeer信息(即将弃用)
    *
    * @param bgpPeers
    */
    public void setBgpPeers(List<BgpPeerSpec> bgpPeers) {
        this.bgpPeers = bgpPeers;
    }


    /**
     * get PrivateVif的描述
     *
     * @return
     */
    public String getDescription() {
        return description;
    }

    /**
     * set PrivateVif的描述
     *
     * @param description
     */
    public void setDescription(String description) {
        this.description = description;
    }


    /**
     * get 是否开启bgp，仅支持开启
     *
     * @return
     */
    public Boolean getEnableBgp() {
        return enableBgp;
    }

    /**
     * set 是否开启bgp，仅支持开启
     *
     * @param enableBgp
     */
    public void setEnableBgp(Boolean enableBgp) {
        this.enableBgp = enableBgp;
    }


    /**
    * get 通道Peer的ip信息
    *
    * @return
    */
    public List<PeerIpsSpec> getPeerIps() {
        return peerIps;
    }

    /**
    * set 通道Peer的ip信息
    *
    * @param peerIps
    */
    public void setPeerIps(List<PeerIpsSpec> peerIps) {
        this.peerIps = peerIps;
    }


    /**
     * get 通道Bgp相关信息详情
     *
     * @return
     */
    public BgpSpec getBgpSpec() {
        return bgpSpec;
    }

    /**
     * set 通道Bgp相关信息详情
     *
     * @param bgpSpec
     */
    public void setBgpSpec(BgpSpec bgpSpec) {
        this.bgpSpec = bgpSpec;
    }


    /**
     * get 通道健康检查相关信息详情
     *
     * @return
     */
    public HealthCheckSpec getHealthCheck() {
        return healthCheck;
    }

    /**
     * set 通道健康检查相关信息详情
     *
     * @param healthCheck
     */
    public void setHealthCheck(HealthCheckSpec healthCheck) {
        this.healthCheck = healthCheck;
    }



    /**
     * set PrivateVif的名称参考
     *
     * @param privateVifName
     */
    public CreatePrivateVifSpec privateVifName(String privateVifName) {
        this.privateVifName = privateVifName;
        return this;
    }


    /**
     * set 物理连接的Id
     *
     * @param connectionId
     */
    public CreatePrivateVifSpec connectionId(String connectionId) {
        this.connectionId = connectionId;
        return this;
    }


    /**
     * set 通道的owner:用户pin
     *
     * @param privateVifOwner
     */
    public CreatePrivateVifSpec privateVifOwner(String privateVifOwner) {
        this.privateVifOwner = privateVifOwner;
        return this;
    }


    /**
     * set 边界网关的Id
     *
     * @param bgwId
     */
    public CreatePrivateVifSpec bgwId(String bgwId) {
        this.bgwId = bgwId;
        return this;
    }


    /**
     * set 通道的业务vlan,取值范围 [1,4000]
     *
     * @param vlan
     */
    public CreatePrivateVifSpec vlan(Integer vlan) {
        this.vlan = vlan;
        return this;
    }


    /**
    * set 通道涉及BgpPeer信息(即将弃用)
    *
    * @param bgpPeers
    */
    public CreatePrivateVifSpec bgpPeers(List<BgpPeerSpec> bgpPeers) {
        this.bgpPeers = bgpPeers;
        return this;
    }


    /**
     * set PrivateVif的描述
     *
     * @param description
     */
    public CreatePrivateVifSpec description(String description) {
        this.description = description;
        return this;
    }


    /**
     * set 是否开启bgp，仅支持开启
     *
     * @param enableBgp
     */
    public CreatePrivateVifSpec enableBgp(Boolean enableBgp) {
        this.enableBgp = enableBgp;
        return this;
    }


    /**
    * set 通道Peer的ip信息
    *
    * @param peerIps
    */
    public CreatePrivateVifSpec peerIps(List<PeerIpsSpec> peerIps) {
        this.peerIps = peerIps;
        return this;
    }


    /**
     * set 通道Bgp相关信息详情
     *
     * @param bgpSpec
     */
    public CreatePrivateVifSpec bgpSpec(BgpSpec bgpSpec) {
        this.bgpSpec = bgpSpec;
        return this;
    }


    /**
     * set 通道健康检查相关信息详情
     *
     * @param healthCheck
     */
    public CreatePrivateVifSpec healthCheck(HealthCheckSpec healthCheck) {
        this.healthCheck = healthCheck;
        return this;
    }



    /**
     * add item to 通道涉及BgpPeer信息(即将弃用)
     *
     * @param bgpPeer
     */
    public void addBgpPeer(BgpPeerSpec bgpPeer) {
        if (this.bgpPeers == null) {
            this.bgpPeers = new ArrayList<>();
        }
        this.bgpPeers.add(bgpPeer);
    }

    /**
     * add item to 通道Peer的ip信息
     *
     * @param peerIp
     */
    public void addPeerIp(PeerIpsSpec peerIp) {
        if (this.peerIps == null) {
            this.peerIps = new ArrayList<>();
        }
        this.peerIps.add(peerIp);
    }
}