/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * 
 *
 * 
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.bgw.model;

import com.jdcloud.sdk.annotation.Required;
import com.jdcloud.sdk.service.charge.model.ChargeSpec;

/**
 * vpnTunnelSpec
 */
public class VpnTunnelSpec  implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * VPN CONNECTION ID
     * Required:true
     */
    @Required
    private String vpnConnectionId;

    /**
     * VPN隧道本地公网IP
     * Required:true
     */
    @Required
    private String cloudPublicIp;

    /**
     * VPN隧道客户侧公网IP
     * Required:true
     */
    @Required
    private String customerIp;

    /**
     * 预共享秘钥字符串, 只允许输入数字、大小写字母、英文下划线“_”及中划线“-”，不允许为空且不超过20字符, 不能以0x或0s开头
     * Required:true
     */
    @Required
    private String psk;

    /**
     * VPN隧道内网的掩码长度必须为30的CIDR格式IPv4地址段，必须在169.254.0.0/20, 10.0.0.0/8, 192.168.0.0/16, 172.16.0.0/12这四个网段内，且不能和同一边界网关上的其它VPN隧道内层地址冲突
     */
    private String tunnelIp;

    /**
     * VPN隧道内网的本端ip，必须是/30的段，而且不能是段里的第一个和最后一个ip
     */
    private String localTunnelIp;

    /**
     * IKE版本, 取值范围为：v1、v2, 默认为：v2
     */
    private String ikeVersion;

    /**
     * IKE模式, IKEv2时忽略, 取值范围为：main、aggressive，默认为：main
     */
    private String ikeMode;

    /**
     * DH秘钥协商算法组选项. 取值范围为：modp1024、modp1536、modp2048、ecp256、ecp384，默认为：ecp256
     */
    private String ikeKeyExchange;

    /**
     * 加密算法. 取值范围为：aes128、aes192、aes256、3des，默认为：aes128
     */
    private String ikeCipher;

    /**
     * 认证算法. 取值范围为：sha1、sha256、sha384，默认为：sha256
     */
    private String ikeAuth;

    /**
     * DPD开关, 取值范围为：0、10，10代表10秒，默认为：10
     */
    private Integer ikeDpdSec;

    /**
     * IKE SA重协商时间，单位秒，取值范围为[60,86400]的整数，默认为：14400(4小时)
     */
    private Integer ikeSaLifeSec;

    /**
     * 加密算法. 取值范围为：aes128、aes192、aes256，默认为：aes128
     */
    private String ipsecCipher;

    /**
     * 认证算法. 取值范围为：sha1、sha256、sha384，默认为：sha256
     */
    private String ipsecAuth;

    /**
     * DH组选项. 取值范围为：null、modp1024、modp1536、modp2048、ecp256、ecp384，默认为：null
     */
    private String ipsecKeyExchange;

    /**
     * Child SA重协商时间. 单位秒, 取值范围为[60,86400]的整数，默认为：3600(1小时)
     */
    private Integer ipsecSaLifeSec;

    /**
     * Child SA重协商报数，单位个, 0代表不开启，取值范围为[0,100000000]的整数，默认为：0
     */
    private Long ipsecSaLifepkt;

    /**
     * Child SA重协商字节数. 单位字节, 0代表不开启，取值范围为[0,107374182400]的整数，默认为：0
     */
    private Long ipsecSaLifebyte;

    /**
     * 计费配置，仅支持按配置，默认按配置
     */
    private ChargeSpec chargeSpec;

    /**
     * VPN隧道公网限速带宽（单位：Mbps），取值范围为[1-1500]
     */
    private Integer bandwidthMbps;



    /**
     * get VPN CONNECTION ID
     *
     * @return
     */
    public String getVpnConnectionId() {
        return vpnConnectionId;
    }

    /**
     * set VPN CONNECTION ID
     *
     * @param vpnConnectionId
     */
    public void setVpnConnectionId(String vpnConnectionId) {
        this.vpnConnectionId = vpnConnectionId;
    }


    /**
     * get VPN隧道本地公网IP
     *
     * @return
     */
    public String getCloudPublicIp() {
        return cloudPublicIp;
    }

    /**
     * set VPN隧道本地公网IP
     *
     * @param cloudPublicIp
     */
    public void setCloudPublicIp(String cloudPublicIp) {
        this.cloudPublicIp = cloudPublicIp;
    }


    /**
     * get VPN隧道客户侧公网IP
     *
     * @return
     */
    public String getCustomerIp() {
        return customerIp;
    }

    /**
     * set VPN隧道客户侧公网IP
     *
     * @param customerIp
     */
    public void setCustomerIp(String customerIp) {
        this.customerIp = customerIp;
    }


    /**
     * get 预共享秘钥字符串, 只允许输入数字、大小写字母、英文下划线“_”及中划线“-”，不允许为空且不超过20字符, 不能以0x或0s开头
     *
     * @return
     */
    public String getPsk() {
        return psk;
    }

    /**
     * set 预共享秘钥字符串, 只允许输入数字、大小写字母、英文下划线“_”及中划线“-”，不允许为空且不超过20字符, 不能以0x或0s开头
     *
     * @param psk
     */
    public void setPsk(String psk) {
        this.psk = psk;
    }


    /**
     * get VPN隧道内网的掩码长度必须为30的CIDR格式IPv4地址段，必须在169.254.0.0/20, 10.0.0.0/8, 192.168.0.0/16, 172.16.0.0/12这四个网段内，且不能和同一边界网关上的其它VPN隧道内层地址冲突
     *
     * @return
     */
    public String getTunnelIp() {
        return tunnelIp;
    }

    /**
     * set VPN隧道内网的掩码长度必须为30的CIDR格式IPv4地址段，必须在169.254.0.0/20, 10.0.0.0/8, 192.168.0.0/16, 172.16.0.0/12这四个网段内，且不能和同一边界网关上的其它VPN隧道内层地址冲突
     *
     * @param tunnelIp
     */
    public void setTunnelIp(String tunnelIp) {
        this.tunnelIp = tunnelIp;
    }


    /**
     * get VPN隧道内网的本端ip，必须是/30的段，而且不能是段里的第一个和最后一个ip
     *
     * @return
     */
    public String getLocalTunnelIp() {
        return localTunnelIp;
    }

    /**
     * set VPN隧道内网的本端ip，必须是/30的段，而且不能是段里的第一个和最后一个ip
     *
     * @param localTunnelIp
     */
    public void setLocalTunnelIp(String localTunnelIp) {
        this.localTunnelIp = localTunnelIp;
    }


    /**
     * get IKE版本, 取值范围为：v1、v2, 默认为：v2
     *
     * @return
     */
    public String getIkeVersion() {
        return ikeVersion;
    }

    /**
     * set IKE版本, 取值范围为：v1、v2, 默认为：v2
     *
     * @param ikeVersion
     */
    public void setIkeVersion(String ikeVersion) {
        this.ikeVersion = ikeVersion;
    }


    /**
     * get IKE模式, IKEv2时忽略, 取值范围为：main、aggressive，默认为：main
     *
     * @return
     */
    public String getIkeMode() {
        return ikeMode;
    }

    /**
     * set IKE模式, IKEv2时忽略, 取值范围为：main、aggressive，默认为：main
     *
     * @param ikeMode
     */
    public void setIkeMode(String ikeMode) {
        this.ikeMode = ikeMode;
    }


    /**
     * get DH秘钥协商算法组选项. 取值范围为：modp1024、modp1536、modp2048、ecp256、ecp384，默认为：ecp256
     *
     * @return
     */
    public String getIkeKeyExchange() {
        return ikeKeyExchange;
    }

    /**
     * set DH秘钥协商算法组选项. 取值范围为：modp1024、modp1536、modp2048、ecp256、ecp384，默认为：ecp256
     *
     * @param ikeKeyExchange
     */
    public void setIkeKeyExchange(String ikeKeyExchange) {
        this.ikeKeyExchange = ikeKeyExchange;
    }


    /**
     * get 加密算法. 取值范围为：aes128、aes192、aes256、3des，默认为：aes128
     *
     * @return
     */
    public String getIkeCipher() {
        return ikeCipher;
    }

    /**
     * set 加密算法. 取值范围为：aes128、aes192、aes256、3des，默认为：aes128
     *
     * @param ikeCipher
     */
    public void setIkeCipher(String ikeCipher) {
        this.ikeCipher = ikeCipher;
    }


    /**
     * get 认证算法. 取值范围为：sha1、sha256、sha384，默认为：sha256
     *
     * @return
     */
    public String getIkeAuth() {
        return ikeAuth;
    }

    /**
     * set 认证算法. 取值范围为：sha1、sha256、sha384，默认为：sha256
     *
     * @param ikeAuth
     */
    public void setIkeAuth(String ikeAuth) {
        this.ikeAuth = ikeAuth;
    }


    /**
     * get DPD开关, 取值范围为：0、10，10代表10秒，默认为：10
     *
     * @return
     */
    public Integer getIkeDpdSec() {
        return ikeDpdSec;
    }

    /**
     * set DPD开关, 取值范围为：0、10，10代表10秒，默认为：10
     *
     * @param ikeDpdSec
     */
    public void setIkeDpdSec(Integer ikeDpdSec) {
        this.ikeDpdSec = ikeDpdSec;
    }


    /**
     * get IKE SA重协商时间，单位秒，取值范围为[60,86400]的整数，默认为：14400(4小时)
     *
     * @return
     */
    public Integer getIkeSaLifeSec() {
        return ikeSaLifeSec;
    }

    /**
     * set IKE SA重协商时间，单位秒，取值范围为[60,86400]的整数，默认为：14400(4小时)
     *
     * @param ikeSaLifeSec
     */
    public void setIkeSaLifeSec(Integer ikeSaLifeSec) {
        this.ikeSaLifeSec = ikeSaLifeSec;
    }


    /**
     * get 加密算法. 取值范围为：aes128、aes192、aes256，默认为：aes128
     *
     * @return
     */
    public String getIpsecCipher() {
        return ipsecCipher;
    }

    /**
     * set 加密算法. 取值范围为：aes128、aes192、aes256，默认为：aes128
     *
     * @param ipsecCipher
     */
    public void setIpsecCipher(String ipsecCipher) {
        this.ipsecCipher = ipsecCipher;
    }


    /**
     * get 认证算法. 取值范围为：sha1、sha256、sha384，默认为：sha256
     *
     * @return
     */
    public String getIpsecAuth() {
        return ipsecAuth;
    }

    /**
     * set 认证算法. 取值范围为：sha1、sha256、sha384，默认为：sha256
     *
     * @param ipsecAuth
     */
    public void setIpsecAuth(String ipsecAuth) {
        this.ipsecAuth = ipsecAuth;
    }


    /**
     * get DH组选项. 取值范围为：null、modp1024、modp1536、modp2048、ecp256、ecp384，默认为：null
     *
     * @return
     */
    public String getIpsecKeyExchange() {
        return ipsecKeyExchange;
    }

    /**
     * set DH组选项. 取值范围为：null、modp1024、modp1536、modp2048、ecp256、ecp384，默认为：null
     *
     * @param ipsecKeyExchange
     */
    public void setIpsecKeyExchange(String ipsecKeyExchange) {
        this.ipsecKeyExchange = ipsecKeyExchange;
    }


    /**
     * get Child SA重协商时间. 单位秒, 取值范围为[60,86400]的整数，默认为：3600(1小时)
     *
     * @return
     */
    public Integer getIpsecSaLifeSec() {
        return ipsecSaLifeSec;
    }

    /**
     * set Child SA重协商时间. 单位秒, 取值范围为[60,86400]的整数，默认为：3600(1小时)
     *
     * @param ipsecSaLifeSec
     */
    public void setIpsecSaLifeSec(Integer ipsecSaLifeSec) {
        this.ipsecSaLifeSec = ipsecSaLifeSec;
    }


    /**
     * get Child SA重协商报数，单位个, 0代表不开启，取值范围为[0,100000000]的整数，默认为：0
     *
     * @return
     */
    public Long getIpsecSaLifepkt() {
        return ipsecSaLifepkt;
    }

    /**
     * set Child SA重协商报数，单位个, 0代表不开启，取值范围为[0,100000000]的整数，默认为：0
     *
     * @param ipsecSaLifepkt
     */
    public void setIpsecSaLifepkt(Long ipsecSaLifepkt) {
        this.ipsecSaLifepkt = ipsecSaLifepkt;
    }


    /**
     * get Child SA重协商字节数. 单位字节, 0代表不开启，取值范围为[0,107374182400]的整数，默认为：0
     *
     * @return
     */
    public Long getIpsecSaLifebyte() {
        return ipsecSaLifebyte;
    }

    /**
     * set Child SA重协商字节数. 单位字节, 0代表不开启，取值范围为[0,107374182400]的整数，默认为：0
     *
     * @param ipsecSaLifebyte
     */
    public void setIpsecSaLifebyte(Long ipsecSaLifebyte) {
        this.ipsecSaLifebyte = ipsecSaLifebyte;
    }


    /**
     * get 计费配置，仅支持按配置，默认按配置
     *
     * @return
     */
    public ChargeSpec getChargeSpec() {
        return chargeSpec;
    }

    /**
     * set 计费配置，仅支持按配置，默认按配置
     *
     * @param chargeSpec
     */
    public void setChargeSpec(ChargeSpec chargeSpec) {
        this.chargeSpec = chargeSpec;
    }


    /**
     * get VPN隧道公网限速带宽（单位：Mbps），取值范围为[1-1500]
     *
     * @return
     */
    public Integer getBandwidthMbps() {
        return bandwidthMbps;
    }

    /**
     * set VPN隧道公网限速带宽（单位：Mbps），取值范围为[1-1500]
     *
     * @param bandwidthMbps
     */
    public void setBandwidthMbps(Integer bandwidthMbps) {
        this.bandwidthMbps = bandwidthMbps;
    }



    /**
     * set VPN CONNECTION ID
     *
     * @param vpnConnectionId
     */
    public VpnTunnelSpec vpnConnectionId(String vpnConnectionId) {
        this.vpnConnectionId = vpnConnectionId;
        return this;
    }


    /**
     * set VPN隧道本地公网IP
     *
     * @param cloudPublicIp
     */
    public VpnTunnelSpec cloudPublicIp(String cloudPublicIp) {
        this.cloudPublicIp = cloudPublicIp;
        return this;
    }


    /**
     * set VPN隧道客户侧公网IP
     *
     * @param customerIp
     */
    public VpnTunnelSpec customerIp(String customerIp) {
        this.customerIp = customerIp;
        return this;
    }


    /**
     * set 预共享秘钥字符串, 只允许输入数字、大小写字母、英文下划线“_”及中划线“-”，不允许为空且不超过20字符, 不能以0x或0s开头
     *
     * @param psk
     */
    public VpnTunnelSpec psk(String psk) {
        this.psk = psk;
        return this;
    }


    /**
     * set VPN隧道内网的掩码长度必须为30的CIDR格式IPv4地址段，必须在169.254.0.0/20, 10.0.0.0/8, 192.168.0.0/16, 172.16.0.0/12这四个网段内，且不能和同一边界网关上的其它VPN隧道内层地址冲突
     *
     * @param tunnelIp
     */
    public VpnTunnelSpec tunnelIp(String tunnelIp) {
        this.tunnelIp = tunnelIp;
        return this;
    }


    /**
     * set VPN隧道内网的本端ip，必须是/30的段，而且不能是段里的第一个和最后一个ip
     *
     * @param localTunnelIp
     */
    public VpnTunnelSpec localTunnelIp(String localTunnelIp) {
        this.localTunnelIp = localTunnelIp;
        return this;
    }


    /**
     * set IKE版本, 取值范围为：v1、v2, 默认为：v2
     *
     * @param ikeVersion
     */
    public VpnTunnelSpec ikeVersion(String ikeVersion) {
        this.ikeVersion = ikeVersion;
        return this;
    }


    /**
     * set IKE模式, IKEv2时忽略, 取值范围为：main、aggressive，默认为：main
     *
     * @param ikeMode
     */
    public VpnTunnelSpec ikeMode(String ikeMode) {
        this.ikeMode = ikeMode;
        return this;
    }


    /**
     * set DH秘钥协商算法组选项. 取值范围为：modp1024、modp1536、modp2048、ecp256、ecp384，默认为：ecp256
     *
     * @param ikeKeyExchange
     */
    public VpnTunnelSpec ikeKeyExchange(String ikeKeyExchange) {
        this.ikeKeyExchange = ikeKeyExchange;
        return this;
    }


    /**
     * set 加密算法. 取值范围为：aes128、aes192、aes256、3des，默认为：aes128
     *
     * @param ikeCipher
     */
    public VpnTunnelSpec ikeCipher(String ikeCipher) {
        this.ikeCipher = ikeCipher;
        return this;
    }


    /**
     * set 认证算法. 取值范围为：sha1、sha256、sha384，默认为：sha256
     *
     * @param ikeAuth
     */
    public VpnTunnelSpec ikeAuth(String ikeAuth) {
        this.ikeAuth = ikeAuth;
        return this;
    }


    /**
     * set DPD开关, 取值范围为：0、10，10代表10秒，默认为：10
     *
     * @param ikeDpdSec
     */
    public VpnTunnelSpec ikeDpdSec(Integer ikeDpdSec) {
        this.ikeDpdSec = ikeDpdSec;
        return this;
    }


    /**
     * set IKE SA重协商时间，单位秒，取值范围为[60,86400]的整数，默认为：14400(4小时)
     *
     * @param ikeSaLifeSec
     */
    public VpnTunnelSpec ikeSaLifeSec(Integer ikeSaLifeSec) {
        this.ikeSaLifeSec = ikeSaLifeSec;
        return this;
    }


    /**
     * set 加密算法. 取值范围为：aes128、aes192、aes256，默认为：aes128
     *
     * @param ipsecCipher
     */
    public VpnTunnelSpec ipsecCipher(String ipsecCipher) {
        this.ipsecCipher = ipsecCipher;
        return this;
    }


    /**
     * set 认证算法. 取值范围为：sha1、sha256、sha384，默认为：sha256
     *
     * @param ipsecAuth
     */
    public VpnTunnelSpec ipsecAuth(String ipsecAuth) {
        this.ipsecAuth = ipsecAuth;
        return this;
    }


    /**
     * set DH组选项. 取值范围为：null、modp1024、modp1536、modp2048、ecp256、ecp384，默认为：null
     *
     * @param ipsecKeyExchange
     */
    public VpnTunnelSpec ipsecKeyExchange(String ipsecKeyExchange) {
        this.ipsecKeyExchange = ipsecKeyExchange;
        return this;
    }


    /**
     * set Child SA重协商时间. 单位秒, 取值范围为[60,86400]的整数，默认为：3600(1小时)
     *
     * @param ipsecSaLifeSec
     */
    public VpnTunnelSpec ipsecSaLifeSec(Integer ipsecSaLifeSec) {
        this.ipsecSaLifeSec = ipsecSaLifeSec;
        return this;
    }


    /**
     * set Child SA重协商报数，单位个, 0代表不开启，取值范围为[0,100000000]的整数，默认为：0
     *
     * @param ipsecSaLifepkt
     */
    public VpnTunnelSpec ipsecSaLifepkt(Long ipsecSaLifepkt) {
        this.ipsecSaLifepkt = ipsecSaLifepkt;
        return this;
    }


    /**
     * set Child SA重协商字节数. 单位字节, 0代表不开启，取值范围为[0,107374182400]的整数，默认为：0
     *
     * @param ipsecSaLifebyte
     */
    public VpnTunnelSpec ipsecSaLifebyte(Long ipsecSaLifebyte) {
        this.ipsecSaLifebyte = ipsecSaLifebyte;
        return this;
    }


    /**
     * set 计费配置，仅支持按配置，默认按配置
     *
     * @param chargeSpec
     */
    public VpnTunnelSpec chargeSpec(ChargeSpec chargeSpec) {
        this.chargeSpec = chargeSpec;
        return this;
    }


    /**
     * set VPN隧道公网限速带宽（单位：Mbps），取值范围为[1-1500]
     *
     * @param bandwidthMbps
     */
    public VpnTunnelSpec bandwidthMbps(Integer bandwidthMbps) {
        this.bandwidthMbps = bandwidthMbps;
        return this;
    }


}