/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * 
 *
 * 
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.bgw.model;

import java.util.List;
import java.util.ArrayList;
import com.jdcloud.sdk.annotation.Required;

/**
 * vpnTrafficSelectorSpec
 */
public class VpnTrafficSelectorSpec  implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 本端网段。需要和本地IDC互连的VPC侧的网段，用于第二阶段协商。例如：192.168.1.0/24
     * Required:true
     */
    @Required
    private String localSubnet;

    /**
     * 对端网段地址的数组。本地IDC的网段，用于第二阶段协商。例如：192.168.3.0/24
     */
    
    private List<String> remoteSubnets;
    /**
     * 感兴趣流的描述
     */
    private String description;



    /**
     * get 本端网段。需要和本地IDC互连的VPC侧的网段，用于第二阶段协商。例如：192.168.1.0/24
     *
     * @return
     */
    public String getLocalSubnet() {
        return localSubnet;
    }

    /**
     * set 本端网段。需要和本地IDC互连的VPC侧的网段，用于第二阶段协商。例如：192.168.1.0/24
     *
     * @param localSubnet
     */
    public void setLocalSubnet(String localSubnet) {
        this.localSubnet = localSubnet;
    }


    /**
    * get 对端网段地址的数组。本地IDC的网段，用于第二阶段协商。例如：192.168.3.0/24
    *
    * @return
    */
    public List<String> getRemoteSubnets() {
        return remoteSubnets;
    }

    /**
    * set 对端网段地址的数组。本地IDC的网段，用于第二阶段协商。例如：192.168.3.0/24
    *
    * @param remoteSubnets
    */
    public void setRemoteSubnets(List<String> remoteSubnets) {
        this.remoteSubnets = remoteSubnets;
    }


    /**
     * get 感兴趣流的描述
     *
     * @return
     */
    public String getDescription() {
        return description;
    }

    /**
     * set 感兴趣流的描述
     *
     * @param description
     */
    public void setDescription(String description) {
        this.description = description;
    }



    /**
     * set 本端网段。需要和本地IDC互连的VPC侧的网段，用于第二阶段协商。例如：192.168.1.0/24
     *
     * @param localSubnet
     */
    public VpnTrafficSelectorSpec localSubnet(String localSubnet) {
        this.localSubnet = localSubnet;
        return this;
    }


    /**
    * set 对端网段地址的数组。本地IDC的网段，用于第二阶段协商。例如：192.168.3.0/24
    *
    * @param remoteSubnets
    */
    public VpnTrafficSelectorSpec remoteSubnets(List<String> remoteSubnets) {
        this.remoteSubnets = remoteSubnets;
        return this;
    }


    /**
     * set 感兴趣流的描述
     *
     * @param description
     */
    public VpnTrafficSelectorSpec description(String description) {
        this.description = description;
        return this;
    }



    /**
     * add item to 对端网段地址的数组。本地IDC的网段，用于第二阶段协商。例如：192.168.3.0/24
     *
     * @param remoteSubnet
     */
    public void addRemoteSubnet(String remoteSubnet) {
        if (this.remoteSubnets == null) {
            this.remoteSubnets = new ArrayList<>();
        }
        this.remoteSubnets.add(remoteSubnet);
    }
}