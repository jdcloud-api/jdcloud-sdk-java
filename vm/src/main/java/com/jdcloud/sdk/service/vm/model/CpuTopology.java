/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * 
 *
 * 
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.vm.model;

import java.util.List;
import java.util.ArrayList;

/**
 * cpuTopology
 */
public class CpuTopology  implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 虚机CPU拓扑
     */
    
    private List<Socket> sockets;
    /**
     * numa details
     */
    
    private List<Numa> numas;


    /**
    * get 虚机CPU拓扑
    *
    * @return
    */
    public List<Socket> getSockets() {
        return sockets;
    }

    /**
    * set 虚机CPU拓扑
    *
    * @param sockets
    */
    public void setSockets(List<Socket> sockets) {
        this.sockets = sockets;
    }


    /**
    * get numa details
    *
    * @return
    */
    public List<Numa> getNumas() {
        return numas;
    }

    /**
    * set numa details
    *
    * @param numas
    */
    public void setNumas(List<Numa> numas) {
        this.numas = numas;
    }



    /**
    * set 虚机CPU拓扑
    *
    * @param sockets
    */
    public CpuTopology sockets(List<Socket> sockets) {
        this.sockets = sockets;
        return this;
    }


    /**
    * set numa details
    *
    * @param numas
    */
    public CpuTopology numas(List<Numa> numas) {
        this.numas = numas;
        return this;
    }



    /**
     * add item to 虚机CPU拓扑
     *
     * @param socket
     */
    public void addSocket(Socket socket) {
        if (this.sockets == null) {
            this.sockets = new ArrayList<>();
        }
        this.sockets.add(socket);
    }

    /**
     * add item to numa details
     *
     * @param numa
     */
    public void addNuma(Numa numa) {
        if (this.numas == null) {
            this.numas = new ArrayList<>();
        }
        this.numas.add(numa);
    }
}