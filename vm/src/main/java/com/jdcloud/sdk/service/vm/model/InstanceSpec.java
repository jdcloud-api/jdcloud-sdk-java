/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * 
 *
 * 
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.vm.model;

import java.util.List;
import java.util.ArrayList;
import com.jdcloud.sdk.annotation.Required;
import com.jdcloud.sdk.service.vpc.model.ElasticIpSpec;
import com.jdcloud.sdk.service.charge.model.ChargeSpec;

/**
 * instanceSpec
 */
public class InstanceSpec  implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 实例所属的可用区
     * Required:true
     */
    @Required
    private String az;

    /**
     * 实例类型
     * Required:true
     */
    @Required
    private String instanceType;

    /**
     * 镜像ID
     * Required:true
     */
    @Required
    private String imageId;

    /**
     * 主机名称，不为空且只允许中文、数字、大小写字母、英文下划线“_”及中划线“-”，不超过32字符
     * Required:true
     */
    @Required
    private String name;

    /**
     * &quot;密码，长度8-30个字符&quot;
&quot;a)不能出现的字符或完整单词，如下：jd、JD、360、bug、BUG、com、COM、cloud、CLOUD、password、PASSWORD&quot;
&quot;b)不能出现连续三位及三位以上数字，例：123、987&quot;
&quot;c)不能出现连续三位及三位以上的字母，例：abc、CBA、bcde、cdef&quot;
&quot;d)不能出现三位及三位以上键位顺序（仅包括字母），例：qaz、tfc、wsx、xsw、qwert、trewq&quot;
&quot;e)密码中不能出现自己的用户名&quot;
&quot;g)至少同时包含三类（大写字母，小写字母，数字和特殊字符，特殊字符为 ** ()&#x60;~!@#$%&amp;_-+&#x3D;{}[]:\&quot;;&#39;&lt;&gt;,.?/）*|&quot;

     */
    private String password;

    /**
     * 密钥对名称
     */
    private List<String> keyNames;

    /**
     * 主网卡主IP关联的弹性IP规格
     */
    private ElasticIpSpec elasticIp;

    /**
     * 主网卡配置信息
     * Required:true
     */
    @Required
    private InstanceNetworkInterfaceAttachmentSpec primaryNetworkInterface;

    /**
     * 系统盘配置信息
     * Required:true
     */
    @Required
    private InstanceDiskAttachmentSpec systemDisk;

    /**
     * 数据盘配置信息
     */
    private List<InstanceDiskAttachmentSpec> dataDisks;

    /**
     * 计费配置
     */
    private ChargeSpec charge;

    /**
     * 主机描述，长度不超过256字符
     */
    private String description;


    /**
     * get 实例所属的可用区
     *
     * @return
     */
    public String getAz() {
        return az;
    }

    /**
     * set 实例所属的可用区
     *
     * @param az
     */
    public void setAz(String az) {
        this.az = az;
    }

    /**
     * get 实例类型
     *
     * @return
     */
    public String getInstanceType() {
        return instanceType;
    }

    /**
     * set 实例类型
     *
     * @param instanceType
     */
    public void setInstanceType(String instanceType) {
        this.instanceType = instanceType;
    }

    /**
     * get 镜像ID
     *
     * @return
     */
    public String getImageId() {
        return imageId;
    }

    /**
     * set 镜像ID
     *
     * @param imageId
     */
    public void setImageId(String imageId) {
        this.imageId = imageId;
    }

    /**
     * get 主机名称，不为空且只允许中文、数字、大小写字母、英文下划线“_”及中划线“-”，不超过32字符
     *
     * @return
     */
    public String getName() {
        return name;
    }

    /**
     * set 主机名称，不为空且只允许中文、数字、大小写字母、英文下划线“_”及中划线“-”，不超过32字符
     *
     * @param name
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * get &quot;密码，长度8-30个字符&quot;
&quot;a)不能出现的字符或完整单词，如下：jd、JD、360、bug、BUG、com、COM、cloud、CLOUD、password、PASSWORD&quot;
&quot;b)不能出现连续三位及三位以上数字，例：123、987&quot;
&quot;c)不能出现连续三位及三位以上的字母，例：abc、CBA、bcde、cdef&quot;
&quot;d)不能出现三位及三位以上键位顺序（仅包括字母），例：qaz、tfc、wsx、xsw、qwert、trewq&quot;
&quot;e)密码中不能出现自己的用户名&quot;
&quot;g)至少同时包含三类（大写字母，小写字母，数字和特殊字符，特殊字符为 ** ()&#x60;~!@#$%&amp;_-+&#x3D;{}[]:\&quot;;&#39;&lt;&gt;,.?/）*|&quot;

     *
     * @return
     */
    public String getPassword() {
        return password;
    }

    /**
     * set &quot;密码，长度8-30个字符&quot;
&quot;a)不能出现的字符或完整单词，如下：jd、JD、360、bug、BUG、com、COM、cloud、CLOUD、password、PASSWORD&quot;
&quot;b)不能出现连续三位及三位以上数字，例：123、987&quot;
&quot;c)不能出现连续三位及三位以上的字母，例：abc、CBA、bcde、cdef&quot;
&quot;d)不能出现三位及三位以上键位顺序（仅包括字母），例：qaz、tfc、wsx、xsw、qwert、trewq&quot;
&quot;e)密码中不能出现自己的用户名&quot;
&quot;g)至少同时包含三类（大写字母，小写字母，数字和特殊字符，特殊字符为 ** ()&#x60;~!@#$%&amp;_-+&#x3D;{}[]:\&quot;;&#39;&lt;&gt;,.?/）*|&quot;

     *
     * @param password
     */
    public void setPassword(String password) {
        this.password = password;
    }

    /**
     * get 密钥对名称
     *
     * @return
     */
    public List<String> getKeyNames() {
        return keyNames;
    }

    /**
     * set 密钥对名称
     *
     * @param keyNames
     */
    public void setKeyNames(List<String> keyNames) {
        this.keyNames = keyNames;
    }

    /**
     * get 主网卡主IP关联的弹性IP规格
     *
     * @return
     */
    public ElasticIpSpec getElasticIp() {
        return elasticIp;
    }

    /**
     * set 主网卡主IP关联的弹性IP规格
     *
     * @param elasticIp
     */
    public void setElasticIp(ElasticIpSpec elasticIp) {
        this.elasticIp = elasticIp;
    }

    /**
     * get 主网卡配置信息
     *
     * @return
     */
    public InstanceNetworkInterfaceAttachmentSpec getPrimaryNetworkInterface() {
        return primaryNetworkInterface;
    }

    /**
     * set 主网卡配置信息
     *
     * @param primaryNetworkInterface
     */
    public void setPrimaryNetworkInterface(InstanceNetworkInterfaceAttachmentSpec primaryNetworkInterface) {
        this.primaryNetworkInterface = primaryNetworkInterface;
    }

    /**
     * get 系统盘配置信息
     *
     * @return
     */
    public InstanceDiskAttachmentSpec getSystemDisk() {
        return systemDisk;
    }

    /**
     * set 系统盘配置信息
     *
     * @param systemDisk
     */
    public void setSystemDisk(InstanceDiskAttachmentSpec systemDisk) {
        this.systemDisk = systemDisk;
    }

    /**
     * get 数据盘配置信息
     *
     * @return
     */
    public List<InstanceDiskAttachmentSpec> getDataDisks() {
        return dataDisks;
    }

    /**
     * set 数据盘配置信息
     *
     * @param dataDisks
     */
    public void setDataDisks(List<InstanceDiskAttachmentSpec> dataDisks) {
        this.dataDisks = dataDisks;
    }

    /**
     * get 计费配置
     *
     * @return
     */
    public ChargeSpec getCharge() {
        return charge;
    }

    /**
     * set 计费配置
     *
     * @param charge
     */
    public void setCharge(ChargeSpec charge) {
        this.charge = charge;
    }

    /**
     * get 主机描述，长度不超过256字符
     *
     * @return
     */
    public String getDescription() {
        return description;
    }

    /**
     * set 主机描述，长度不超过256字符
     *
     * @param description
     */
    public void setDescription(String description) {
        this.description = description;
    }


    /**
     * set 实例所属的可用区
     *
     * @param az
     */
    public InstanceSpec az(String az) {
        this.az = az;
        return this;
    }

    /**
     * set 实例类型
     *
     * @param instanceType
     */
    public InstanceSpec instanceType(String instanceType) {
        this.instanceType = instanceType;
        return this;
    }

    /**
     * set 镜像ID
     *
     * @param imageId
     */
    public InstanceSpec imageId(String imageId) {
        this.imageId = imageId;
        return this;
    }

    /**
     * set 主机名称，不为空且只允许中文、数字、大小写字母、英文下划线“_”及中划线“-”，不超过32字符
     *
     * @param name
     */
    public InstanceSpec name(String name) {
        this.name = name;
        return this;
    }

    /**
     * set &quot;密码，长度8-30个字符&quot;
&quot;a)不能出现的字符或完整单词，如下：jd、JD、360、bug、BUG、com、COM、cloud、CLOUD、password、PASSWORD&quot;
&quot;b)不能出现连续三位及三位以上数字，例：123、987&quot;
&quot;c)不能出现连续三位及三位以上的字母，例：abc、CBA、bcde、cdef&quot;
&quot;d)不能出现三位及三位以上键位顺序（仅包括字母），例：qaz、tfc、wsx、xsw、qwert、trewq&quot;
&quot;e)密码中不能出现自己的用户名&quot;
&quot;g)至少同时包含三类（大写字母，小写字母，数字和特殊字符，特殊字符为 ** ()&#x60;~!@#$%&amp;_-+&#x3D;{}[]:\&quot;;&#39;&lt;&gt;,.?/）*|&quot;

     *
     * @param password
     */
    public InstanceSpec password(String password) {
        this.password = password;
        return this;
    }

    /**
     * set 密钥对名称
     *
     * @param keyNames
     */
    public InstanceSpec keyNames(List<String> keyNames) {
        this.keyNames = keyNames;
        return this;
    }

    /**
     * set 主网卡主IP关联的弹性IP规格
     *
     * @param elasticIp
     */
    public InstanceSpec elasticIp(ElasticIpSpec elasticIp) {
        this.elasticIp = elasticIp;
        return this;
    }

    /**
     * set 主网卡配置信息
     *
     * @param primaryNetworkInterface
     */
    public InstanceSpec primaryNetworkInterface(InstanceNetworkInterfaceAttachmentSpec primaryNetworkInterface) {
        this.primaryNetworkInterface = primaryNetworkInterface;
        return this;
    }

    /**
     * set 系统盘配置信息
     *
     * @param systemDisk
     */
    public InstanceSpec systemDisk(InstanceDiskAttachmentSpec systemDisk) {
        this.systemDisk = systemDisk;
        return this;
    }

    /**
     * set 数据盘配置信息
     *
     * @param dataDisks
     */
    public InstanceSpec dataDisks(List<InstanceDiskAttachmentSpec> dataDisks) {
        this.dataDisks = dataDisks;
        return this;
    }

    /**
     * set 计费配置
     *
     * @param charge
     */
    public InstanceSpec charge(ChargeSpec charge) {
        this.charge = charge;
        return this;
    }

    /**
     * set 主机描述，长度不超过256字符
     *
     * @param description
     */
    public InstanceSpec description(String description) {
        this.description = description;
        return this;
    }


    /**
     * add item to 密钥对名称
     *
     * @param keyName
     */
    public void addKeyName(String keyName) {
        if (this.keyNames == null) {
            this.keyNames = new ArrayList<>();
        }
        this.keyNames.add(keyName);
    }

    /**
     * add item to 数据盘配置信息
     *
     * @param dataDisk
     */
    public void addDataDisk(InstanceDiskAttachmentSpec dataDisk) {
        if (this.dataDisks == null) {
            this.dataDisks = new ArrayList<>();
        }
        this.dataDisks.add(dataDisk);
    }

}