/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * 
 *
 * 
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.lb.model;

import java.util.List;
import java.util.ArrayList;

/**
 * backend
 */
public class Backend  implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 后端服务的Id
     */
    private String backendId;

    /**
     * 后端服务的名字
     */
    private String backendName;

    /**
     * 后端服务所属loadBalancer的Id
     */
    private String loadBalancerId;

    /**
     * 后端服务所属负载均衡类型，取值为：alb、nlb、dnlb
     */
    private String loadBalancerType;

    /**
     * 后端服务的协议 &lt;br&gt;【alb】包括Http，Tcp &lt;br&gt;【nlb】包括Tcp，Udp &lt;br&gt;【dnlb】包括Tcp，Udp
     */
    private String protocol;

    /**
     * 后端服务的端口，取值范围为[1, 65535]
     */
    private Integer port;

    /**
     * 调度算法 &lt;br&gt;【alb,nlb】取值范围为[IpHash, RoundRobin, LeastConn]（取值范围的含义：加权源Ip哈希，加权轮询和加权最小连接） &lt;br&gt;【dnlb】取值范围为[IpHash, QuintupleHash]（取值范围的含义分别为：加权源Ip哈希和加权五元组哈希）
     */
    private String algorithm;

    /**
     * 虚拟服务器组的Id列表，目前只支持一个，且与agIds不能同时存在
     */
    private List<String> targetGroupIds;

    /**
     * 高可用组的Id列表，目前只支持一个，且与targetGroupIds不能同时存在
     */
    private List<String> agIds;

    /**
     * 【alb Tcp/Udp协议】通过Proxy Protocol协议获取真实ip, 取值为False(不获取)或者True(获取,支持v1版本)
     */
    private Boolean proxyProtocol;

    /**
     * 后端服务的描述信息
     */
    private String description;

    /**
     * 【nlb】连接耗尽超时，移除target前连接的最大保持时间，范围[0，3600]
     */
    private Integer connectionDrainingSeconds;

    /**
     * 会话保持, 取值为false(不开启)或者true(开启) &lt;br&gt;【alb Http协议，RoundRobin算法】支持基于cookie的会话保持 &lt;br&gt;【nlb】支持基于报文源目的IP的会话保持
     */
    private Boolean sessionStickiness;

    /**
     * 【nlb】会话保持超时时间，sessionStickiness开启时生效，默认300s, 范围[1-3600]
     */
    private Integer sessionStickyTimeout;

    /**
     * 【alb Http协议】cookie的过期时间,sessionStickiness开启时生效，取值范围为[0,86400], 0表示cookie与浏览器同生命周期
     */
    private Integer httpCookieExpireSeconds;

    /**
     * 【alb http协议】获取负载均衡的协议, 取值为False(不获取)或True(获取)
     */
    private Boolean httpForwardedProtocol;

    /**
     * 【alb http协议】获取负载均衡的端口, 取值为False(不获取)或True(获取)
     */
    private Boolean httpForwardedPort;

    /**
     * 【alb http协议】获取负载均衡的host信息, 取值为False(不获取)或True(获取)
     */
    private Boolean httpForwardedHost;

    /**
     * 【alb http协议】获取负载均衡的vip, 取值为False(不获取)或True(获取)
     */
    private Boolean httpForwardedVip;

    /**
     * 【alb Http协议】获取请求端使用的端口, 取值为False(不获取)或True(获取)
     */
    private Boolean httpForwardedClientPort;

    /**
     * 健康检查,数据结构：&lt;br&gt;protocol（string）健康检查协议,【ALB、NLB】取值为Http, Tcp，【DNLB】取值为Tcp;&lt;br&gt;healthyThresholdCount（integer）健康阀值，取值范围为[1,5]，默认为3;&lt;br&gt;unhealthyThresholdCount（integer）不健康阀值，取值范围为[1,5], 默认为3;&lt;br&gt;checkTimeoutSeconds（integer）响应超时时间, 取值范围为[2,60]，默认为3s;&lt;br&gt;intervalSeconds（integer）健康检查间隔, 范围为[5,300], 默认为5s;&lt;br&gt;port（integer）检查端口, 取值范围为[0,65535], 默认为0，默认端口为每个后端服务器接收负载均衡流量的端口;&lt;br&gt;httpDomain（string）【Http协议】检查域名;&lt;br&gt;httpPath（string）【Http协议】检查路径, 健康检查的目标路径，必须以&quot;/&quot;开头，允许输入具体的文件路径，默认为根目录;&lt;br&gt;httpCode（[]string）【Http协议】检查来自后端服务器的成功响应时，要使用的HTTP状态码。您可以指定：单个数值（例如：&quot;200&quot;，取值范围200-499）、一段连续数值（例如：&quot;201-205&quot;，取值范围范围200-499，且前面的参数小于后面）和一类连续数值缩写（例如：&quot;3xx&quot;，等价于&quot;300-399&quot;，取值范围2xx、3xx和4xx）。多个数值之间通过&quot;,&quot;分割（例如：&quot;200,202-207,302,4xx&quot;）。目前仅支持2xx、3xx、4xx。
     */
    private Object healthCheck;

    /**
     * 后端服务的创建时间
     */
    private String createdTime;


    /**
     * get 后端服务的Id
     *
     * @return
     */
    public String getBackendId() {
        return backendId;
    }

    /**
     * set 后端服务的Id
     *
     * @param backendId
     */
    public void setBackendId(String backendId) {
        this.backendId = backendId;
    }

    /**
     * get 后端服务的名字
     *
     * @return
     */
    public String getBackendName() {
        return backendName;
    }

    /**
     * set 后端服务的名字
     *
     * @param backendName
     */
    public void setBackendName(String backendName) {
        this.backendName = backendName;
    }

    /**
     * get 后端服务所属loadBalancer的Id
     *
     * @return
     */
    public String getLoadBalancerId() {
        return loadBalancerId;
    }

    /**
     * set 后端服务所属loadBalancer的Id
     *
     * @param loadBalancerId
     */
    public void setLoadBalancerId(String loadBalancerId) {
        this.loadBalancerId = loadBalancerId;
    }

    /**
     * get 后端服务所属负载均衡类型，取值为：alb、nlb、dnlb
     *
     * @return
     */
    public String getLoadBalancerType() {
        return loadBalancerType;
    }

    /**
     * set 后端服务所属负载均衡类型，取值为：alb、nlb、dnlb
     *
     * @param loadBalancerType
     */
    public void setLoadBalancerType(String loadBalancerType) {
        this.loadBalancerType = loadBalancerType;
    }

    /**
     * get 后端服务的协议 &lt;br&gt;【alb】包括Http，Tcp &lt;br&gt;【nlb】包括Tcp，Udp &lt;br&gt;【dnlb】包括Tcp，Udp
     *
     * @return
     */
    public String getProtocol() {
        return protocol;
    }

    /**
     * set 后端服务的协议 &lt;br&gt;【alb】包括Http，Tcp &lt;br&gt;【nlb】包括Tcp，Udp &lt;br&gt;【dnlb】包括Tcp，Udp
     *
     * @param protocol
     */
    public void setProtocol(String protocol) {
        this.protocol = protocol;
    }

    /**
     * get 后端服务的端口，取值范围为[1, 65535]
     *
     * @return
     */
    public Integer getPort() {
        return port;
    }

    /**
     * set 后端服务的端口，取值范围为[1, 65535]
     *
     * @param port
     */
    public void setPort(Integer port) {
        this.port = port;
    }

    /**
     * get 调度算法 &lt;br&gt;【alb,nlb】取值范围为[IpHash, RoundRobin, LeastConn]（取值范围的含义：加权源Ip哈希，加权轮询和加权最小连接） &lt;br&gt;【dnlb】取值范围为[IpHash, QuintupleHash]（取值范围的含义分别为：加权源Ip哈希和加权五元组哈希）
     *
     * @return
     */
    public String getAlgorithm() {
        return algorithm;
    }

    /**
     * set 调度算法 &lt;br&gt;【alb,nlb】取值范围为[IpHash, RoundRobin, LeastConn]（取值范围的含义：加权源Ip哈希，加权轮询和加权最小连接） &lt;br&gt;【dnlb】取值范围为[IpHash, QuintupleHash]（取值范围的含义分别为：加权源Ip哈希和加权五元组哈希）
     *
     * @param algorithm
     */
    public void setAlgorithm(String algorithm) {
        this.algorithm = algorithm;
    }

    /**
     * get 虚拟服务器组的Id列表，目前只支持一个，且与agIds不能同时存在
     *
     * @return
     */
    public List<String> getTargetGroupIds() {
        return targetGroupIds;
    }

    /**
     * set 虚拟服务器组的Id列表，目前只支持一个，且与agIds不能同时存在
     *
     * @param targetGroupIds
     */
    public void setTargetGroupIds(List<String> targetGroupIds) {
        this.targetGroupIds = targetGroupIds;
    }

    /**
     * get 高可用组的Id列表，目前只支持一个，且与targetGroupIds不能同时存在
     *
     * @return
     */
    public List<String> getAgIds() {
        return agIds;
    }

    /**
     * set 高可用组的Id列表，目前只支持一个，且与targetGroupIds不能同时存在
     *
     * @param agIds
     */
    public void setAgIds(List<String> agIds) {
        this.agIds = agIds;
    }

    /**
     * get 【alb Tcp/Udp协议】通过Proxy Protocol协议获取真实ip, 取值为False(不获取)或者True(获取,支持v1版本)
     *
     * @return
     */
    public Boolean getProxyProtocol() {
        return proxyProtocol;
    }

    /**
     * set 【alb Tcp/Udp协议】通过Proxy Protocol协议获取真实ip, 取值为False(不获取)或者True(获取,支持v1版本)
     *
     * @param proxyProtocol
     */
    public void setProxyProtocol(Boolean proxyProtocol) {
        this.proxyProtocol = proxyProtocol;
    }

    /**
     * get 后端服务的描述信息
     *
     * @return
     */
    public String getDescription() {
        return description;
    }

    /**
     * set 后端服务的描述信息
     *
     * @param description
     */
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * get 【nlb】连接耗尽超时，移除target前连接的最大保持时间，范围[0，3600]
     *
     * @return
     */
    public Integer getConnectionDrainingSeconds() {
        return connectionDrainingSeconds;
    }

    /**
     * set 【nlb】连接耗尽超时，移除target前连接的最大保持时间，范围[0，3600]
     *
     * @param connectionDrainingSeconds
     */
    public void setConnectionDrainingSeconds(Integer connectionDrainingSeconds) {
        this.connectionDrainingSeconds = connectionDrainingSeconds;
    }

    /**
     * get 会话保持, 取值为false(不开启)或者true(开启) &lt;br&gt;【alb Http协议，RoundRobin算法】支持基于cookie的会话保持 &lt;br&gt;【nlb】支持基于报文源目的IP的会话保持
     *
     * @return
     */
    public Boolean getSessionStickiness() {
        return sessionStickiness;
    }

    /**
     * set 会话保持, 取值为false(不开启)或者true(开启) &lt;br&gt;【alb Http协议，RoundRobin算法】支持基于cookie的会话保持 &lt;br&gt;【nlb】支持基于报文源目的IP的会话保持
     *
     * @param sessionStickiness
     */
    public void setSessionStickiness(Boolean sessionStickiness) {
        this.sessionStickiness = sessionStickiness;
    }

    /**
     * get 【nlb】会话保持超时时间，sessionStickiness开启时生效，默认300s, 范围[1-3600]
     *
     * @return
     */
    public Integer getSessionStickyTimeout() {
        return sessionStickyTimeout;
    }

    /**
     * set 【nlb】会话保持超时时间，sessionStickiness开启时生效，默认300s, 范围[1-3600]
     *
     * @param sessionStickyTimeout
     */
    public void setSessionStickyTimeout(Integer sessionStickyTimeout) {
        this.sessionStickyTimeout = sessionStickyTimeout;
    }

    /**
     * get 【alb Http协议】cookie的过期时间,sessionStickiness开启时生效，取值范围为[0,86400], 0表示cookie与浏览器同生命周期
     *
     * @return
     */
    public Integer getHttpCookieExpireSeconds() {
        return httpCookieExpireSeconds;
    }

    /**
     * set 【alb Http协议】cookie的过期时间,sessionStickiness开启时生效，取值范围为[0,86400], 0表示cookie与浏览器同生命周期
     *
     * @param httpCookieExpireSeconds
     */
    public void setHttpCookieExpireSeconds(Integer httpCookieExpireSeconds) {
        this.httpCookieExpireSeconds = httpCookieExpireSeconds;
    }

    /**
     * get 【alb http协议】获取负载均衡的协议, 取值为False(不获取)或True(获取)
     *
     * @return
     */
    public Boolean getHttpForwardedProtocol() {
        return httpForwardedProtocol;
    }

    /**
     * set 【alb http协议】获取负载均衡的协议, 取值为False(不获取)或True(获取)
     *
     * @param httpForwardedProtocol
     */
    public void setHttpForwardedProtocol(Boolean httpForwardedProtocol) {
        this.httpForwardedProtocol = httpForwardedProtocol;
    }

    /**
     * get 【alb http协议】获取负载均衡的端口, 取值为False(不获取)或True(获取)
     *
     * @return
     */
    public Boolean getHttpForwardedPort() {
        return httpForwardedPort;
    }

    /**
     * set 【alb http协议】获取负载均衡的端口, 取值为False(不获取)或True(获取)
     *
     * @param httpForwardedPort
     */
    public void setHttpForwardedPort(Boolean httpForwardedPort) {
        this.httpForwardedPort = httpForwardedPort;
    }

    /**
     * get 【alb http协议】获取负载均衡的host信息, 取值为False(不获取)或True(获取)
     *
     * @return
     */
    public Boolean getHttpForwardedHost() {
        return httpForwardedHost;
    }

    /**
     * set 【alb http协议】获取负载均衡的host信息, 取值为False(不获取)或True(获取)
     *
     * @param httpForwardedHost
     */
    public void setHttpForwardedHost(Boolean httpForwardedHost) {
        this.httpForwardedHost = httpForwardedHost;
    }

    /**
     * get 【alb http协议】获取负载均衡的vip, 取值为False(不获取)或True(获取)
     *
     * @return
     */
    public Boolean getHttpForwardedVip() {
        return httpForwardedVip;
    }

    /**
     * set 【alb http协议】获取负载均衡的vip, 取值为False(不获取)或True(获取)
     *
     * @param httpForwardedVip
     */
    public void setHttpForwardedVip(Boolean httpForwardedVip) {
        this.httpForwardedVip = httpForwardedVip;
    }

    /**
     * get 【alb Http协议】获取请求端使用的端口, 取值为False(不获取)或True(获取)
     *
     * @return
     */
    public Boolean getHttpForwardedClientPort() {
        return httpForwardedClientPort;
    }

    /**
     * set 【alb Http协议】获取请求端使用的端口, 取值为False(不获取)或True(获取)
     *
     * @param httpForwardedClientPort
     */
    public void setHttpForwardedClientPort(Boolean httpForwardedClientPort) {
        this.httpForwardedClientPort = httpForwardedClientPort;
    }

    /**
     * get 健康检查,数据结构：&lt;br&gt;protocol（string）健康检查协议,【ALB、NLB】取值为Http, Tcp，【DNLB】取值为Tcp;&lt;br&gt;healthyThresholdCount（integer）健康阀值，取值范围为[1,5]，默认为3;&lt;br&gt;unhealthyThresholdCount（integer）不健康阀值，取值范围为[1,5], 默认为3;&lt;br&gt;checkTimeoutSeconds（integer）响应超时时间, 取值范围为[2,60]，默认为3s;&lt;br&gt;intervalSeconds（integer）健康检查间隔, 范围为[5,300], 默认为5s;&lt;br&gt;port（integer）检查端口, 取值范围为[0,65535], 默认为0，默认端口为每个后端服务器接收负载均衡流量的端口;&lt;br&gt;httpDomain（string）【Http协议】检查域名;&lt;br&gt;httpPath（string）【Http协议】检查路径, 健康检查的目标路径，必须以&quot;/&quot;开头，允许输入具体的文件路径，默认为根目录;&lt;br&gt;httpCode（[]string）【Http协议】检查来自后端服务器的成功响应时，要使用的HTTP状态码。您可以指定：单个数值（例如：&quot;200&quot;，取值范围200-499）、一段连续数值（例如：&quot;201-205&quot;，取值范围范围200-499，且前面的参数小于后面）和一类连续数值缩写（例如：&quot;3xx&quot;，等价于&quot;300-399&quot;，取值范围2xx、3xx和4xx）。多个数值之间通过&quot;,&quot;分割（例如：&quot;200,202-207,302,4xx&quot;）。目前仅支持2xx、3xx、4xx。
     *
     * @return
     */
    public Object getHealthCheck() {
        return healthCheck;
    }

    /**
     * set 健康检查,数据结构：&lt;br&gt;protocol（string）健康检查协议,【ALB、NLB】取值为Http, Tcp，【DNLB】取值为Tcp;&lt;br&gt;healthyThresholdCount（integer）健康阀值，取值范围为[1,5]，默认为3;&lt;br&gt;unhealthyThresholdCount（integer）不健康阀值，取值范围为[1,5], 默认为3;&lt;br&gt;checkTimeoutSeconds（integer）响应超时时间, 取值范围为[2,60]，默认为3s;&lt;br&gt;intervalSeconds（integer）健康检查间隔, 范围为[5,300], 默认为5s;&lt;br&gt;port（integer）检查端口, 取值范围为[0,65535], 默认为0，默认端口为每个后端服务器接收负载均衡流量的端口;&lt;br&gt;httpDomain（string）【Http协议】检查域名;&lt;br&gt;httpPath（string）【Http协议】检查路径, 健康检查的目标路径，必须以&quot;/&quot;开头，允许输入具体的文件路径，默认为根目录;&lt;br&gt;httpCode（[]string）【Http协议】检查来自后端服务器的成功响应时，要使用的HTTP状态码。您可以指定：单个数值（例如：&quot;200&quot;，取值范围200-499）、一段连续数值（例如：&quot;201-205&quot;，取值范围范围200-499，且前面的参数小于后面）和一类连续数值缩写（例如：&quot;3xx&quot;，等价于&quot;300-399&quot;，取值范围2xx、3xx和4xx）。多个数值之间通过&quot;,&quot;分割（例如：&quot;200,202-207,302,4xx&quot;）。目前仅支持2xx、3xx、4xx。
     *
     * @param healthCheck
     */
    public void setHealthCheck(Object healthCheck) {
        this.healthCheck = healthCheck;
    }

    /**
     * get 后端服务的创建时间
     *
     * @return
     */
    public String getCreatedTime() {
        return createdTime;
    }

    /**
     * set 后端服务的创建时间
     *
     * @param createdTime
     */
    public void setCreatedTime(String createdTime) {
        this.createdTime = createdTime;
    }


    /**
     * set 后端服务的Id
     *
     * @param backendId
     */
    public Backend backendId(String backendId) {
        this.backendId = backendId;
        return this;
    }

    /**
     * set 后端服务的名字
     *
     * @param backendName
     */
    public Backend backendName(String backendName) {
        this.backendName = backendName;
        return this;
    }

    /**
     * set 后端服务所属loadBalancer的Id
     *
     * @param loadBalancerId
     */
    public Backend loadBalancerId(String loadBalancerId) {
        this.loadBalancerId = loadBalancerId;
        return this;
    }

    /**
     * set 后端服务所属负载均衡类型，取值为：alb、nlb、dnlb
     *
     * @param loadBalancerType
     */
    public Backend loadBalancerType(String loadBalancerType) {
        this.loadBalancerType = loadBalancerType;
        return this;
    }

    /**
     * set 后端服务的协议 &lt;br&gt;【alb】包括Http，Tcp &lt;br&gt;【nlb】包括Tcp，Udp &lt;br&gt;【dnlb】包括Tcp，Udp
     *
     * @param protocol
     */
    public Backend protocol(String protocol) {
        this.protocol = protocol;
        return this;
    }

    /**
     * set 后端服务的端口，取值范围为[1, 65535]
     *
     * @param port
     */
    public Backend port(Integer port) {
        this.port = port;
        return this;
    }

    /**
     * set 调度算法 &lt;br&gt;【alb,nlb】取值范围为[IpHash, RoundRobin, LeastConn]（取值范围的含义：加权源Ip哈希，加权轮询和加权最小连接） &lt;br&gt;【dnlb】取值范围为[IpHash, QuintupleHash]（取值范围的含义分别为：加权源Ip哈希和加权五元组哈希）
     *
     * @param algorithm
     */
    public Backend algorithm(String algorithm) {
        this.algorithm = algorithm;
        return this;
    }

    /**
     * set 虚拟服务器组的Id列表，目前只支持一个，且与agIds不能同时存在
     *
     * @param targetGroupIds
     */
    public Backend targetGroupIds(List<String> targetGroupIds) {
        this.targetGroupIds = targetGroupIds;
        return this;
    }

    /**
     * set 高可用组的Id列表，目前只支持一个，且与targetGroupIds不能同时存在
     *
     * @param agIds
     */
    public Backend agIds(List<String> agIds) {
        this.agIds = agIds;
        return this;
    }

    /**
     * set 【alb Tcp/Udp协议】通过Proxy Protocol协议获取真实ip, 取值为False(不获取)或者True(获取,支持v1版本)
     *
     * @param proxyProtocol
     */
    public Backend proxyProtocol(Boolean proxyProtocol) {
        this.proxyProtocol = proxyProtocol;
        return this;
    }

    /**
     * set 后端服务的描述信息
     *
     * @param description
     */
    public Backend description(String description) {
        this.description = description;
        return this;
    }

    /**
     * set 【nlb】连接耗尽超时，移除target前连接的最大保持时间，范围[0，3600]
     *
     * @param connectionDrainingSeconds
     */
    public Backend connectionDrainingSeconds(Integer connectionDrainingSeconds) {
        this.connectionDrainingSeconds = connectionDrainingSeconds;
        return this;
    }

    /**
     * set 会话保持, 取值为false(不开启)或者true(开启) &lt;br&gt;【alb Http协议，RoundRobin算法】支持基于cookie的会话保持 &lt;br&gt;【nlb】支持基于报文源目的IP的会话保持
     *
     * @param sessionStickiness
     */
    public Backend sessionStickiness(Boolean sessionStickiness) {
        this.sessionStickiness = sessionStickiness;
        return this;
    }

    /**
     * set 【nlb】会话保持超时时间，sessionStickiness开启时生效，默认300s, 范围[1-3600]
     *
     * @param sessionStickyTimeout
     */
    public Backend sessionStickyTimeout(Integer sessionStickyTimeout) {
        this.sessionStickyTimeout = sessionStickyTimeout;
        return this;
    }

    /**
     * set 【alb Http协议】cookie的过期时间,sessionStickiness开启时生效，取值范围为[0,86400], 0表示cookie与浏览器同生命周期
     *
     * @param httpCookieExpireSeconds
     */
    public Backend httpCookieExpireSeconds(Integer httpCookieExpireSeconds) {
        this.httpCookieExpireSeconds = httpCookieExpireSeconds;
        return this;
    }

    /**
     * set 【alb http协议】获取负载均衡的协议, 取值为False(不获取)或True(获取)
     *
     * @param httpForwardedProtocol
     */
    public Backend httpForwardedProtocol(Boolean httpForwardedProtocol) {
        this.httpForwardedProtocol = httpForwardedProtocol;
        return this;
    }

    /**
     * set 【alb http协议】获取负载均衡的端口, 取值为False(不获取)或True(获取)
     *
     * @param httpForwardedPort
     */
    public Backend httpForwardedPort(Boolean httpForwardedPort) {
        this.httpForwardedPort = httpForwardedPort;
        return this;
    }

    /**
     * set 【alb http协议】获取负载均衡的host信息, 取值为False(不获取)或True(获取)
     *
     * @param httpForwardedHost
     */
    public Backend httpForwardedHost(Boolean httpForwardedHost) {
        this.httpForwardedHost = httpForwardedHost;
        return this;
    }

    /**
     * set 【alb http协议】获取负载均衡的vip, 取值为False(不获取)或True(获取)
     *
     * @param httpForwardedVip
     */
    public Backend httpForwardedVip(Boolean httpForwardedVip) {
        this.httpForwardedVip = httpForwardedVip;
        return this;
    }

    /**
     * set 【alb Http协议】获取请求端使用的端口, 取值为False(不获取)或True(获取)
     *
     * @param httpForwardedClientPort
     */
    public Backend httpForwardedClientPort(Boolean httpForwardedClientPort) {
        this.httpForwardedClientPort = httpForwardedClientPort;
        return this;
    }

    /**
     * set 健康检查,数据结构：&lt;br&gt;protocol（string）健康检查协议,【ALB、NLB】取值为Http, Tcp，【DNLB】取值为Tcp;&lt;br&gt;healthyThresholdCount（integer）健康阀值，取值范围为[1,5]，默认为3;&lt;br&gt;unhealthyThresholdCount（integer）不健康阀值，取值范围为[1,5], 默认为3;&lt;br&gt;checkTimeoutSeconds（integer）响应超时时间, 取值范围为[2,60]，默认为3s;&lt;br&gt;intervalSeconds（integer）健康检查间隔, 范围为[5,300], 默认为5s;&lt;br&gt;port（integer）检查端口, 取值范围为[0,65535], 默认为0，默认端口为每个后端服务器接收负载均衡流量的端口;&lt;br&gt;httpDomain（string）【Http协议】检查域名;&lt;br&gt;httpPath（string）【Http协议】检查路径, 健康检查的目标路径，必须以&quot;/&quot;开头，允许输入具体的文件路径，默认为根目录;&lt;br&gt;httpCode（[]string）【Http协议】检查来自后端服务器的成功响应时，要使用的HTTP状态码。您可以指定：单个数值（例如：&quot;200&quot;，取值范围200-499）、一段连续数值（例如：&quot;201-205&quot;，取值范围范围200-499，且前面的参数小于后面）和一类连续数值缩写（例如：&quot;3xx&quot;，等价于&quot;300-399&quot;，取值范围2xx、3xx和4xx）。多个数值之间通过&quot;,&quot;分割（例如：&quot;200,202-207,302,4xx&quot;）。目前仅支持2xx、3xx、4xx。
     *
     * @param healthCheck
     */
    public Backend healthCheck(Object healthCheck) {
        this.healthCheck = healthCheck;
        return this;
    }

    /**
     * set 后端服务的创建时间
     *
     * @param createdTime
     */
    public Backend createdTime(String createdTime) {
        this.createdTime = createdTime;
        return this;
    }


    /**
     * add item to 虚拟服务器组的Id列表，目前只支持一个，且与agIds不能同时存在
     *
     * @param targetGroupId
     */
    public void addTargetGroupId(String targetGroupId) {
        if (this.targetGroupIds == null) {
            this.targetGroupIds = new ArrayList<>();
        }
        this.targetGroupIds.add(targetGroupId);
    }

    /**
     * add item to 高可用组的Id列表，目前只支持一个，且与targetGroupIds不能同时存在
     *
     * @param agId
     */
    public void addAgId(String agId) {
        if (this.agIds == null) {
            this.agIds = new ArrayList<>();
        }
        this.agIds.add(agId);
    }

}