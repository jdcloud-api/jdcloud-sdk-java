/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * 
 *
 * 
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.lb.model;

import java.util.List;
import java.util.ArrayList;

/**
 * updateListenerSpec
 */
public class UpdateListenerSpec  implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 监听器名称,只允许输入中文、数字、大小写字母、英文下划线“_”及中划线“-”，不允许为空且不超过32字符
     */
    private String listenerName;

    /**
     * Listener状态, 取值为On或者为Off
     */
    private String status;

    /**
     * 【alb使用https时支持】是否开启HSTS，True(开启)， False(关闭)，缺省为不改变原值
     */
    private Boolean hstsEnable;

    /**
     * 【alb使用https时支持】HSTS过期时间(秒)，取值范围为[1, 94608000(3年)]，缺省为不改变原值
     */
    private Integer hstsMaxAge;

    /**
     * 【alb Https和Tls协议】Listener绑定的默认证书，最多支持两个，两个证书的加密算法需要不同
     */
    private List<CertificateSpec> certificateSpecs;

    /**
     * 【alb、nlb】空闲连接超时时间, 范围为[1,86400]。 &lt;br&gt;（Tcp和Tls协议）默认为：1800s &lt;br&gt;（Http和Https协议）默认为：60s &lt;br&gt;【dnlb】不支持该功能
     */
    private Integer connectionIdleTimeSeconds;

    /**
     * 默认后端服务Id
     */
    private String backendId;

    /**
     * 【alb Https和Http协议】转发规则组Id
     */
    private String urlMapId;

    /**
     * 监听器描述,允许输入UTF-8编码下的全部字符，不超过256字符
     */
    private String description;


    /**
     * get 监听器名称,只允许输入中文、数字、大小写字母、英文下划线“_”及中划线“-”，不允许为空且不超过32字符
     *
     * @return
     */
    public String getListenerName() {
        return listenerName;
    }

    /**
     * set 监听器名称,只允许输入中文、数字、大小写字母、英文下划线“_”及中划线“-”，不允许为空且不超过32字符
     *
     * @param listenerName
     */
    public void setListenerName(String listenerName) {
        this.listenerName = listenerName;
    }

    /**
     * get Listener状态, 取值为On或者为Off
     *
     * @return
     */
    public String getStatus() {
        return status;
    }

    /**
     * set Listener状态, 取值为On或者为Off
     *
     * @param status
     */
    public void setStatus(String status) {
        this.status = status;
    }

    /**
     * get 【alb使用https时支持】是否开启HSTS，True(开启)， False(关闭)，缺省为不改变原值
     *
     * @return
     */
    public Boolean getHstsEnable() {
        return hstsEnable;
    }

    /**
     * set 【alb使用https时支持】是否开启HSTS，True(开启)， False(关闭)，缺省为不改变原值
     *
     * @param hstsEnable
     */
    public void setHstsEnable(Boolean hstsEnable) {
        this.hstsEnable = hstsEnable;
    }

    /**
     * get 【alb使用https时支持】HSTS过期时间(秒)，取值范围为[1, 94608000(3年)]，缺省为不改变原值
     *
     * @return
     */
    public Integer getHstsMaxAge() {
        return hstsMaxAge;
    }

    /**
     * set 【alb使用https时支持】HSTS过期时间(秒)，取值范围为[1, 94608000(3年)]，缺省为不改变原值
     *
     * @param hstsMaxAge
     */
    public void setHstsMaxAge(Integer hstsMaxAge) {
        this.hstsMaxAge = hstsMaxAge;
    }

    /**
     * get 【alb Https和Tls协议】Listener绑定的默认证书，最多支持两个，两个证书的加密算法需要不同
     *
     * @return
     */
    public List<CertificateSpec> getCertificateSpecs() {
        return certificateSpecs;
    }

    /**
     * set 【alb Https和Tls协议】Listener绑定的默认证书，最多支持两个，两个证书的加密算法需要不同
     *
     * @param certificateSpecs
     */
    public void setCertificateSpecs(List<CertificateSpec> certificateSpecs) {
        this.certificateSpecs = certificateSpecs;
    }

    /**
     * get 【alb、nlb】空闲连接超时时间, 范围为[1,86400]。 &lt;br&gt;（Tcp和Tls协议）默认为：1800s &lt;br&gt;（Http和Https协议）默认为：60s &lt;br&gt;【dnlb】不支持该功能
     *
     * @return
     */
    public Integer getConnectionIdleTimeSeconds() {
        return connectionIdleTimeSeconds;
    }

    /**
     * set 【alb、nlb】空闲连接超时时间, 范围为[1,86400]。 &lt;br&gt;（Tcp和Tls协议）默认为：1800s &lt;br&gt;（Http和Https协议）默认为：60s &lt;br&gt;【dnlb】不支持该功能
     *
     * @param connectionIdleTimeSeconds
     */
    public void setConnectionIdleTimeSeconds(Integer connectionIdleTimeSeconds) {
        this.connectionIdleTimeSeconds = connectionIdleTimeSeconds;
    }

    /**
     * get 默认后端服务Id
     *
     * @return
     */
    public String getBackendId() {
        return backendId;
    }

    /**
     * set 默认后端服务Id
     *
     * @param backendId
     */
    public void setBackendId(String backendId) {
        this.backendId = backendId;
    }

    /**
     * get 【alb Https和Http协议】转发规则组Id
     *
     * @return
     */
    public String getUrlMapId() {
        return urlMapId;
    }

    /**
     * set 【alb Https和Http协议】转发规则组Id
     *
     * @param urlMapId
     */
    public void setUrlMapId(String urlMapId) {
        this.urlMapId = urlMapId;
    }

    /**
     * get 监听器描述,允许输入UTF-8编码下的全部字符，不超过256字符
     *
     * @return
     */
    public String getDescription() {
        return description;
    }

    /**
     * set 监听器描述,允许输入UTF-8编码下的全部字符，不超过256字符
     *
     * @param description
     */
    public void setDescription(String description) {
        this.description = description;
    }


    /**
     * set 监听器名称,只允许输入中文、数字、大小写字母、英文下划线“_”及中划线“-”，不允许为空且不超过32字符
     *
     * @param listenerName
     */
    public UpdateListenerSpec listenerName(String listenerName) {
        this.listenerName = listenerName;
        return this;
    }

    /**
     * set Listener状态, 取值为On或者为Off
     *
     * @param status
     */
    public UpdateListenerSpec status(String status) {
        this.status = status;
        return this;
    }

    /**
     * set 【alb使用https时支持】是否开启HSTS，True(开启)， False(关闭)，缺省为不改变原值
     *
     * @param hstsEnable
     */
    public UpdateListenerSpec hstsEnable(Boolean hstsEnable) {
        this.hstsEnable = hstsEnable;
        return this;
    }

    /**
     * set 【alb使用https时支持】HSTS过期时间(秒)，取值范围为[1, 94608000(3年)]，缺省为不改变原值
     *
     * @param hstsMaxAge
     */
    public UpdateListenerSpec hstsMaxAge(Integer hstsMaxAge) {
        this.hstsMaxAge = hstsMaxAge;
        return this;
    }

    /**
     * set 【alb Https和Tls协议】Listener绑定的默认证书，最多支持两个，两个证书的加密算法需要不同
     *
     * @param certificateSpecs
     */
    public UpdateListenerSpec certificateSpecs(List<CertificateSpec> certificateSpecs) {
        this.certificateSpecs = certificateSpecs;
        return this;
    }

    /**
     * set 【alb、nlb】空闲连接超时时间, 范围为[1,86400]。 &lt;br&gt;（Tcp和Tls协议）默认为：1800s &lt;br&gt;（Http和Https协议）默认为：60s &lt;br&gt;【dnlb】不支持该功能
     *
     * @param connectionIdleTimeSeconds
     */
    public UpdateListenerSpec connectionIdleTimeSeconds(Integer connectionIdleTimeSeconds) {
        this.connectionIdleTimeSeconds = connectionIdleTimeSeconds;
        return this;
    }

    /**
     * set 默认后端服务Id
     *
     * @param backendId
     */
    public UpdateListenerSpec backendId(String backendId) {
        this.backendId = backendId;
        return this;
    }

    /**
     * set 【alb Https和Http协议】转发规则组Id
     *
     * @param urlMapId
     */
    public UpdateListenerSpec urlMapId(String urlMapId) {
        this.urlMapId = urlMapId;
        return this;
    }

    /**
     * set 监听器描述,允许输入UTF-8编码下的全部字符，不超过256字符
     *
     * @param description
     */
    public UpdateListenerSpec description(String description) {
        this.description = description;
        return this;
    }


    /**
     * add item to 【alb Https和Tls协议】Listener绑定的默认证书，最多支持两个，两个证书的加密算法需要不同
     *
     * @param certificateSpec
     */
    public void addCertificateSpec(CertificateSpec certificateSpec) {
        if (this.certificateSpecs == null) {
            this.certificateSpecs = new ArrayList<>();
        }
        this.certificateSpecs.add(certificateSpec);
    }

}